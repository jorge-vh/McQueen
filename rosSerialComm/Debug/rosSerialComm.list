
rosSerialComm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08009ee4  08009ee4  00019ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3bc  0800a3bc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3c4  0800a3c4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a3c4  0800a3c4  0001a3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a3cc  0800a3cc  0001a3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a3d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055cc  20000088  0800a45c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005654  0800a45c  00025654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002860d  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004263  00000000  00000000  000486c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  0004c928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001690  00000000  00000000  0004e0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006928  00000000  00000000  0004f778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198af  00000000  00000000  000560a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa7ff  00000000  00000000  0006f94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a14e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ee0  00000000  00000000  0011a1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ecc 	.word	0x08009ecc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08009ecc 	.word	0x08009ecc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	0a5a      	lsrs	r2, r3, #9
 8000504:	490f      	ldr	r1, [pc, #60]	; (8000544 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000506:	fba1 1202 	umull	r1, r2, r1, r2
 800050a:	09d2      	lsrs	r2, r2, #7
 800050c:	490e      	ldr	r1, [pc, #56]	; (8000548 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800050e:	fb01 f202 	mul.w	r2, r1, r2
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	0a5b      	lsrs	r3, r3, #9
 800051c:	4a09      	ldr	r2, [pc, #36]	; (8000544 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	09db      	lsrs	r3, r3, #7
 8000524:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	441a      	add	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	00044b83 	.word	0x00044b83
 8000548:	3b9aca00 	.word	0x3b9aca00

0800054c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
	...

08000570 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <_ZN3ros3MsgC1Ev+0x1c>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	0800a2d0 	.word	0x0800a2d0

08000590 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
      data()
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ffe8 	bl	8000570 <_ZN3ros3MsgC1Ev>
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3304      	adds	r3, #4
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ffce 	bl	800054c <_ZN3ros4TimeC1Ev>
    {
    }
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4618      	mov	r0, r3
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	0800a2b8 	.word	0x0800a2b8

080005c0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6859      	ldr	r1, [r3, #4]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	b2ca      	uxtb	r2, r1
 80005da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	0a19      	lsrs	r1, r3, #8
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3301      	adds	r3, #1
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	4413      	add	r3, r2
 80005ea:	b2ca      	uxtb	r2, r1
 80005ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	0c19      	lsrs	r1, r3, #16
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	3302      	adds	r3, #2
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	4413      	add	r3, r2
 80005fc:	b2ca      	uxtb	r2, r1
 80005fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	0e19      	lsrs	r1, r3, #24
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3303      	adds	r3, #3
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	4413      	add	r3, r2
 800060e:	b2ca      	uxtb	r2, r1
 8000610:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3304      	adds	r3, #4
 8000616:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6899      	ldr	r1, [r3, #8]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	683a      	ldr	r2, [r7, #0]
 8000620:	4413      	add	r3, r2
 8000622:	b2ca      	uxtb	r2, r1
 8000624:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	0a19      	lsrs	r1, r3, #8
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3301      	adds	r3, #1
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	4413      	add	r3, r2
 8000634:	b2ca      	uxtb	r2, r1
 8000636:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	0c19      	lsrs	r1, r3, #16
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3302      	adds	r3, #2
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	4413      	add	r3, r2
 8000646:	b2ca      	uxtb	r2, r1
 8000648:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	0e19      	lsrs	r1, r3, #24
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	3303      	adds	r3, #3
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	4413      	add	r3, r2
 8000658:	b2ca      	uxtb	r2, r1
 800065a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3304      	adds	r3, #4
 8000660:	60fb      	str	r3, [r7, #12]
      return offset;
 8000662:	68fb      	ldr	r3, [r7, #12]
    }
 8000664:	4618      	mov	r0, r3
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685a      	ldr	r2, [r3, #4]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3301      	adds	r3, #1
 8000694:	6839      	ldr	r1, [r7, #0]
 8000696:	440b      	add	r3, r1
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	021b      	lsls	r3, r3, #8
 800069c:	431a      	orrs	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	3302      	adds	r3, #2
 80006aa:	6839      	ldr	r1, [r7, #0]
 80006ac:	440b      	add	r3, r1
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	041b      	lsls	r3, r3, #16
 80006b2:	431a      	orrs	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	685a      	ldr	r2, [r3, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3303      	adds	r3, #3
 80006c0:	6839      	ldr	r1, [r7, #0]
 80006c2:	440b      	add	r3, r1
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	061b      	lsls	r3, r3, #24
 80006c8:	431a      	orrs	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3304      	adds	r3, #4
 80006d2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	3301      	adds	r3, #1
 80006ea:	6839      	ldr	r1, [r7, #0]
 80006ec:	440b      	add	r3, r1
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	021b      	lsls	r3, r3, #8
 80006f2:	431a      	orrs	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	689a      	ldr	r2, [r3, #8]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3302      	adds	r3, #2
 8000700:	6839      	ldr	r1, [r7, #0]
 8000702:	440b      	add	r3, r1
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	041b      	lsls	r3, r3, #16
 8000708:	431a      	orrs	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	689a      	ldr	r2, [r3, #8]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3303      	adds	r3, #3
 8000716:	6839      	ldr	r1, [r7, #0]
 8000718:	440b      	add	r3, r1
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	061b      	lsls	r3, r3, #24
 800071e:	431a      	orrs	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3304      	adds	r3, #4
 8000728:	60fb      	str	r3, [r7, #12]
     return offset;
 800072a:	68fb      	ldr	r3, [r7, #12]
    }
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	08009ee4 	.word	0x08009ee4

08000754 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800075e:	4618      	mov	r0, r3
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	08009ef4 	.word	0x08009ef4

08000770 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fef8 	bl	8000570 <_ZN3ros3MsgC1Ev>
 8000780:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	809a      	strh	r2, [r3, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a09      	ldr	r2, [pc, #36]	; (80007b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800079c:	611a      	str	r2, [r3, #16]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
    {
    }
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	0800a2a0 	.word	0x0800a2a0
 80007b4:	08009f18 	.word	0x08009f18

080007b8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	8899      	ldrh	r1, [r3, #4]
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	b2ca      	uxtb	r2, r1
 80007d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	889b      	ldrh	r3, [r3, #4]
 80007d8:	0a1b      	lsrs	r3, r3, #8
 80007da:	b299      	uxth	r1, r3
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	3301      	adds	r3, #1
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	b2ca      	uxtb	r2, r1
 80007e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	3302      	adds	r3, #2
 80007ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fcf4 	bl	80001e0 <strlen>
 80007f8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	69b9      	ldr	r1, [r7, #24]
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fb6f 	bl	8001ee6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	3304      	adds	r3, #4
 800080c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	18d0      	adds	r0, r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	69ba      	ldr	r2, [r7, #24]
 800081a:	4619      	mov	r1, r3
 800081c:	f009 f93c 	bl	8009a98 <memcpy>
      offset += length_topic_name;
 8000820:	69fa      	ldr	r2, [r7, #28]
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	4413      	add	r3, r2
 8000826:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fcd7 	bl	80001e0 <strlen>
 8000832:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	4413      	add	r3, r2
 800083a:	6979      	ldr	r1, [r7, #20]
 800083c:	4618      	mov	r0, r3
 800083e:	f001 fb52 	bl	8001ee6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3304      	adds	r3, #4
 8000846:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	18d0      	adds	r0, r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	4619      	mov	r1, r3
 8000856:	f009 f91f 	bl	8009a98 <memcpy>
      offset += length_message_type;
 800085a:	69fa      	ldr	r2, [r7, #28]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	4413      	add	r3, r2
 8000860:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	691b      	ldr	r3, [r3, #16]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fcba 	bl	80001e0 <strlen>
 800086c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	4413      	add	r3, r2
 8000874:	6939      	ldr	r1, [r7, #16]
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fb35 	bl	8001ee6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	3304      	adds	r3, #4
 8000880:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	18d0      	adds	r0, r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	4619      	mov	r1, r3
 8000890:	f009 f902 	bl	8009a98 <memcpy>
      offset += length_md5sum;
 8000894:	69fa      	ldr	r2, [r7, #28]
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	4413      	add	r3, r2
 800089a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80008a2:	68f9      	ldr	r1, [r7, #12]
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	4413      	add	r3, r2
 80008aa:	b2ca      	uxtb	r2, r1
 80008ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	0a19      	lsrs	r1, r3, #8
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3301      	adds	r3, #1
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	4413      	add	r3, r2
 80008ba:	b2ca      	uxtb	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	0c19      	lsrs	r1, r3, #16
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3302      	adds	r3, #2
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	4413      	add	r3, r2
 80008ca:	b2ca      	uxtb	r2, r1
 80008cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	0e19      	lsrs	r1, r3, #24
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3303      	adds	r3, #3
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	4413      	add	r3, r2
 80008da:	b2ca      	uxtb	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3304      	adds	r3, #4
 80008e2:	61fb      	str	r3, [r7, #28]
      return offset;
 80008e4:	69fb      	ldr	r3, [r7, #28]
    }
 80008e6:	4618      	mov	r0, r3
 80008e8:	3720      	adds	r7, #32
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b08a      	sub	sp, #40	; 0x28
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	4413      	add	r3, r2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b29a      	uxth	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	889b      	ldrh	r3, [r3, #4]
 800090e:	b21a      	sxth	r2, r3
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	3301      	adds	r3, #1
 8000914:	6839      	ldr	r1, [r7, #0]
 8000916:	440b      	add	r3, r1
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21b      	sxth	r3, r3
 800091e:	4313      	orrs	r3, r2
 8000920:	b21b      	sxth	r3, r3
 8000922:	b29a      	uxth	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	3302      	adds	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	441a      	add	r2, r3
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f001 faf1 	bl	8001f22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	3304      	adds	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	4413      	add	r3, r2
 8000950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000952:	429a      	cmp	r2, r3
 8000954:	d20c      	bcs.n	8000970 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	441a      	add	r2, r3
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	3b01      	subs	r3, #1
 8000960:	6839      	ldr	r1, [r7, #0]
 8000962:	440b      	add	r3, r1
 8000964:	7812      	ldrb	r2, [r2, #0]
 8000966:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	3301      	adds	r3, #1
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
 800096e:	e7ec      	b.n	800094a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	4413      	add	r3, r2
 8000976:	3b01      	subs	r3, #1
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	4413      	add	r3, r2
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	3b01      	subs	r3, #1
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	441a      	add	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	4413      	add	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	441a      	add	r2, r3
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 fabe 	bl	8001f22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	3304      	adds	r3, #4
 80009aa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	623b      	str	r3, [r7, #32]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	4413      	add	r3, r2
 80009b6:	6a3a      	ldr	r2, [r7, #32]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d20c      	bcs.n	80009d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	6a3b      	ldr	r3, [r7, #32]
 80009c0:	441a      	add	r2, r3
 80009c2:	6a3b      	ldr	r3, [r7, #32]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	6839      	ldr	r1, [r7, #0]
 80009c8:	440b      	add	r3, r1
 80009ca:	7812      	ldrb	r2, [r2, #0]
 80009cc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80009ce:	6a3b      	ldr	r3, [r7, #32]
 80009d0:	3301      	adds	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
 80009d4:	e7ec      	b.n	80009b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	4413      	add	r3, r2
 80009dc:	3b01      	subs	r3, #1
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	441a      	add	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	4413      	add	r3, r2
 80009f8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	441a      	add	r2, r3
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fa8b 	bl	8001f22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	3304      	adds	r3, #4
 8000a10:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	61fb      	str	r3, [r7, #28]
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d20c      	bcs.n	8000a3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	441a      	add	r2, r3
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	6839      	ldr	r1, [r7, #0]
 8000a2e:	440b      	add	r3, r1
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	3301      	adds	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
 8000a3a:	e7ec      	b.n	8000a16 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4413      	add	r3, r2
 8000a42:	3b01      	subs	r3, #1
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	441a      	add	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	6839      	ldr	r1, [r7, #0]
 8000a6a:	440a      	add	r2, r1
 8000a6c:	7812      	ldrb	r2, [r2, #0]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	3301      	adds	r3, #1
 8000a78:	6839      	ldr	r1, [r7, #0]
 8000a7a:	440b      	add	r3, r1
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	4313      	orrs	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	3302      	adds	r3, #2
 8000a8a:	6839      	ldr	r1, [r7, #0]
 8000a8c:	440b      	add	r3, r1
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	041b      	lsls	r3, r3, #16
 8000a92:	4313      	orrs	r3, r2
 8000a94:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	3303      	adds	r3, #3
 8000a9c:	6839      	ldr	r1, [r7, #0]
 8000a9e:	440b      	add	r3, r1
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	061b      	lsls	r3, r3, #24
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	61bb      	str	r3, [r7, #24]
     return offset;
 8000ab4:	69bb      	ldr	r3, [r7, #24]
    }
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3728      	adds	r7, #40	; 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	08009f1c 	.word	0x08009f1c

08000adc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	08009f38 	.word	0x08009f38

08000af8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fd34 	bl	8000570 <_ZN3ros3MsgC1Ev>
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	711a      	strb	r2, [r3, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000b18:	609a      	str	r2, [r3, #8]
    {
    }
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	0800a288 	.word	0x0800a288
 8000b28:	08009f18 	.word	0x08009f18

08000b2c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	7912      	ldrb	r2, [r2, #4]
 8000b44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fb45 	bl	80001e0 <strlen>
 8000b56:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	68b9      	ldr	r1, [r7, #8]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f001 f9c0 	bl	8001ee6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	18d0      	adds	r0, r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f008 ff8d 	bl	8009a98 <memcpy>
      offset += length_msg;
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4413      	add	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b86:	68fb      	ldr	r3, [r7, #12]
    }
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	3301      	adds	r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	683a      	ldr	r2, [r7, #0]
 8000bb4:	441a      	add	r2, r3
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 f9b0 	bl	8001f22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d20c      	bcs.n	8000bf2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	441a      	add	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	440b      	add	r3, r1
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	e7ec      	b.n	8000bcc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	441a      	add	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4413      	add	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
     return offset;
 8000c16:	693b      	ldr	r3, [r7, #16]
    }
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	08009f5c 	.word	0x08009f5c

08000c3c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	08009f70 	.word	0x08009f70

08000c58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fc84 	bl	8000570 <_ZN3ros3MsgC1Ev>
 8000c68:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	61da      	str	r2, [r3, #28]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	0800a270 	.word	0x0800a270

08000ca0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6859      	ldr	r1, [r3, #4]
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	0a19      	lsrs	r1, r3, #8
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	0c19      	lsrs	r1, r3, #16
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	b2ca      	uxtb	r2, r1
 8000cde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	0e19      	lsrs	r1, r3, #24
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	3303      	adds	r3, #3
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	6a3a      	ldr	r2, [r7, #32]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d22b      	bcs.n	8000d5e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000d14:	6939      	ldr	r1, [r7, #16]
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b2ca      	uxtb	r2, r1
 8000d1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	0a19      	lsrs	r1, r3, #8
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	3301      	adds	r3, #1
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b2ca      	uxtb	r2, r1
 8000d2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	0c19      	lsrs	r1, r3, #16
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	3302      	adds	r3, #2
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b2ca      	uxtb	r2, r1
 8000d3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	0e19      	lsrs	r1, r3, #24
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	3303      	adds	r3, #3
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2ca      	uxtb	r2, r1
 8000d4e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	3304      	adds	r3, #4
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	623b      	str	r3, [r7, #32]
 8000d5c:	e7ce      	b.n	8000cfc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6919      	ldr	r1, [r3, #16]
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	b2ca      	uxtb	r2, r1
 8000d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	0a19      	lsrs	r1, r3, #8
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	3301      	adds	r3, #1
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	4413      	add	r3, r2
 8000d7a:	b2ca      	uxtb	r2, r1
 8000d7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	0c19      	lsrs	r1, r3, #16
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	3302      	adds	r3, #2
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b2ca      	uxtb	r2, r1
 8000d8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	0e19      	lsrs	r1, r3, #24
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	3303      	adds	r3, #3
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b2ca      	uxtb	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	3304      	adds	r3, #4
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d22b      	bcs.n	8000e0e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699a      	ldr	r2, [r3, #24]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000dc4:	68f9      	ldr	r1, [r7, #12]
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	b2ca      	uxtb	r2, r1
 8000dce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	0a19      	lsrs	r1, r3, #8
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	b2ca      	uxtb	r2, r1
 8000dde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	0c19      	lsrs	r1, r3, #16
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	3302      	adds	r3, #2
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	b2ca      	uxtb	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	0e19      	lsrs	r1, r3, #24
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	3303      	adds	r3, #3
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2ca      	uxtb	r2, r1
 8000dfe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	3304      	adds	r3, #4
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	e7ce      	b.n	8000dac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69d9      	ldr	r1, [r3, #28]
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	b2ca      	uxtb	r2, r1
 8000e1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	0a19      	lsrs	r1, r3, #8
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	3301      	adds	r3, #1
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	4413      	add	r3, r2
 8000e2a:	b2ca      	uxtb	r2, r1
 8000e2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	0c19      	lsrs	r1, r3, #16
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	3302      	adds	r3, #2
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2ca      	uxtb	r2, r1
 8000e3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	0e19      	lsrs	r1, r3, #24
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	3303      	adds	r3, #3
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b2ca      	uxtb	r2, r1
 8000e50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	3304      	adds	r3, #4
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d228      	bcs.n	8000eb8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff f9b4 	bl	80001e0 <strlen>
 8000e78:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	6979      	ldr	r1, [r7, #20]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 f82f 	bl	8001ee6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	18d0      	adds	r0, r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f008 fdf8 	bl	8009a98 <memcpy>
      offset += length_stringsi;
 8000ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	4413      	add	r3, r2
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	61bb      	str	r3, [r7, #24]
 8000eb6:	e7d1      	b.n	8000e5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b08e      	sub	sp, #56	; 0x38
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000edc:	3301      	adds	r3, #1
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	6a3a      	ldr	r2, [r7, #32]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eee:	3302      	adds	r3, #2
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	041b      	lsls	r3, r3, #16
 8000ef8:	6a3a      	ldr	r2, [r7, #32]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f00:	3303      	adds	r3, #3
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	061b      	lsls	r3, r3, #24
 8000f0a:	6a3a      	ldr	r2, [r7, #32]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f12:	3304      	adds	r3, #4
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	6a3a      	ldr	r2, [r7, #32]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d90a      	bls.n	8000f36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	f008 fec4 	bl	8009cb8 <realloc>
 8000f30:	4602      	mov	r2, r0
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a3a      	ldr	r2, [r7, #32]
 8000f3a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d236      	bcs.n	8000fb8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	440a      	add	r2, r1
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f60:	3301      	adds	r3, #1
 8000f62:	6839      	ldr	r1, [r7, #0]
 8000f64:	440b      	add	r3, r1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f72:	3302      	adds	r3, #2
 8000f74:	6839      	ldr	r1, [r7, #0]
 8000f76:	440b      	add	r3, r1
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f84:	3303      	adds	r3, #3
 8000f86:	6839      	ldr	r1, [r7, #0]
 8000f88:	440b      	add	r3, r1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	061b      	lsls	r3, r3, #24
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8000fb6:	e7c3      	b.n	8000f40 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	041b      	lsls	r3, r3, #16
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe8:	3303      	adds	r3, #3
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	061b      	lsls	r3, r3, #24
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	429a      	cmp	r2, r3
 8001006:	d90a      	bls.n	800101e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	699a      	ldr	r2, [r3, #24]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4619      	mov	r1, r3
 8001012:	4610      	mov	r0, r2
 8001014:	f008 fe50 	bl	8009cb8 <realloc>
 8001018:	4602      	mov	r2, r0
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800102e:	429a      	cmp	r2, r3
 8001030:	d236      	bcs.n	80010a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800103a:	6839      	ldr	r1, [r7, #0]
 800103c:	440a      	add	r2, r1
 800103e:	7812      	ldrb	r2, [r2, #0]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001048:	3301      	adds	r3, #1
 800104a:	6839      	ldr	r1, [r7, #0]
 800104c:	440b      	add	r3, r1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105a:	3302      	adds	r3, #2
 800105c:	6839      	ldr	r1, [r7, #0]
 800105e:	440b      	add	r3, r1
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	041b      	lsls	r3, r3, #16
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106c:	3303      	adds	r3, #3
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	440b      	add	r3, r1
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	061b      	lsls	r3, r3, #24
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001082:	3304      	adds	r3, #4
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699a      	ldr	r2, [r3, #24]
 800108a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	3214      	adds	r2, #20
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109a:	3301      	adds	r3, #1
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800109e:	e7c3      	b.n	8001028 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80010a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ac:	3301      	adds	r3, #1
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80010bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010be:	3302      	adds	r3, #2
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	041b      	lsls	r3, r3, #16
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80010ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d0:	3303      	adds	r3, #3
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	061b      	lsls	r3, r3, #24
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80010e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e2:	3304      	adds	r3, #4
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d90a      	bls.n	8001106 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4619      	mov	r1, r3
 80010fa:	4610      	mov	r0, r2
 80010fc:	f008 fddc 	bl	8009cb8 <realloc>
 8001100:	4602      	mov	r2, r0
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001116:	429a      	cmp	r2, r3
 8001118:	d23f      	bcs.n	800119a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800111a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	441a      	add	r2, r3
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fefb 	bl	8001f22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112e:	3304      	adds	r3, #4
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
 8001136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113e:	429a      	cmp	r2, r3
 8001140:	d20c      	bcs.n	800115c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	441a      	add	r2, r3
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	3b01      	subs	r3, #1
 800114c:	6839      	ldr	r1, [r7, #0]
 800114e:	440b      	add	r3, r1
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	3301      	adds	r3, #1
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
 800115a:	e7ec      	b.n	8001136 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800115c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	3b01      	subs	r3, #1
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800116c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116e:	3b01      	subs	r3, #1
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	441a      	add	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4413      	add	r3, r2
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	3220      	adds	r2, #32
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001194:	3301      	adds	r3, #1
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
 8001198:	e7ba      	b.n	8001110 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800119a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800119c:	4618      	mov	r0, r3
 800119e:	3738      	adds	r7, #56	; 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	0800a0e0 	.word	0x0800a0e0

080011c0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	08009f94 	.word	0x08009f94

080011dc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68d8      	ldr	r0, [r3, #12]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6891      	ldr	r1, [r2, #8]
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4798      	blx	r3
 8001228:	4603      	mov	r3, r0
  };
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
  }
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <_ZN13STM32HardwareC1Ev+0x34>)
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	200000f0 	.word	0x200000f0

080012a8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 f804 	bl	80012be <_ZN13STM32Hardware10reset_rbufEv>
    }
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3304      	adds	r3, #4
 80012ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d2:	4619      	mov	r1, r3
 80012d4:	f004 fb1a 	bl	800590c <HAL_UART_Receive_DMA>
    }
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ffa8 	bl	800124a <_ZN13STM32Hardware10getRdmaIndEv>
 80012fa:	4603      	mov	r3, r0
 80012fc:	429c      	cmp	r4, r3
 80012fe:	bf14      	ite	ne
 8001300:	2301      	movne	r3, #1
 8001302:	2300      	moveq	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d012      	beq.n	8001330 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001310:	1c59      	adds	r1, r3, #1
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	791b      	ldrb	r3, [r3, #4]
 800131e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001330:	68fb      	ldr	r3, [r7, #12]
    }
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	bd90      	pop	{r4, r7, pc}
	...

0800133c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b20      	cmp	r3, #32
 8001350:	d108      	bne.n	8001364 <_ZN13STM32Hardware5flushEv+0x28>
 8001352:	4b33      	ldr	r3, [pc, #204]	; (8001420 <_ZN13STM32Hardware5flushEv+0xe4>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f083 0301 	eor.w	r3, r3, #1
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <_ZN13STM32Hardware5flushEv+0x28>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <_ZN13STM32Hardware5flushEv+0x2a>
 8001364:	2300      	movs	r3, #0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d055      	beq.n	8001416 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <_ZN13STM32Hardware5flushEv+0xe4>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800137c:	429a      	cmp	r2, r3
 800137e:	d047      	beq.n	8001410 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001390:	429a      	cmp	r2, r3
 8001392:	d217      	bcs.n	80013c4 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800139a:	b29a      	uxth	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	89fa      	ldrh	r2, [r7, #14]
 80013bc:	4619      	mov	r1, r3
 80013be:	f004 fa27 	bl	8005810 <HAL_UART_Transmit_DMA>
 80013c2:	e01f      	b.n	8001404 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80013d0:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	89fa      	ldrh	r2, [r7, #14]
 80013e6:	4619      	mov	r1, r3
 80013e8:	f004 fa12 	bl	8005810 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f503 7102 	add.w	r1, r3, #520	; 0x208
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	f004 fa06 	bl	8005810 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <_ZN13STM32Hardware5flushEv+0xe4>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
      }
    }
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200000a4 	.word	0x200000a4

08001424 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
      long unsigned int n = length;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800143a:	bf28      	it	cs
 800143c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8001440:	617b      	str	r3, [r7, #20]

      long unsigned int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001448:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	4293      	cmp	r3, r2
 8001450:	bf28      	it	cs
 8001452:	4613      	movcs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800145c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	4618      	mov	r0, r3
 800146a:	f008 fb15 	bl	8009a98 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	4413      	add	r3, r2
 8001478:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	429a      	cmp	r2, r3
 8001488:	d00b      	beq.n	80014a2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	18d1      	adds	r1, r2, r3
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	461a      	mov	r2, r3
 800149e:	f008 fafb 	bl	8009a98 <memcpy>
      }

      flush();
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7ff ff4a 	bl	800133c <_ZN13STM32Hardware5flushEv>
    }
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	f001 fe4e 	bl	8003158 <HAL_GetTick>
 80014bc:	4603      	mov	r3, r0
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
      data("")
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f84c 	bl	8000570 <_ZN3ros3MsgC1Ev>
 80014d8:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <_ZN8std_msgs6StringC1Ev+0x28>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80014e2:	605a      	str	r2, [r3, #4]
    {
    }
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	0800a22c 	.word	0x0800a22c
 80014f4:	08009f18 	.word	0x08009f18

080014f8 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fe68 	bl	80001e0 <strlen>
 8001510:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	4413      	add	r3, r2
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fce3 	bl	8001ee6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3304      	adds	r3, #4
 8001524:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	18d0      	adds	r0, r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	4619      	mov	r1, r3
 8001534:	f008 fab0 	bl	8009a98 <memcpy>
      offset += length_data;
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	4413      	add	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001540:	68fb      	ldr	r3, [r7, #12]
    }
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	441a      	add	r2, r3
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fcdc 	bl	8001f22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	3304      	adds	r3, #4
 800156e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	429a      	cmp	r2, r3
 800157e:	d20c      	bcs.n	800159a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	441a      	add	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3b01      	subs	r3, #1
 800158a:	6839      	ldr	r1, [r7, #0]
 800158c:	440b      	add	r3, r1
 800158e:	7812      	ldrb	r2, [r2, #0]
 8001590:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3301      	adds	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e7ec      	b.n	8001574 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	3b01      	subs	r3, #1
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	4413      	add	r3, r2
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	441a      	add	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
     return offset;
 80015be:	693b      	ldr	r3, [r7, #16]
    }
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	08009fb8 	.word	0x08009fb8

080015e4 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	08009fc8 	.word	0x08009fc8

08001600 <HAL_UART_TxCpltCallback>:
ros::Publisher chatter("chatter", &str_msg);
ros::Subscriber<std_msgs::String> stm32_comms("gripper_action", &req);
std::string request="";
std::string gripState="";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <HAL_UART_TxCpltCallback+0x20>)
 800160a:	f000 fd73 	bl	80020f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800160e:	4603      	mov	r3, r0
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fe93 	bl	800133c <_ZN13STM32Hardware5flushEv>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000023c 	.word	0x2000023c

08001624 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_UART_RxCpltCallback+0x20>)
 800162e:	f000 fd61 	bl	80020f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001632:	4603      	mov	r3, r0
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fe42 	bl	80012be <_ZN13STM32Hardware10reset_rbufEv>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000023c 	.word	0x2000023c

08001648 <_Z5setupv>:
void setup(void);
void jetsonResponse(void);
/* USER CODE BEGIN PFP */

void setup(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  nh.initNode();
 800164c:	4806      	ldr	r0, [pc, #24]	; (8001668 <_Z5setupv+0x20>)
 800164e:	f000 fd5d 	bl	800210c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 8001652:	4906      	ldr	r1, [pc, #24]	; (800166c <_Z5setupv+0x24>)
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <_Z5setupv+0x20>)
 8001656:	f000 fd76 	bl	8002146 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(stm32_comms);
 800165a:	4905      	ldr	r1, [pc, #20]	; (8001670 <_Z5setupv+0x28>)
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <_Z5setupv+0x20>)
 800165e:	f000 fda2 	bl	80021a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000023c 	.word	0x2000023c
 800166c:	20000b80 	.word	0x20000b80
 8001670:	20000b94 	.word	0x20000b94

08001674 <_Z14jetsonResponsev>:


void jetsonResponse(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800167a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167e:	480a      	ldr	r0, [pc, #40]	; (80016a8 <_Z14jetsonResponsev+0x34>)
 8001680:	f002 fc0f 	bl	8003ea2 <HAL_GPIO_TogglePin>
	const char* str = gripState.c_str();
 8001684:	4809      	ldr	r0, [pc, #36]	; (80016ac <_Z14jetsonResponsev+0x38>)
 8001686:	f008 f950 	bl	800992a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800168a:	6078      	str	r0, [r7, #4]
	str_msg.data = str;
 800168c:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <_Z14jetsonResponsev+0x3c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6053      	str	r3, [r2, #4]
	chatter.publish(&str_msg);
 8001692:	4907      	ldr	r1, [pc, #28]	; (80016b0 <_Z14jetsonResponsev+0x3c>)
 8001694:	4807      	ldr	r0, [pc, #28]	; (80016b4 <_Z14jetsonResponsev+0x40>)
 8001696:	f7ff fdb8 	bl	800120a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 800169a:	4807      	ldr	r0, [pc, #28]	; (80016b8 <_Z14jetsonResponsev+0x44>)
 800169c:	f000 fdae 	bl	80021fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40020800 	.word	0x40020800
 80016ac:	20000bc8 	.word	0x20000bc8
 80016b0:	20000b78 	.word	0x20000b78
 80016b4:	20000b80 	.word	0x20000b80
 80016b8:	2000023c 	.word	0x2000023c

080016bc <_Z3reqRKN8std_msgs6StringE>:

void req(const std_msgs::String& msg){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	request = msg.data;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4803      	ldr	r0, [pc, #12]	; (80016d8 <_Z3reqRKN8std_msgs6StringE+0x1c>)
 80016cc:	f008 f929 	bl	8009922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000bb0 	.word	0x20000bb0

080016dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e0:	f001 fd04 	bl	80030ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e4:	f000 f87c 	bl	80017e0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e8:	f000 f9d8 	bl	8001a9c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80016ec:	f000 f9ae 	bl	8001a4c <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 80016f0:	f000 f97e 	bl	80019f0 <_ZL19MX_USART1_UART_Initv>
  MX_TIM2_Init();
 80016f4:	f000 f8de 	bl	80018b4 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 80016f8:	f7ff ffa6 	bl	8001648 <_Z5setupv>

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80016fc:	2100      	movs	r1, #0
 80016fe:	4822      	ldr	r0, [pc, #136]	; (8001788 <main+0xac>)
 8001700:	f003 f980 	bl	8004a04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8001704:	2104      	movs	r1, #4
 8001706:	4820      	ldr	r0, [pc, #128]	; (8001788 <main+0xac>)
 8001708:	f003 f97c 	bl	8004a04 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800170c:	f005 fa52 	bl	8006bb4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of rosSerialComm */
  rosSerialCommHandle = osThreadNew(StartRosSerialComm, NULL, &rosSerialComm_attributes);
 8001710:	4a1e      	ldr	r2, [pc, #120]	; (800178c <main+0xb0>)
 8001712:	2100      	movs	r1, #0
 8001714:	481e      	ldr	r0, [pc, #120]	; (8001790 <main+0xb4>)
 8001716:	f005 fa97 	bl	8006c48 <osThreadNew>
 800171a:	4603      	mov	r3, r0
 800171c:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <main+0xb8>)
 800171e:	6013      	str	r3, [r2, #0]

  /* creation of gripperTask */
  gripperTaskHandle = osThreadNew(StartGripperTask, NULL, &gripperTask_attributes);
 8001720:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <main+0xbc>)
 8001722:	2100      	movs	r1, #0
 8001724:	481d      	ldr	r0, [pc, #116]	; (800179c <main+0xc0>)
 8001726:	f005 fa8f 	bl	8006c48 <osThreadNew>
 800172a:	4603      	mov	r3, r0
 800172c:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <main+0xc4>)
 800172e:	6013      	str	r3, [r2, #0]

  /* creation of artTask */
  artTaskHandle = osThreadNew(StartArtTask, NULL, &artTask_attributes);
 8001730:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <main+0xc8>)
 8001732:	2100      	movs	r1, #0
 8001734:	481c      	ldr	r0, [pc, #112]	; (80017a8 <main+0xcc>)
 8001736:	f005 fa87 	bl	8006c48 <osThreadNew>
 800173a:	4603      	mov	r3, r0
 800173c:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <main+0xd0>)
 800173e:	6013      	str	r3, [r2, #0]

  /* creation of receiveJetson */
  receiveJetsonHandle = osThreadNew(StartReceiveJetson, NULL, &receiveJetson_attributes);
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <main+0xd4>)
 8001742:	2100      	movs	r1, #0
 8001744:	481b      	ldr	r0, [pc, #108]	; (80017b4 <main+0xd8>)
 8001746:	f005 fa7f 	bl	8006c48 <osThreadNew>
 800174a:	4603      	mov	r3, r0
 800174c:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <main+0xdc>)
 800174e:	6013      	str	r3, [r2, #0]

  /* creation of emStop */
  emStopHandle = osThreadNew(StartEmStop, NULL, &emStop_attributes);
 8001750:	4a1a      	ldr	r2, [pc, #104]	; (80017bc <main+0xe0>)
 8001752:	2100      	movs	r1, #0
 8001754:	481a      	ldr	r0, [pc, #104]	; (80017c0 <main+0xe4>)
 8001756:	f005 fa77 	bl	8006c48 <osThreadNew>
 800175a:	4603      	mov	r3, r0
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <main+0xe8>)
 800175e:	6013      	str	r3, [r2, #0]

  /* creation of checkButton */
  checkButtonHandle = osThreadNew(StartCheckButton, NULL, &checkButton_attributes);
 8001760:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <main+0xec>)
 8001762:	2100      	movs	r1, #0
 8001764:	4819      	ldr	r0, [pc, #100]	; (80017cc <main+0xf0>)
 8001766:	f005 fa6f 	bl	8006c48 <osThreadNew>
 800176a:	4603      	mov	r3, r0
 800176c:	4a18      	ldr	r2, [pc, #96]	; (80017d0 <main+0xf4>)
 800176e:	6013      	str	r3, [r2, #0]

  /* creation of transmitJetson */
  transmitJetsonHandle = osThreadNew(StartTransmitJetson, NULL, &transmitJetson_attributes);
 8001770:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <main+0xf8>)
 8001772:	2100      	movs	r1, #0
 8001774:	4818      	ldr	r0, [pc, #96]	; (80017d8 <main+0xfc>)
 8001776:	f005 fa67 	bl	8006c48 <osThreadNew>
 800177a:	4603      	mov	r3, r0
 800177c:	4a17      	ldr	r2, [pc, #92]	; (80017dc <main+0x100>)
 800177e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001780:	f005 fa3c 	bl	8006bfc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001784:	e7fe      	b.n	8001784 <main+0xa8>
 8001786:	bf00      	nop
 8001788:	200000a8 	.word	0x200000a8
 800178c:	0800a0fc 	.word	0x0800a0fc
 8001790:	08001b79 	.word	0x08001b79
 8001794:	200001f4 	.word	0x200001f4
 8001798:	0800a120 	.word	0x0800a120
 800179c:	08001b89 	.word	0x08001b89
 80017a0:	200001f8 	.word	0x200001f8
 80017a4:	0800a144 	.word	0x0800a144
 80017a8:	08001c15 	.word	0x08001c15
 80017ac:	200001fc 	.word	0x200001fc
 80017b0:	0800a168 	.word	0x0800a168
 80017b4:	08001ca1 	.word	0x08001ca1
 80017b8:	20000200 	.word	0x20000200
 80017bc:	0800a18c 	.word	0x0800a18c
 80017c0:	08001d91 	.word	0x08001d91
 80017c4:	20000204 	.word	0x20000204
 80017c8:	0800a1b0 	.word	0x0800a1b0
 80017cc:	08001ddd 	.word	0x08001ddd
 80017d0:	20000208 	.word	0x20000208
 80017d4:	0800a1d4 	.word	0x0800a1d4
 80017d8:	08001e21 	.word	0x08001e21
 80017dc:	2000020c 	.word	0x2000020c

080017e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b094      	sub	sp, #80	; 0x50
 80017e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e6:	f107 0320 	add.w	r3, r7, #32
 80017ea:	2230      	movs	r2, #48	; 0x30
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f008 f97a 	bl	8009ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <_Z18SystemClock_Configv+0xcc>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	4a27      	ldr	r2, [pc, #156]	; (80018ac <_Z18SystemClock_Configv+0xcc>)
 800180e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001812:	6413      	str	r3, [r2, #64]	; 0x40
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <_Z18SystemClock_Configv+0xcc>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <_Z18SystemClock_Configv+0xd0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800182c:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <_Z18SystemClock_Configv+0xd0>)
 800182e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <_Z18SystemClock_Configv+0xd0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001840:	2302      	movs	r3, #2
 8001842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001844:	2301      	movs	r3, #1
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001848:	2310      	movs	r3, #16
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800184c:	2300      	movs	r3, #0
 800184e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001850:	f107 0320 	add.w	r3, r7, #32
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fb3f 	bl	8003ed8 <HAL_RCC_OscConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	bf14      	ite	ne
 8001860:	2301      	movne	r3, #1
 8001862:	2300      	moveq	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800186a:	f000 fb37 	bl	8001edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186e:	230f      	movs	r3, #15
 8001870:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800187a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800187e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f002 fd9c 	bl	80043c8 <HAL_RCC_ClockConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	bf14      	ite	ne
 8001896:	2301      	movne	r3, #1
 8001898:	2300      	moveq	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80018a0:	f000 fb1c 	bl	8001edc <Error_Handler>
  }
}
 80018a4:	bf00      	nop
 80018a6:	3750      	adds	r7, #80	; 0x50
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000

080018b4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	; 0x38
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	f107 0320 	add.w	r3, r7, #32
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
 80018e0:	615a      	str	r2, [r3, #20]
 80018e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e4:	4b41      	ldr	r3, [pc, #260]	; (80019ec <_ZL12MX_TIM2_Initv+0x138>)
 80018e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 80018ec:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <_ZL12MX_TIM2_Initv+0x138>)
 80018ee:	2240      	movs	r2, #64	; 0x40
 80018f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <_ZL12MX_TIM2_Initv+0x138>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 80018f8:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <_ZL12MX_TIM2_Initv+0x138>)
 80018fa:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80018fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <_ZL12MX_TIM2_Initv+0x138>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001906:	4b39      	ldr	r3, [pc, #228]	; (80019ec <_ZL12MX_TIM2_Initv+0x138>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800190c:	4837      	ldr	r0, [pc, #220]	; (80019ec <_ZL12MX_TIM2_Initv+0x138>)
 800190e:	f002 ff6d 	bl	80047ec <HAL_TIM_Base_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	bf14      	ite	ne
 8001918:	2301      	movne	r3, #1
 800191a:	2300      	moveq	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8001922:	f000 fadb 	bl	8001edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800192c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001930:	4619      	mov	r1, r3
 8001932:	482e      	ldr	r0, [pc, #184]	; (80019ec <_ZL12MX_TIM2_Initv+0x138>)
 8001934:	f003 fae0 	bl	8004ef8 <HAL_TIM_ConfigClockSource>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf14      	ite	ne
 800193e:	2301      	movne	r3, #1
 8001940:	2300      	moveq	r3, #0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8001948:	f000 fac8 	bl	8001edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800194c:	4827      	ldr	r0, [pc, #156]	; (80019ec <_ZL12MX_TIM2_Initv+0x138>)
 800194e:	f002 ffff 	bl	8004950 <HAL_TIM_PWM_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf14      	ite	ne
 8001958:	2301      	movne	r3, #1
 800195a:	2300      	moveq	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8001962:	f000 fabb 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	4619      	mov	r1, r3
 8001974:	481d      	ldr	r0, [pc, #116]	; (80019ec <_ZL12MX_TIM2_Initv+0x138>)
 8001976:	f003 fe7b 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 800198a:	f000 faa7 	bl	8001edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198e:	2360      	movs	r3, #96	; 0x60
 8001990:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2200      	movs	r2, #0
 80019a2:	4619      	mov	r1, r3
 80019a4:	4811      	ldr	r0, [pc, #68]	; (80019ec <_ZL12MX_TIM2_Initv+0x138>)
 80019a6:	f003 f9e5 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf14      	ite	ne
 80019b0:	2301      	movne	r3, #1
 80019b2:	2300      	moveq	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 80019ba:	f000 fa8f 	bl	8001edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2204      	movs	r2, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	4809      	ldr	r0, [pc, #36]	; (80019ec <_ZL12MX_TIM2_Initv+0x138>)
 80019c6:	f003 f9d5 	bl	8004d74 <HAL_TIM_PWM_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf14      	ite	ne
 80019d0:	2301      	movne	r3, #1
 80019d2:	2300      	moveq	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 80019da:	f000 fa7f 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019de:	4803      	ldr	r0, [pc, #12]	; (80019ec <_ZL12MX_TIM2_Initv+0x138>)
 80019e0:	f001 f940 	bl	8002c64 <HAL_TIM_MspPostInit>

}
 80019e4:	bf00      	nop
 80019e6:	3738      	adds	r7, #56	; 0x38
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200000a8 	.word	0x200000a8

080019f0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <_ZL19MX_USART1_UART_Initv+0x58>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <_ZL19MX_USART1_UART_Initv+0x54>)
 80019fc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a26:	4807      	ldr	r0, [pc, #28]	; (8001a44 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a28:	f003 fea4 	bl	8005774 <HAL_UART_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf14      	ite	ne
 8001a32:	2301      	movne	r3, #1
 8001a34:	2300      	moveq	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001a3c:	f000 fa4e 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200000f0 	.word	0x200000f0
 8001a48:	40011000 	.word	0x40011000

08001a4c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <_ZL11MX_DMA_Initv+0x4c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <_ZL11MX_DMA_Initv+0x4c>)
 8001a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <_ZL11MX_DMA_Initv+0x4c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2105      	movs	r1, #5
 8001a72:	203a      	movs	r0, #58	; 0x3a
 8001a74:	f001 fc34 	bl	80032e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a78:	203a      	movs	r0, #58	; 0x3a
 8001a7a:	f001 fc4d 	bl	8003318 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2105      	movs	r1, #5
 8001a82:	2046      	movs	r0, #70	; 0x46
 8001a84:	f001 fc2c 	bl	80032e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001a88:	2046      	movs	r0, #70	; 0x46
 8001a8a:	f001 fc45 	bl	8003318 <HAL_NVIC_EnableIRQ>

}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800

08001a9c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <_ZL12MX_GPIO_Initv+0xd0>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a2c      	ldr	r2, [pc, #176]	; (8001b6c <_ZL12MX_GPIO_Initv+0xd0>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <_ZL12MX_GPIO_Initv+0xd0>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <_ZL12MX_GPIO_Initv+0xd0>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <_ZL12MX_GPIO_Initv+0xd0>)
 8001ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZL12MX_GPIO_Initv+0xd0>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <_ZL12MX_GPIO_Initv+0xd0>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <_ZL12MX_GPIO_Initv+0xd0>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <_ZL12MX_GPIO_Initv+0xd0>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <_ZL12MX_GPIO_Initv+0xd0>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <_ZL12MX_GPIO_Initv+0xd0>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <_ZL12MX_GPIO_Initv+0xd0>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b28:	4811      	ldr	r0, [pc, #68]	; (8001b70 <_ZL12MX_GPIO_Initv+0xd4>)
 8001b2a:	f002 f9a1 	bl	8003e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	480a      	ldr	r0, [pc, #40]	; (8001b70 <_ZL12MX_GPIO_Initv+0xd4>)
 8001b48:	f001 fff6 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <_ZL12MX_GPIO_Initv+0xd8>)
 8001b60:	f001 ffea 	bl	8003b38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	; 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020000 	.word	0x40020000

08001b78 <_Z18StartRosSerialCommPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRosSerialComm */
void StartRosSerialComm(void *argument)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f005 f8f3 	bl	8006d6c <osDelay>
 8001b86:	e7fb      	b.n	8001b80 <_Z18StartRosSerialCommPv+0x8>

08001b88 <_Z16StartGripperTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGripperTask */
void StartGripperTask(void *argument)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGripperTask */
  /* Infinite loop */
  for(;;)
  {
	  if(gripperFlag == 1)
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <_Z16StartGripperTaskPv+0x70>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d112      	bne.n	8001bbe <_Z16StartGripperTaskPv+0x36>
	  {
		  TIM2->CCR1 = gripperOpen;
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <_Z16StartGripperTaskPv+0x74>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ba0:	635a      	str	r2, [r3, #52]	; 0x34
		  osDelay(50);
 8001ba2:	2032      	movs	r0, #50	; 0x32
 8001ba4:	f005 f8e2 	bl	8006d6c <osDelay>
		  gripperFlag = 0;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <_Z16StartGripperTaskPv+0x70>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
  		  gripperOK = 1;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <_Z16StartGripperTaskPv+0x78>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
  		  gripState = "gripOpen";
 8001bb4:	4913      	ldr	r1, [pc, #76]	; (8001c04 <_Z16StartGripperTaskPv+0x7c>)
 8001bb6:	4814      	ldr	r0, [pc, #80]	; (8001c08 <_Z16StartGripperTaskPv+0x80>)
 8001bb8:	f007 feb3 	bl	8009922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
 8001bbc:	e016      	b.n	8001bec <_Z16StartGripperTaskPv+0x64>
	  }
	  else if (gripperFlag == 2)
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <_Z16StartGripperTaskPv+0x70>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d112      	bne.n	8001bec <_Z16StartGripperTaskPv+0x64>
	  {
		  TIM2->CCR1 = gripperClose;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <_Z16StartGripperTaskPv+0x84>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34
		  osDelay(2000);
 8001bd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bd4:	f005 f8ca 	bl	8006d6c <osDelay>
		  gripperFlag = 0;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <_Z16StartGripperTaskPv+0x70>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
  		  gripperOK = 1;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <_Z16StartGripperTaskPv+0x78>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
  		  gripState = "gripClose";
 8001be4:	490a      	ldr	r1, [pc, #40]	; (8001c10 <_Z16StartGripperTaskPv+0x88>)
 8001be6:	4808      	ldr	r0, [pc, #32]	; (8001c08 <_Z16StartGripperTaskPv+0x80>)
 8001be8:	f007 fe9b 	bl	8009922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	  }
	  jetsonResponse();
 8001bec:	f7ff fd42 	bl	8001674 <_Z14jetsonResponsev>
    osDelay(100);
 8001bf0:	2064      	movs	r0, #100	; 0x64
 8001bf2:	f005 f8bb 	bl	8006d6c <osDelay>
	  if(gripperFlag == 1)
 8001bf6:	e7cb      	b.n	8001b90 <_Z16StartGripperTaskPv+0x8>
 8001bf8:	20000210 	.word	0x20000210
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	2000021c 	.word	0x2000021c
 8001c04:	0800a044 	.word	0x0800a044
 8001c08:	20000bc8 	.word	0x20000bc8
 8001c0c:	20000004 	.word	0x20000004
 8001c10:	0800a050 	.word	0x0800a050

08001c14 <_Z12StartArtTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartArtTask */
void StartArtTask(void *argument)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartArtTask */
  /* Infinite loop */
  for(;;)
  {
	  if(artFlag == 1)
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <_Z12StartArtTaskPv+0x70>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d112      	bne.n	8001c4a <_Z12StartArtTaskPv+0x36>
	  	  {
	  		  TIM2->CCR2 = artUp;
 8001c24:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <_Z12StartArtTaskPv+0x74>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c2c:	639a      	str	r2, [r3, #56]	; 0x38
	  		  osDelay(50);
 8001c2e:	2032      	movs	r0, #50	; 0x32
 8001c30:	f005 f89c 	bl	8006d6c <osDelay>
	  		  artFlag = 0;
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <_Z12StartArtTaskPv+0x70>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
	  		  artOK = 1;
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <_Z12StartArtTaskPv+0x78>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
	  		  gripState = "artUp";
 8001c40:	4913      	ldr	r1, [pc, #76]	; (8001c90 <_Z12StartArtTaskPv+0x7c>)
 8001c42:	4814      	ldr	r0, [pc, #80]	; (8001c94 <_Z12StartArtTaskPv+0x80>)
 8001c44:	f007 fe6d 	bl	8009922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
 8001c48:	e015      	b.n	8001c76 <_Z12StartArtTaskPv+0x62>
	  	  }
	 else if (artFlag == 2)
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <_Z12StartArtTaskPv+0x70>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d111      	bne.n	8001c76 <_Z12StartArtTaskPv+0x62>
	  	  {
	  		  TIM2->CCR2 = artDown;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <_Z12StartArtTaskPv+0x84>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c5a:	639a      	str	r2, [r3, #56]	; 0x38
	  		  osDelay(50);
 8001c5c:	2032      	movs	r0, #50	; 0x32
 8001c5e:	f005 f885 	bl	8006d6c <osDelay>
	  		  artFlag = 0;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <_Z12StartArtTaskPv+0x70>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
	  		  artOK = 1;
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <_Z12StartArtTaskPv+0x78>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
	  		  gripState = "artDown";
 8001c6e:	490b      	ldr	r1, [pc, #44]	; (8001c9c <_Z12StartArtTaskPv+0x88>)
 8001c70:	4808      	ldr	r0, [pc, #32]	; (8001c94 <_Z12StartArtTaskPv+0x80>)
 8001c72:	f007 fe56 	bl	8009922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	  	  }
	  jetsonResponse();
 8001c76:	f7ff fcfd 	bl	8001674 <_Z14jetsonResponsev>
	 osDelay(100);
 8001c7a:	2064      	movs	r0, #100	; 0x64
 8001c7c:	f005 f876 	bl	8006d6c <osDelay>
	  if(artFlag == 1)
 8001c80:	e7cc      	b.n	8001c1c <_Z12StartArtTaskPv+0x8>
 8001c82:	bf00      	nop
 8001c84:	20000214 	.word	0x20000214
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000220 	.word	0x20000220
 8001c90:	0800a05c 	.word	0x0800a05c
 8001c94:	20000bc8 	.word	0x20000bc8
 8001c98:	2000000c 	.word	0x2000000c
 8001c9c:	0800a064 	.word	0x0800a064

08001ca0 <_Z18StartReceiveJetsonPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveJetson */
void StartReceiveJetson(void *argument)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveJetson */
  /* Infinite loop */
  for(;;)
  {
		 switch (request[0]){
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4835      	ldr	r0, [pc, #212]	; (8001d80 <_Z18StartReceiveJetsonPv+0xe0>)
 8001cac:	f007 fda9 	bl	8009802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b73      	cmp	r3, #115	; 0x73
 8001cb6:	d051      	beq.n	8001d5c <_Z18StartReceiveJetsonPv+0xbc>
 8001cb8:	2b73      	cmp	r3, #115	; 0x73
 8001cba:	dc53      	bgt.n	8001d64 <_Z18StartReceiveJetsonPv+0xc4>
 8001cbc:	2b61      	cmp	r3, #97	; 0x61
 8001cbe:	d027      	beq.n	8001d10 <_Z18StartReceiveJetsonPv+0x70>
 8001cc0:	2b67      	cmp	r3, #103	; 0x67
 8001cc2:	d14f      	bne.n	8001d64 <_Z18StartReceiveJetsonPv+0xc4>
		 	 case 'g':
		 		 if (request[1] == 'o')
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	482e      	ldr	r0, [pc, #184]	; (8001d80 <_Z18StartReceiveJetsonPv+0xe0>)
 8001cc8:	f007 fd9b 	bl	8009802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b6f      	cmp	r3, #111	; 0x6f
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <_Z18StartReceiveJetsonPv+0x46>
					{
						gripperFlag = 1;
 8001cde:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <_Z18StartReceiveJetsonPv+0xe4>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
					}
				 else
					{
						gripperFlag = 0;
					}
				 break;
 8001ce4:	e048      	b.n	8001d78 <_Z18StartReceiveJetsonPv+0xd8>
				 else if (request[1] == 'c')
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4825      	ldr	r0, [pc, #148]	; (8001d80 <_Z18StartReceiveJetsonPv+0xe0>)
 8001cea:	f007 fd8a 	bl	8009802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b63      	cmp	r3, #99	; 0x63
 8001cf4:	bf0c      	ite	eq
 8001cf6:	2301      	moveq	r3, #1
 8001cf8:	2300      	movne	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <_Z18StartReceiveJetsonPv+0x68>
						gripperFlag = 2;
 8001d00:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <_Z18StartReceiveJetsonPv+0xe4>)
 8001d02:	2202      	movs	r2, #2
 8001d04:	601a      	str	r2, [r3, #0]
				 break;
 8001d06:	e037      	b.n	8001d78 <_Z18StartReceiveJetsonPv+0xd8>
						gripperFlag = 0;
 8001d08:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <_Z18StartReceiveJetsonPv+0xe4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
				 break;
 8001d0e:	e033      	b.n	8001d78 <_Z18StartReceiveJetsonPv+0xd8>
			 case 'a':
				 if (request[1] == 'u')
 8001d10:	2101      	movs	r1, #1
 8001d12:	481b      	ldr	r0, [pc, #108]	; (8001d80 <_Z18StartReceiveJetsonPv+0xe0>)
 8001d14:	f007 fd75 	bl	8009802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b75      	cmp	r3, #117	; 0x75
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <_Z18StartReceiveJetsonPv+0x92>
					{
						artFlag = 1;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <_Z18StartReceiveJetsonPv+0xe8>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
					}
				 else
					{
						artFlag = 0;
					}
				 break;
 8001d30:	e022      	b.n	8001d78 <_Z18StartReceiveJetsonPv+0xd8>
				 else if (request[1] == 'd')
 8001d32:	2101      	movs	r1, #1
 8001d34:	4812      	ldr	r0, [pc, #72]	; (8001d80 <_Z18StartReceiveJetsonPv+0xe0>)
 8001d36:	f007 fd64 	bl	8009802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	bf0c      	ite	eq
 8001d42:	2301      	moveq	r3, #1
 8001d44:	2300      	movne	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <_Z18StartReceiveJetsonPv+0xb4>
						artFlag = 2;
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <_Z18StartReceiveJetsonPv+0xe8>)
 8001d4e:	2202      	movs	r2, #2
 8001d50:	601a      	str	r2, [r3, #0]
				 break;
 8001d52:	e011      	b.n	8001d78 <_Z18StartReceiveJetsonPv+0xd8>
						artFlag = 0;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <_Z18StartReceiveJetsonPv+0xe8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
				 break;
 8001d5a:	e00d      	b.n	8001d78 <_Z18StartReceiveJetsonPv+0xd8>
			 case 's':
					stopFlag = 1;
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <_Z18StartReceiveJetsonPv+0xec>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
					break;
 8001d62:	e009      	b.n	8001d78 <_Z18StartReceiveJetsonPv+0xd8>
			default:
					gripperFlag = 0;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <_Z18StartReceiveJetsonPv+0xe4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
					artFlag = 0;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <_Z18StartReceiveJetsonPv+0xe8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
					stopFlag = 0;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <_Z18StartReceiveJetsonPv+0xec>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
		            break;
 8001d76:	bf00      	nop
			  }
		    osDelay(200);
 8001d78:	20c8      	movs	r0, #200	; 0xc8
 8001d7a:	f004 fff7 	bl	8006d6c <osDelay>
		 switch (request[0]){
 8001d7e:	e793      	b.n	8001ca8 <_Z18StartReceiveJetsonPv+0x8>
 8001d80:	20000bb0 	.word	0x20000bb0
 8001d84:	20000210 	.word	0x20000210
 8001d88:	20000214 	.word	0x20000214
 8001d8c:	20000218 	.word	0x20000218

08001d90 <_Z11StartEmStopPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEmStop */
void StartEmStop(void *argument)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEmStop */
  /* Infinite loop */
  for(;;)
  {
	  if(stopFlag == 1){
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <_Z11StartEmStopPv+0x38>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d10c      	bne.n	8001dba <_Z11StartEmStopPv+0x2a>
		  gripperFlag = 0;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <_Z11StartEmStopPv+0x3c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
		  artFlag = 0;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <_Z11StartEmStopPv+0x40>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
		  stopFlag = 0;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <_Z11StartEmStopPv+0x38>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
		  gripState = "stop";
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <_Z11StartEmStopPv+0x44>)
 8001db4:	4808      	ldr	r0, [pc, #32]	; (8001dd8 <_Z11StartEmStopPv+0x48>)
 8001db6:	f007 fdb4 	bl	8009922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	  }
	  jetsonResponse();
 8001dba:	f7ff fc5b 	bl	8001674 <_Z14jetsonResponsev>
    osDelay(1);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f004 ffd4 	bl	8006d6c <osDelay>
	  if(stopFlag == 1){
 8001dc4:	e7e8      	b.n	8001d98 <_Z11StartEmStopPv+0x8>
 8001dc6:	bf00      	nop
 8001dc8:	20000218 	.word	0x20000218
 8001dcc:	20000210 	.word	0x20000210
 8001dd0:	20000214 	.word	0x20000214
 8001dd4:	0800a06c 	.word	0x0800a06c
 8001dd8:	20000bc8 	.word	0x20000bc8

08001ddc <_Z16StartCheckButtonPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCheckButton */
void StartCheckButton(void *argument)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCheckButton */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8001de4:	2104      	movs	r1, #4
 8001de6:	480c      	ldr	r0, [pc, #48]	; (8001e18 <_Z16StartCheckButtonPv+0x3c>)
 8001de8:	f002 f82a 	bl	8003e40 <HAL_GPIO_ReadPin>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bf0c      	ite	eq
 8001df2:	2301      	moveq	r3, #1
 8001df4:	2300      	movne	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <_Z16StartCheckButtonPv+0x28>
	 		  objectHeld = 0;
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <_Z16StartCheckButtonPv+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e002      	b.n	8001e0a <_Z16StartCheckButtonPv+0x2e>
	 	  }
	  else{
	 		  objectHeld = 1;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <_Z16StartCheckButtonPv+0x40>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
	 	  }
	  jetsonResponse();
 8001e0a:	f7ff fc33 	bl	8001674 <_Z14jetsonResponsev>
	  osDelay(100);
 8001e0e:	2064      	movs	r0, #100	; 0x64
 8001e10:	f004 ffac 	bl	8006d6c <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8001e14:	e7e6      	b.n	8001de4 <_Z16StartCheckButtonPv+0x8>
 8001e16:	bf00      	nop
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	20000228 	.word	0x20000228

08001e20 <_Z19StartTransmitJetsonPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmitJetson */
void StartTransmitJetson(void *argument)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitJetson */
  /* Infinite loop */
  for(;;)
  {
	  if (gripperOK == 1)
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <_Z19StartTransmitJetsonPv+0x84>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d107      	bne.n	8001e40 <_Z19StartTransmitJetsonPv+0x20>
	  {
		  okFlags[0]= gripperOK;
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <_Z19StartTransmitJetsonPv+0x84>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <_Z19StartTransmitJetsonPv+0x88>)
 8001e36:	6013      	str	r3, [r2, #0]
		  gripperOK = 0;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <_Z19StartTransmitJetsonPv+0x84>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e002      	b.n	8001e46 <_Z19StartTransmitJetsonPv+0x26>
	  }
	  else
	  {
		  okFlags[0]= 0;
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <_Z19StartTransmitJetsonPv+0x88>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
	  }
	  if (artOK == 1)
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <_Z19StartTransmitJetsonPv+0x8c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d107      	bne.n	8001e5e <_Z19StartTransmitJetsonPv+0x3e>
	  {
	  	  okFlags[1]= artOK;
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <_Z19StartTransmitJetsonPv+0x8c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <_Z19StartTransmitJetsonPv+0x88>)
 8001e54:	6053      	str	r3, [r2, #4]
	  	  artOK = 0;
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <_Z19StartTransmitJetsonPv+0x8c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e002      	b.n	8001e64 <_Z19StartTransmitJetsonPv+0x44>
	  }
	  else
	  {
		  okFlags[1]= 0;
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <_Z19StartTransmitJetsonPv+0x88>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	605a      	str	r2, [r3, #4]
	  }
	  if (objectHeld == 1)
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <_Z19StartTransmitJetsonPv+0x90>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d104      	bne.n	8001e76 <_Z19StartTransmitJetsonPv+0x56>
	  {
	  	  okFlags[2]= objectHeld;
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <_Z19StartTransmitJetsonPv+0x90>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <_Z19StartTransmitJetsonPv+0x88>)
 8001e72:	6093      	str	r3, [r2, #8]
 8001e74:	e002      	b.n	8001e7c <_Z19StartTransmitJetsonPv+0x5c>
	  }
	  else
	  {
		  okFlags[2]= 0;
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <_Z19StartTransmitJetsonPv+0x88>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
	  }
	  if (stopOK == 1)
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <_Z19StartTransmitJetsonPv+0x94>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d107      	bne.n	8001e94 <_Z19StartTransmitJetsonPv+0x74>
	  {
	  	  okFlags[3]= stopOK;
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <_Z19StartTransmitJetsonPv+0x94>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <_Z19StartTransmitJetsonPv+0x88>)
 8001e8a:	60d3      	str	r3, [r2, #12]
	  	  stopOK = 0;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <_Z19StartTransmitJetsonPv+0x94>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e002      	b.n	8001e9a <_Z19StartTransmitJetsonPv+0x7a>
	  }
	  else
	  {
	  	  okFlags[3]= 0;
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <_Z19StartTransmitJetsonPv+0x88>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
	  }
    osDelay(200);
 8001e9a:	20c8      	movs	r0, #200	; 0xc8
 8001e9c:	f004 ff66 	bl	8006d6c <osDelay>
	  if (gripperOK == 1)
 8001ea0:	e7c2      	b.n	8001e28 <_Z19StartTransmitJetsonPv+0x8>
 8001ea2:	bf00      	nop
 8001ea4:	2000021c 	.word	0x2000021c
 8001ea8:	2000022c 	.word	0x2000022c
 8001eac:	20000220 	.word	0x20000220
 8001eb0:	20000228 	.word	0x20000228
 8001eb4:	20000224 	.word	0x20000224

08001eb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eca:	f001 f931 	bl	8003130 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40000c00 	.word	0x40000c00

08001edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee0:	b672      	cpsid	i
}
 8001ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <Error_Handler+0x8>

08001ee6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d80d      	bhi.n	8001f16 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	fa22 f103 	lsr.w	r1, r2, r3
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4413      	add	r3, r2
 8001f0a:	b2ca      	uxtb	r2, r1
 8001f0c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3301      	adds	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e7ee      	b.n	8001ef4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001f22:	b480      	push	{r7}
 8001f24:	b085      	sub	sp, #20
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d811      	bhi.n	8001f60 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	440a      	add	r2, r1
 8001f46:	7812      	ldrb	r2, [r2, #0]
 8001f48:	4611      	mov	r1, r2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	00d2      	lsls	r2, r2, #3
 8001f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	e7ea      	b.n	8001f36 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	0800a25c 	.word	0x0800a25c

08001f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ffe8 	bl	8001f6c <_ZN3ros15NodeHandleBase_C1Ev>
 8001f9c:	4a3a      	ldr	r2, [pc, #232]	; (8002088 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f962 	bl	8001270 <_ZN13STM32HardwareC1Ev>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fe4c 	bl	8000c58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b18      	cmp	r3, #24
 8001fc8:	d80b      	bhi.n	8001fe2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	e7f0      	b.n	8001fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b18      	cmp	r3, #24
 8001fea:	d80a      	bhi.n	8002002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	e7f1      	b.n	8001fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800200c:	d20a      	bcs.n	8002024 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3301      	adds	r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	e7f0      	b.n	8002006 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202e:	d20a      	bcs.n	8002046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4413      	add	r3, r2
 8002036:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	3301      	adds	r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	e7f0      	b.n	8002028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	0800a218 	.word	0x0800a218

0800208c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	0800a244 	.word	0x0800a244

080020ac <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ffe5 	bl	800208c <_ZN3ros11Subscriber_C1Ev>
 80020c2:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei+0x44>)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	330c      	adds	r3, #12
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff f9fb 	bl	80014c8 <_ZN8std_msgs6StringC1Ev>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	615a      	str	r2, [r3, #20]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	609a      	str	r2, [r3, #8]
  };
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	0800a200 	.word	0x0800a200

080020f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3304      	adds	r3, #4
  }
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff f8c5 	bl	80012a8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8002146:	b480      	push	{r7}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b18      	cmp	r3, #24
 8002158:	dc1e      	bgt.n	8002198 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d111      	bne.n	8002190 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	60da      	str	r2, [r3, #12]
        return true;
 800218c:	2301      	movs	r3, #1
 800218e:	e004      	b.n	800219a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	3301      	adds	r3, #1
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	e7dd      	b.n	8002154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8002198:	2300      	movs	r3, #0
  }
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b18      	cmp	r3, #24
 80021b8:	dc19      	bgt.n	80021ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10d      	bne.n	80021e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021d2:	6839      	ldr	r1, [r7, #0]
 80021d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	605a      	str	r2, [r3, #4]
        return true;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e004      	b.n	80021f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3301      	adds	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e7e2      	b.n	80021b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 80021ee:	2300      	movs	r3, #0
  }
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff f951 	bl	80014b0 <_ZN13STM32Hardware4timeEv>
 800220e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800221e:	4293      	cmp	r3, r2
 8002220:	d903      	bls.n	800222a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002230:	2b00      	cmp	r3, #0
 8002232:	d009      	beq.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	d903      	bls.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800224e:	2b00      	cmp	r3, #0
 8002250:	d014      	beq.n	800227c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f92a 	bl	80014b0 <_ZN13STM32Hardware4timeEv>
 800225c:	4602      	mov	r2, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad2      	subs	r2, r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002268:	429a      	cmp	r2, r3
 800226a:	bf8c      	ite	hi
 800226c:	2301      	movhi	r3, #1
 800226e:	2300      	movls	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002276:	f06f 0301 	mvn.w	r3, #1
 800227a:	e194      	b.n	80025a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3304      	adds	r3, #4
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f82d 	bl	80012e0 <_ZN13STM32Hardware4readEv>
 8002286:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f2c0 8174 	blt.w	8002578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	441a      	add	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80022a6:	2b07      	cmp	r3, #7
 80022a8:	d11e      	bne.n	80022e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80022b0:	1c59      	adds	r1, r3, #1
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	b2d1      	uxtb	r1, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	460a      	mov	r2, r1
 80022c2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1b4      	bne.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2208      	movs	r2, #8
 80022e2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80022e6:	e7af      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d128      	bne.n	8002344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2bff      	cmp	r3, #255	; 0xff
 80022f6:	d10d      	bne.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f103 0214 	add.w	r2, r3, #20
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002312:	e799      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3304      	adds	r3, #4
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff f8c9 	bl	80014b0 <_ZN13STM32Hardware4timeEv>
 800231e:	4602      	mov	r2, r0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	; 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	bf8c      	ite	hi
 800232c:	2301      	movhi	r3, #1
 800232e:	2300      	movls	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d088      	beq.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800233e:	f06f 0301 	mvn.w	r3, #1
 8002342:	e130      	b.n	80025a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800234a:	2b01      	cmp	r3, #1
 800234c:	d118      	bne.n	8002380 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2bfe      	cmp	r3, #254	; 0xfe
 8002352:	d107      	bne.n	8002364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002362:	e771      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002372:	2b00      	cmp	r3, #0
 8002374:	f47f af68 	bne.w	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f918 	bl	80025ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800237e:	e763      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002386:	2b02      	cmp	r3, #2
 8002388:	d113      	bne.n	80023b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80023b0:	e74a      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d110      	bne.n	80023de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	441a      	add	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80023dc:	e734      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d116      	bne.n	8002416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80023ee:	425a      	negs	r2, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	bf58      	it	pl
 80023f6:	4253      	negpl	r3, r2
 80023f8:	2bff      	cmp	r3, #255	; 0xff
 80023fa:	d107      	bne.n	800240c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800240a:	e71d      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002414:	e718      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800241c:	2b05      	cmp	r3, #5
 800241e:	d10f      	bne.n	8002440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800243e:	e703      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002446:	2b06      	cmp	r3, #6
 8002448:	d117      	bne.n	800247a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	441a      	add	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2207      	movs	r2, #7
 8002460:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800246a:	2b00      	cmp	r3, #0
 800246c:	f47f aeec 	bne.w	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2208      	movs	r2, #8
 8002474:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002478:	e6e6      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002480:	2b08      	cmp	r3, #8
 8002482:	f47f aee1 	bne.w	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002494:	425a      	negs	r2, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	bf58      	it	pl
 800249c:	4253      	negpl	r3, r2
 800249e:	2bff      	cmp	r3, #255	; 0xff
 80024a0:	f47f aed2 	bne.w	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d110      	bne.n	80024d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f87d 	bl	80025ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f898 	bl	80025ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295
 80024ce:	e06a      	b.n	80025a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80024d6:	2b0a      	cmp	r3, #10
 80024d8:	d107      	bne.n	80024ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f960 	bl	80027a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80024e8:	e6ae      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80024f0:	2b06      	cmp	r3, #6
 80024f2:	d10e      	bne.n	8002512 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f7fe fcdd 	bl	8000ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002510:	e69a      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002518:	2b0b      	cmp	r3, #11
 800251a:	d104      	bne.n	8002526 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002524:	e690      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800252c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f43f ae84 	beq.w	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002546:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002550:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800255a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002572:	4611      	mov	r1, r2
 8002574:	4798      	blx	r3
    while (true)
 8002576:	e667      	b.n	8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002578:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00f      	beq.n	80025a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002592:	4293      	cmp	r3, r2
 8002594:	d906      	bls.n	80025a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f809 	bl	80025ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80025a4:	2300      	movs	r3, #0
  }
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80025b6:	f107 030c 	add.w	r3, r7, #12
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd ffe8 	bl	8000590 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f107 020c 	add.w	r2, r7, #12
 80025ca:	210a      	movs	r1, #10
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
    rt_time = hardware_.time();
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe ff6b 	bl	80014b0 <_ZN13STM32Hardware4timeEv>
 80025da:	4602      	mov	r2, r0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80025ea:	b590      	push	{r4, r7, lr}
 80025ec:	b08b      	sub	sp, #44	; 0x2c
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe f8ba 	bl	8000770 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	2b18      	cmp	r3, #24
 8002604:	dc63      	bgt.n	80026ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d056      	beq.n	80026c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	b29b      	uxth	r3, r3
 800262a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3308      	adds	r3, #8
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4608      	mov	r0, r1
 8002666:	4798      	blx	r3
 8002668:	4603      	mov	r3, r0
 800266a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	330c      	adds	r3, #12
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4608      	mov	r0, r1
 8002694:	4798      	blx	r3
 8002696:	4603      	mov	r3, r0
 8002698:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800269a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800269e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681c      	ldr	r4, [r3, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fdbc 	bl	8001232 <_ZN3ros9Publisher15getEndpointTypeEv>
 80026ba:	4601      	mov	r1, r0
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	461a      	mov	r2, r3
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	3301      	adds	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
 80026cc:	e798      	b.n	8002600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	2b18      	cmp	r3, #24
 80026d6:	dc5f      	bgt.n	8002798 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026dc:	f202 2222 	addw	r2, r2, #546	; 0x222
 80026e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d053      	beq.n	8002790 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ec:	f202 2222 	addw	r2, r2, #546	; 0x222
 80026f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002712:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800271e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3308      	adds	r3, #8
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4608      	mov	r0, r1
 800272a:	4798      	blx	r3
 800272c:	4603      	mov	r3, r0
 800272e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002740:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	330c      	adds	r3, #12
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4608      	mov	r0, r1
 8002750:	4798      	blx	r3
 8002752:	4603      	mov	r3, r0
 8002754:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800275a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681c      	ldr	r4, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002766:	f202 2222 	addw	r2, r2, #546	; 0x222
 800276a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3304      	adds	r3, #4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4608      	mov	r0, r1
 8002782:	4798      	blx	r3
 8002784:	4601      	mov	r1, r0
 8002786:	f107 030c 	add.w	r3, r7, #12
 800278a:	461a      	mov	r2, r3
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	3301      	adds	r3, #1
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
 8002796:	e79c      	b.n	80026d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80027a0:	bf00      	nop
 80027a2:	372c      	adds	r7, #44	; 0x2c
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}

080027a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd feea 	bl	8000590 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fe75 	bl	80014b0 <_ZN13STM32Hardware4timeEv>
 80027c6:	4602      	mov	r2, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80027d2:	f107 0308 	add.w	r3, r7, #8
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd ff49 	bl	8000670 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	4915      	ldr	r1, [pc, #84]	; (8002838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80027e4:	fba1 1303 	umull	r1, r3, r1, r3
 80027e8:	099b      	lsrs	r3, r3, #6
 80027ea:	4413      	add	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80027ee:	6939      	ldr	r1, [r7, #16]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4b11      	ldr	r3, [pc, #68]	; (8002838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80027f4:	fba3 0302 	umull	r0, r3, r3, r2
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027fe:	fb00 f303 	mul.w	r3, r0, r3
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	440b      	add	r3, r1
 800280c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800280e:	f107 0308 	add.w	r3, r7, #8
 8002812:	3304      	adds	r3, #4
 8002814:	4619      	mov	r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8a6 	bl	8002968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3304      	adds	r3, #4
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fe45 	bl	80014b0 <_ZN13STM32Hardware4timeEv>
 8002826:	4602      	mov	r2, r0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	10624dd3 	.word	0x10624dd3
 800283c:	000f4240 	.word	0x000f4240

08002840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b63      	cmp	r3, #99	; 0x63
 8002850:	dd09      	ble.n	8002866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002858:	f083 0301 	eor.w	r3, r3, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002862:	2300      	movs	r3, #0
 8002864:	e079      	b.n	800295a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002872:	3207      	adds	r2, #7
 8002874:	4611      	mov	r1, r2
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
 800287a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	22ff      	movs	r2, #255	; 0xff
 8002880:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	22fe      	movs	r2, #254	; 0xfe
 8002888:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	b29b      	uxth	r3, r3
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	b29b      	uxth	r3, r3
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80028b2:	4413      	add	r3, r2
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	b21b      	sxth	r3, r3
 80028ce:	121b      	asrs	r3, r3, #8
 80028d0:	b21b      	sxth	r3, r3
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80028de:	2305      	movs	r3, #5
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3306      	adds	r3, #6
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	dc0d      	bgt.n	8002908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4413      	add	r3, r2
 80028f2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	4413      	add	r3, r2
 80028fe:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	3301      	adds	r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	e7ec      	b.n	80028e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3307      	adds	r3, #7
 800290c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	425a      	negs	r2, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	bf58      	it	pl
 8002918:	4253      	negpl	r3, r2
 800291a:	b2da      	uxtb	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	1c59      	adds	r1, r3, #1
 8002920:	6179      	str	r1, [r7, #20]
 8002922:	43d2      	mvns	r2, r2
 8002924:	b2d1      	uxtb	r1, r2
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4413      	add	r3, r2
 800292a:	460a      	mov	r2, r1
 800292c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002936:	dc0a      	bgt.n	800294e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1d18      	adds	r0, r3, #4
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4619      	mov	r1, r3
 8002946:	f7fe fd6d 	bl	8001424 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	e005      	b.n	800295a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800294e:	4905      	ldr	r1, [pc, #20]	; (8002964 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f849 	bl	80029e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	0800a074 	.word	0x0800a074

08002968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3304      	adds	r3, #4
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fd9a 	bl	80014b0 <_ZN13STM32Hardware4timeEv>
 800297c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4915      	ldr	r1, [pc, #84]	; (80029dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002986:	fba1 1303 	umull	r1, r3, r1, r3
 800298a:	099b      	lsrs	r3, r3, #6
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	1e5a      	subs	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800299e:	fba3 0302 	umull	r0, r3, r3, r2
 80029a2:	099b      	lsrs	r3, r3, #6
 80029a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a8:	fb00 f303 	mul.w	r3, r0, r3
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80029b0:	fb02 f303 	mul.w	r3, r2, r3
 80029b4:	1aca      	subs	r2, r1, r3
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80029b8:	4413      	add	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80029cc:	4619      	mov	r1, r3
 80029ce:	4610      	mov	r0, r2
 80029d0:	f7fd fd90 	bl	80004f4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	10624dd3 	.word	0x10624dd3
 80029e0:	000f4240 	.word	0x000f4240
 80029e4:	3b9aca00 	.word	0x3b9aca00

080029e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	2103      	movs	r1, #3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f804 	bl	8002a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f86e 	bl	8000af8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002a1c:	7afb      	ldrb	r3, [r7, #11]
 8002a1e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f107 0214 	add.w	r2, r7, #20
 8002a2e:	2107      	movs	r1, #7
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	4798      	blx	r3
  }
 8002a34:	bf00      	nop
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d138      	bne.n	8002abe <_Z41__static_initialization_and_destruction_0ii+0x82>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d133      	bne.n	8002abe <_Z41__static_initialization_and_destruction_0ii+0x82>
ros::NodeHandle nh;
 8002a56:	4823      	ldr	r0, [pc, #140]	; (8002ae4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8002a58:	f7ff fa98 	bl	8001f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002a5c:	4822      	ldr	r0, [pc, #136]	; (8002ae8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002a5e:	f7fe fd33 	bl	80014c8 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002a62:	2300      	movs	r3, #0
 8002a64:	4a20      	ldr	r2, [pc, #128]	; (8002ae8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002a66:	4921      	ldr	r1, [pc, #132]	; (8002aec <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002a68:	4821      	ldr	r0, [pc, #132]	; (8002af0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002a6a:	f7fe fbb7 	bl	80011dc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::String> stm32_comms("gripper_action", &req);
 8002a6e:	2301      	movs	r3, #1
 8002a70:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002a72:	4921      	ldr	r1, [pc, #132]	; (8002af8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002a74:	4821      	ldr	r0, [pc, #132]	; (8002afc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002a76:	f7ff fb19 	bl	80020ac <_ZN3ros10SubscriberIN8std_msgs6StringEvEC1EPKcPFvRKS2_Ei>
std::string request="";
 8002a7a:	f107 0308 	add.w	r3, r7, #8
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f006 fe17 	bl	80096b2 <_ZNSaIcEC1Ev>
 8002a84:	f107 0308 	add.w	r3, r7, #8
 8002a88:	461a      	mov	r2, r3
 8002a8a:	491d      	ldr	r1, [pc, #116]	; (8002b00 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002a8c:	481d      	ldr	r0, [pc, #116]	; (8002b04 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8002a8e:	f006 ff73 	bl	8009978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	4618      	mov	r0, r3
 8002a98:	f006 fe0c 	bl	80096b4 <_ZNSaIcED1Ev>
std::string gripState="";
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f006 fe06 	bl	80096b2 <_ZNSaIcEC1Ev>
 8002aa6:	f107 030c 	add.w	r3, r7, #12
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4914      	ldr	r1, [pc, #80]	; (8002b00 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002aae:	4816      	ldr	r0, [pc, #88]	; (8002b08 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002ab0:	f006 ff62 	bl	8009978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002ab4:	f107 030c 	add.w	r3, r7, #12
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f006 fdfb 	bl	80096b4 <_ZNSaIcED1Ev>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <_Z41__static_initialization_and_destruction_0ii+0x9e>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d105      	bne.n	8002ada <_Z41__static_initialization_and_destruction_0ii+0x9e>
 8002ace:	480e      	ldr	r0, [pc, #56]	; (8002b08 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002ad0:	f006 fe91 	bl	80097f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
std::string request="";
 8002ad4:	480b      	ldr	r0, [pc, #44]	; (8002b04 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8002ad6:	f006 fe8e 	bl	80097f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2000023c 	.word	0x2000023c
 8002ae8:	20000b78 	.word	0x20000b78
 8002aec:	0800a0b0 	.word	0x0800a0b0
 8002af0:	20000b80 	.word	0x20000b80
 8002af4:	080016bd 	.word	0x080016bd
 8002af8:	0800a0b8 	.word	0x0800a0b8
 8002afc:	20000b94 	.word	0x20000b94
 8002b00:	08009f18 	.word	0x08009f18
 8002b04:	20000bb0 	.word	0x20000bb0
 8002b08:	20000bc8 	.word	0x20000bc8

08002b0c <_ZN3ros10SubscriberIN8std_msgs6StringEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	6839      	ldr	r1, [r7, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe fd14 	bl	800154a <_ZN8std_msgs6String11deserializeEPh>
    this->cb_(msg);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	320c      	adds	r2, #12
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4798      	blx	r3
  }
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <_ZN3ros10SubscriberIN8std_msgs6StringEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
  }
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <_ZN3ros10SubscriberIN8std_msgs6StringEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	330c      	adds	r3, #12
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fd34 	bl	80015c8 <_ZN8std_msgs6String7getTypeEv>
 8002b60:	4603      	mov	r3, r0
  }
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_ZN3ros10SubscriberIN8std_msgs6StringEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	330c      	adds	r3, #12
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fd34 	bl	80015e4 <_ZN8std_msgs6String6getMD5Ev>
 8002b7c:	4603      	mov	r3, r0
  }
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
    return configured_;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_GLOBAL__sub_I_htim2>:
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ba8:	2001      	movs	r0, #1
 8002baa:	f7ff ff47 	bl	8002a3c <_Z41__static_initialization_and_destruction_0ii>
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_GLOBAL__sub_D_htim2>:
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7ff ff3f 	bl	8002a3c <_Z41__static_initialization_and_destruction_0ii>
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_MspInit+0x54>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <HAL_MspInit+0x54>)
 8002bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_MspInit+0x54>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_MspInit+0x54>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <HAL_MspInit+0x54>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_MspInit+0x54>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	210f      	movs	r1, #15
 8002c02:	f06f 0001 	mvn.w	r0, #1
 8002c06:	f000 fb6b 	bl	80032e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800

08002c18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c28:	d115      	bne.n	8002c56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_TIM_Base_MspInit+0x48>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4a0b      	ldr	r2, [pc, #44]	; (8002c60 <HAL_TIM_Base_MspInit+0x48>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_TIM_Base_MspInit+0x48>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2105      	movs	r1, #5
 8002c4a:	201c      	movs	r0, #28
 8002c4c:	f000 fb48 	bl	80032e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c50:	201c      	movs	r0, #28
 8002c52:	f000 fb61 	bl	8003318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800

08002c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d11d      	bne.n	8002cc2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_TIM_MspPostInit+0x68>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <HAL_TIM_MspPostInit+0x68>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_TIM_MspPostInit+0x68>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb6:	f107 030c 	add.w	r3, r7, #12
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4804      	ldr	r0, [pc, #16]	; (8002cd0 <HAL_TIM_MspPostInit+0x6c>)
 8002cbe:	f000 ff3b 	bl	8003b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002cc2:	bf00      	nop
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40020000 	.word	0x40020000

08002cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a4b      	ldr	r2, [pc, #300]	; (8002e20 <HAL_UART_MspInit+0x14c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	f040 8090 	bne.w	8002e18 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <HAL_UART_MspInit+0x150>)
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	4a48      	ldr	r2, [pc, #288]	; (8002e24 <HAL_UART_MspInit+0x150>)
 8002d02:	f043 0310 	orr.w	r3, r3, #16
 8002d06:	6453      	str	r3, [r2, #68]	; 0x44
 8002d08:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <HAL_UART_MspInit+0x150>)
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	4b42      	ldr	r3, [pc, #264]	; (8002e24 <HAL_UART_MspInit+0x150>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	4a41      	ldr	r2, [pc, #260]	; (8002e24 <HAL_UART_MspInit+0x150>)
 8002d1e:	f043 0302 	orr.w	r3, r3, #2
 8002d22:	6313      	str	r3, [r2, #48]	; 0x30
 8002d24:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <HAL_UART_MspInit+0x150>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d30:	23c0      	movs	r3, #192	; 0xc0
 8002d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d40:	2307      	movs	r3, #7
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4837      	ldr	r0, [pc, #220]	; (8002e28 <HAL_UART_MspInit+0x154>)
 8002d4c:	f000 fef4 	bl	8003b38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002d50:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <HAL_UART_MspInit+0x158>)
 8002d52:	4a37      	ldr	r2, [pc, #220]	; (8002e30 <HAL_UART_MspInit+0x15c>)
 8002d54:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002d56:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <HAL_UART_MspInit+0x158>)
 8002d58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d5c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d5e:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <HAL_UART_MspInit+0x158>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d64:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <HAL_UART_MspInit+0x158>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d6a:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <HAL_UART_MspInit+0x158>)
 8002d6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d70:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d72:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <HAL_UART_MspInit+0x158>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d78:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HAL_UART_MspInit+0x158>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_UART_MspInit+0x158>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d84:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <HAL_UART_MspInit+0x158>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_UART_MspInit+0x158>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d90:	4826      	ldr	r0, [pc, #152]	; (8002e2c <HAL_UART_MspInit+0x158>)
 8002d92:	f000 facf 	bl	8003334 <HAL_DMA_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002d9c:	f7ff f89e 	bl	8001edc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_UART_MspInit+0x158>)
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
 8002da6:	4a21      	ldr	r2, [pc, #132]	; (8002e2c <HAL_UART_MspInit+0x158>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002dac:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <HAL_UART_MspInit+0x160>)
 8002dae:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <HAL_UART_MspInit+0x164>)
 8002db0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_UART_MspInit+0x160>)
 8002db4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002db8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <HAL_UART_MspInit+0x160>)
 8002dbc:	2240      	movs	r2, #64	; 0x40
 8002dbe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <HAL_UART_MspInit+0x160>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <HAL_UART_MspInit+0x160>)
 8002dc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dcc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_UART_MspInit+0x160>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <HAL_UART_MspInit+0x160>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_UART_MspInit+0x160>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002de0:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <HAL_UART_MspInit+0x160>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_UART_MspInit+0x160>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002dec:	4811      	ldr	r0, [pc, #68]	; (8002e34 <HAL_UART_MspInit+0x160>)
 8002dee:	f000 faa1 	bl	8003334 <HAL_DMA_Init>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002df8:	f7ff f870 	bl	8001edc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <HAL_UART_MspInit+0x160>)
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34
 8002e02:	4a0c      	ldr	r2, [pc, #48]	; (8002e34 <HAL_UART_MspInit+0x160>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2105      	movs	r1, #5
 8002e0c:	2025      	movs	r0, #37	; 0x25
 8002e0e:	f000 fa67 	bl	80032e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e12:	2025      	movs	r0, #37	; 0x25
 8002e14:	f000 fa80 	bl	8003318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e18:	bf00      	nop
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40011000 	.word	0x40011000
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40020400 	.word	0x40020400
 8002e2c:	20000134 	.word	0x20000134
 8002e30:	40026440 	.word	0x40026440
 8002e34:	20000194 	.word	0x20000194
 8002e38:	400264b8 	.word	0x400264b8

08002e3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08e      	sub	sp, #56	; 0x38
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	4b33      	ldr	r3, [pc, #204]	; (8002f20 <HAL_InitTick+0xe4>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	4a32      	ldr	r2, [pc, #200]	; (8002f20 <HAL_InitTick+0xe4>)
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5c:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_InitTick+0xe4>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e68:	f107 0210 	add.w	r2, r7, #16
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 fc88 	bl	8004788 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e82:	f001 fc59 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 8002e86:	6378      	str	r0, [r7, #52]	; 0x34
 8002e88:	e004      	b.n	8002e94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e8a:	f001 fc55 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e96:	4a23      	ldr	r2, [pc, #140]	; (8002f24 <HAL_InitTick+0xe8>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	0c9b      	lsrs	r3, r3, #18
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002ea2:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <HAL_InitTick+0xec>)
 8002ea4:	4a21      	ldr	r2, [pc, #132]	; (8002f2c <HAL_InitTick+0xf0>)
 8002ea6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <HAL_InitTick+0xec>)
 8002eaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002eae:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_InitTick+0xec>)
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <HAL_InitTick+0xec>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <HAL_InitTick+0xec>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec2:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_InitTick+0xec>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002ec8:	4817      	ldr	r0, [pc, #92]	; (8002f28 <HAL_InitTick+0xec>)
 8002eca:	f001 fc8f 	bl	80047ec <HAL_TIM_Base_Init>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d11b      	bne.n	8002f14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002edc:	4812      	ldr	r0, [pc, #72]	; (8002f28 <HAL_InitTick+0xec>)
 8002ede:	f001 fcd5 	bl	800488c <HAL_TIM_Base_Start_IT>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d111      	bne.n	8002f14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ef0:	2032      	movs	r0, #50	; 0x32
 8002ef2:	f000 fa11 	bl	8003318 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b0f      	cmp	r3, #15
 8002efa:	d808      	bhi.n	8002f0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002efc:	2200      	movs	r2, #0
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	2032      	movs	r0, #50	; 0x32
 8002f02:	f000 f9ed 	bl	80032e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <HAL_InitTick+0xf4>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e002      	b.n	8002f14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002f14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3738      	adds	r7, #56	; 0x38
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	431bde83 	.word	0x431bde83
 8002f28:	20000be0 	.word	0x20000be0
 8002f2c:	40000c00 	.word	0x40000c00
 8002f30:	20000014 	.word	0x20000014

08002f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f38:	e7fe      	b.n	8002f38 <NMI_Handler+0x4>

08002f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f3e:	e7fe      	b.n	8002f3e <HardFault_Handler+0x4>

08002f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f44:	e7fe      	b.n	8002f44 <MemManage_Handler+0x4>

08002f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f4a:	e7fe      	b.n	8002f4a <BusFault_Handler+0x4>

08002f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f50:	e7fe      	b.n	8002f50 <UsageFault_Handler+0x4>

08002f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <TIM2_IRQHandler+0x10>)
 8002f66:	f001 fdfd 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200000a8 	.word	0x200000a8

08002f74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f78:	4802      	ldr	r0, [pc, #8]	; (8002f84 <USART1_IRQHandler+0x10>)
 8002f7a:	f002 fcf7 	bl	800596c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	200000f0 	.word	0x200000f0

08002f88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f8c:	4802      	ldr	r0, [pc, #8]	; (8002f98 <TIM5_IRQHandler+0x10>)
 8002f8e:	f001 fde9 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000be0 	.word	0x20000be0

08002f9c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002fa0:	4802      	ldr	r0, [pc, #8]	; (8002fac <DMA2_Stream2_IRQHandler+0x10>)
 8002fa2:	f000 fb5f 	bl	8003664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000134 	.word	0x20000134

08002fb0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002fb4:	4802      	ldr	r0, [pc, #8]	; (8002fc0 <DMA2_Stream7_IRQHandler+0x10>)
 8002fb6:	f000 fb55 	bl	8003664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000194 	.word	0x20000194

08002fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return 1;
 8002fc8:	2301      	movs	r3, #1
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <_kill>:

int _kill(int pid, int sig)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fde:	f006 fd1f 	bl	8009a20 <__errno>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2216      	movs	r2, #22
 8002fe6:	601a      	str	r2, [r3, #0]
  return -1;
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <_exit>:

void _exit (int status)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ffe7 	bl	8002fd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003006:	e7fe      	b.n	8003006 <_exit+0x12>

08003008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003010:	4a14      	ldr	r2, [pc, #80]	; (8003064 <_sbrk+0x5c>)
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <_sbrk+0x60>)
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800301c:	4b13      	ldr	r3, [pc, #76]	; (800306c <_sbrk+0x64>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <_sbrk+0x64>)
 8003026:	4a12      	ldr	r2, [pc, #72]	; (8003070 <_sbrk+0x68>)
 8003028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <_sbrk+0x64>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	429a      	cmp	r2, r3
 8003036:	d207      	bcs.n	8003048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003038:	f006 fcf2 	bl	8009a20 <__errno>
 800303c:	4603      	mov	r3, r0
 800303e:	220c      	movs	r2, #12
 8003040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003042:	f04f 33ff 	mov.w	r3, #4294967295
 8003046:	e009      	b.n	800305c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <_sbrk+0x64>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800304e:	4b07      	ldr	r3, [pc, #28]	; (800306c <_sbrk+0x64>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	4a05      	ldr	r2, [pc, #20]	; (800306c <_sbrk+0x64>)
 8003058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800305a:	68fb      	ldr	r3, [r7, #12]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20010000 	.word	0x20010000
 8003068:	00000400 	.word	0x00000400
 800306c:	20000c28 	.word	0x20000c28
 8003070:	20005658 	.word	0x20005658

08003074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <SystemInit+0x20>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	4a05      	ldr	r2, [pc, #20]	; (8003094 <SystemInit+0x20>)
 8003080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800309c:	480d      	ldr	r0, [pc, #52]	; (80030d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800309e:	490e      	ldr	r1, [pc, #56]	; (80030d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030a0:	4a0e      	ldr	r2, [pc, #56]	; (80030dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030a4:	e002      	b.n	80030ac <LoopCopyDataInit>

080030a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030aa:	3304      	adds	r3, #4

080030ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030b0:	d3f9      	bcc.n	80030a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030b2:	4a0b      	ldr	r2, [pc, #44]	; (80030e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030b4:	4c0b      	ldr	r4, [pc, #44]	; (80030e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030b8:	e001      	b.n	80030be <LoopFillZerobss>

080030ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030bc:	3204      	adds	r2, #4

080030be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030c0:	d3fb      	bcc.n	80030ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030c2:	f7ff ffd7 	bl	8003074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030c6:	f006 fcb1 	bl	8009a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ca:	f7fe fb07 	bl	80016dc <main>
  bx  lr    
 80030ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80030d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030d8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80030dc:	0800a3d4 	.word	0x0800a3d4
  ldr r2, =_sbss
 80030e0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80030e4:	20005654 	.word	0x20005654

080030e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030e8:	e7fe      	b.n	80030e8 <ADC_IRQHandler>
	...

080030ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030f0:	4b0e      	ldr	r3, [pc, #56]	; (800312c <HAL_Init+0x40>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0d      	ldr	r2, [pc, #52]	; (800312c <HAL_Init+0x40>)
 80030f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_Init+0x40>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a0a      	ldr	r2, [pc, #40]	; (800312c <HAL_Init+0x40>)
 8003102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003108:	4b08      	ldr	r3, [pc, #32]	; (800312c <HAL_Init+0x40>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a07      	ldr	r2, [pc, #28]	; (800312c <HAL_Init+0x40>)
 800310e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003114:	2003      	movs	r0, #3
 8003116:	f000 f8d8 	bl	80032ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800311a:	200f      	movs	r0, #15
 800311c:	f7ff fe8e 	bl	8002e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003120:	f7ff fd4e 	bl	8002bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40023c00 	.word	0x40023c00

08003130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_IncTick+0x20>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_IncTick+0x24>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4413      	add	r3, r2
 8003140:	4a04      	ldr	r2, [pc, #16]	; (8003154 <HAL_IncTick+0x24>)
 8003142:	6013      	str	r3, [r2, #0]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000018 	.word	0x20000018
 8003154:	20000c2c 	.word	0x20000c2c

08003158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return uwTick;
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <HAL_GetTick+0x14>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000c2c 	.word	0x20000c2c

08003170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800318c:	4013      	ands	r3, r2
 800318e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800319c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031a2:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <__NVIC_SetPriorityGrouping+0x44>)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	60d3      	str	r3, [r2, #12]
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031bc:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <__NVIC_GetPriorityGrouping+0x18>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	f003 0307 	and.w	r3, r3, #7
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	db0b      	blt.n	80031fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	f003 021f 	and.w	r2, r3, #31
 80031ec:	4907      	ldr	r1, [pc, #28]	; (800320c <__NVIC_EnableIRQ+0x38>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2001      	movs	r0, #1
 80031f6:	fa00 f202 	lsl.w	r2, r0, r2
 80031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	e000e100 	.word	0xe000e100

08003210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	2b00      	cmp	r3, #0
 8003222:	db0a      	blt.n	800323a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	b2da      	uxtb	r2, r3
 8003228:	490c      	ldr	r1, [pc, #48]	; (800325c <__NVIC_SetPriority+0x4c>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	0112      	lsls	r2, r2, #4
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	440b      	add	r3, r1
 8003234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003238:	e00a      	b.n	8003250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4908      	ldr	r1, [pc, #32]	; (8003260 <__NVIC_SetPriority+0x50>)
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	3b04      	subs	r3, #4
 8003248:	0112      	lsls	r2, r2, #4
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	440b      	add	r3, r1
 800324e:	761a      	strb	r2, [r3, #24]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000e100 	.word	0xe000e100
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	; 0x24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f1c3 0307 	rsb	r3, r3, #7
 800327e:	2b04      	cmp	r3, #4
 8003280:	bf28      	it	cs
 8003282:	2304      	movcs	r3, #4
 8003284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3304      	adds	r3, #4
 800328a:	2b06      	cmp	r3, #6
 800328c:	d902      	bls.n	8003294 <NVIC_EncodePriority+0x30>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3b03      	subs	r3, #3
 8003292:	e000      	b.n	8003296 <NVIC_EncodePriority+0x32>
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003298:	f04f 32ff 	mov.w	r2, #4294967295
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43da      	mvns	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	401a      	ands	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ac:	f04f 31ff 	mov.w	r1, #4294967295
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	43d9      	mvns	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032bc:	4313      	orrs	r3, r2
         );
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3724      	adds	r7, #36	; 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ff4c 	bl	8003170 <__NVIC_SetPriorityGrouping>
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032f2:	f7ff ff61 	bl	80031b8 <__NVIC_GetPriorityGrouping>
 80032f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	6978      	ldr	r0, [r7, #20]
 80032fe:	f7ff ffb1 	bl	8003264 <NVIC_EncodePriority>
 8003302:	4602      	mov	r2, r0
 8003304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff ff80 	bl	8003210 <__NVIC_SetPriority>
}
 8003310:	bf00      	nop
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff ff54 	bl	80031d4 <__NVIC_EnableIRQ>
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003340:	f7ff ff0a 	bl	8003158 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e099      	b.n	8003484 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003370:	e00f      	b.n	8003392 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003372:	f7ff fef1 	bl	8003158 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b05      	cmp	r3, #5
 800337e:	d908      	bls.n	8003392 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2203      	movs	r2, #3
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e078      	b.n	8003484 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e8      	bne.n	8003372 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4b38      	ldr	r3, [pc, #224]	; (800348c <HAL_DMA_Init+0x158>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d107      	bne.n	80033fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	4313      	orrs	r3, r2
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0307 	bic.w	r3, r3, #7
 8003412:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2b04      	cmp	r3, #4
 8003424:	d117      	bne.n	8003456 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00e      	beq.n	8003456 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fb01 	bl	8003a40 <DMA_CheckFifoParam>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2240      	movs	r2, #64	; 0x40
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003452:	2301      	movs	r3, #1
 8003454:	e016      	b.n	8003484 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fab8 	bl	80039d4 <DMA_CalcBaseAndBitshift>
 8003464:	4603      	mov	r3, r0
 8003466:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	223f      	movs	r2, #63	; 0x3f
 800346e:	409a      	lsls	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	f010803f 	.word	0xf010803f

08003490 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_DMA_Start_IT+0x26>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e040      	b.n	8003538 <HAL_DMA_Start_IT+0xa8>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d12f      	bne.n	800352a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2202      	movs	r2, #2
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 fa4a 	bl	8003978 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	223f      	movs	r2, #63	; 0x3f
 80034ea:	409a      	lsls	r2, r3
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0216 	orr.w	r2, r2, #22
 80034fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0208 	orr.w	r2, r2, #8
 8003516:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e005      	b.n	8003536 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003532:	2302      	movs	r3, #2
 8003534:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003536:	7dfb      	ldrb	r3, [r7, #23]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800354e:	f7ff fe03 	bl	8003158 <HAL_GetTick>
 8003552:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d008      	beq.n	8003572 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e052      	b.n	8003618 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0216 	bic.w	r2, r2, #22
 8003580:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003590:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d103      	bne.n	80035a2 <HAL_DMA_Abort+0x62>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0208 	bic.w	r2, r2, #8
 80035b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c2:	e013      	b.n	80035ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035c4:	f7ff fdc8 	bl	8003158 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d90c      	bls.n	80035ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2220      	movs	r2, #32
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2203      	movs	r2, #3
 80035dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e015      	b.n	8003618 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e4      	bne.n	80035c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	223f      	movs	r2, #63	; 0x3f
 8003600:	409a      	lsls	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d004      	beq.n	800363e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2280      	movs	r2, #128	; 0x80
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e00c      	b.n	8003658 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2205      	movs	r2, #5
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003670:	4b8e      	ldr	r3, [pc, #568]	; (80038ac <HAL_DMA_IRQHandler+0x248>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a8e      	ldr	r2, [pc, #568]	; (80038b0 <HAL_DMA_IRQHandler+0x24c>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	0a9b      	lsrs	r3, r3, #10
 800367c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	2208      	movs	r2, #8
 8003690:	409a      	lsls	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01a      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d013      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0204 	bic.w	r2, r2, #4
 80036b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	2208      	movs	r2, #8
 80036be:	409a      	lsls	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	f043 0201 	orr.w	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	2201      	movs	r2, #1
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d012      	beq.n	8003706 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	2201      	movs	r2, #1
 80036f4:	409a      	lsls	r2, r3
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	f043 0202 	orr.w	r2, r3, #2
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370a:	2204      	movs	r2, #4
 800370c:	409a      	lsls	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d012      	beq.n	800373c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	2204      	movs	r2, #4
 800372a:	409a      	lsls	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	f043 0204 	orr.w	r2, r3, #4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003740:	2210      	movs	r2, #16
 8003742:	409a      	lsls	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d043      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d03c      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375e:	2210      	movs	r2, #16
 8003760:	409a      	lsls	r2, r3
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d018      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d108      	bne.n	8003794 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d024      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
 8003792:	e01f      	b.n	80037d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01b      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
 80037a4:	e016      	b.n	80037d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d107      	bne.n	80037c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0208 	bic.w	r2, r2, #8
 80037c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	2220      	movs	r2, #32
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 808f 	beq.w	8003904 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8087 	beq.w	8003904 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fa:	2220      	movs	r2, #32
 80037fc:	409a      	lsls	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b05      	cmp	r3, #5
 800380c:	d136      	bne.n	800387c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0216 	bic.w	r2, r2, #22
 800381c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800382c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <HAL_DMA_IRQHandler+0x1da>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0208 	bic.w	r2, r2, #8
 800384c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	223f      	movs	r2, #63	; 0x3f
 8003854:	409a      	lsls	r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800386e:	2b00      	cmp	r3, #0
 8003870:	d07e      	beq.n	8003970 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
        }
        return;
 800387a:	e079      	b.n	8003970 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01d      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10d      	bne.n	80038b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	2b00      	cmp	r3, #0
 800389e:	d031      	beq.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
 80038a8:	e02c      	b.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
 80038aa:	bf00      	nop
 80038ac:	20000010 	.word	0x20000010
 80038b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d023      	beq.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
 80038c4:	e01e      	b.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10f      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0210 	bic.w	r2, r2, #16
 80038e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	2b00      	cmp	r3, #0
 800390a:	d032      	beq.n	8003972 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d022      	beq.n	800395e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2205      	movs	r2, #5
 800391c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	3301      	adds	r3, #1
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	429a      	cmp	r2, r3
 800393a:	d307      	bcc.n	800394c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f2      	bne.n	8003930 <HAL_DMA_IRQHandler+0x2cc>
 800394a:	e000      	b.n	800394e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800394c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	4798      	blx	r3
 800396e:	e000      	b.n	8003972 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003970:	bf00      	nop
    }
  }
}
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003994:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d108      	bne.n	80039b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039b6:	e007      	b.n	80039c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	60da      	str	r2, [r3, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	3b10      	subs	r3, #16
 80039e4:	4a14      	ldr	r2, [pc, #80]	; (8003a38 <DMA_CalcBaseAndBitshift+0x64>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039ee:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <DMA_CalcBaseAndBitshift+0x68>)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d909      	bls.n	8003a16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	1d1a      	adds	r2, r3, #4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	659a      	str	r2, [r3, #88]	; 0x58
 8003a14:	e007      	b.n	8003a26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	aaaaaaab 	.word	0xaaaaaaab
 8003a3c:	0800a2f8 	.word	0x0800a2f8

08003a40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d11f      	bne.n	8003a9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d856      	bhi.n	8003b0e <DMA_CheckFifoParam+0xce>
 8003a60:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <DMA_CheckFifoParam+0x28>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a79 	.word	0x08003a79
 8003a6c:	08003a8b 	.word	0x08003a8b
 8003a70:	08003a79 	.word	0x08003a79
 8003a74:	08003b0f 	.word	0x08003b0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d046      	beq.n	8003b12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a88:	e043      	b.n	8003b12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a92:	d140      	bne.n	8003b16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a98:	e03d      	b.n	8003b16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa2:	d121      	bne.n	8003ae8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d837      	bhi.n	8003b1a <DMA_CheckFifoParam+0xda>
 8003aaa:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <DMA_CheckFifoParam+0x70>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003ac1 	.word	0x08003ac1
 8003ab4:	08003ac7 	.word	0x08003ac7
 8003ab8:	08003ac1 	.word	0x08003ac1
 8003abc:	08003ad9 	.word	0x08003ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac4:	e030      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d025      	beq.n	8003b1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad6:	e022      	b.n	8003b1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ae0:	d11f      	bne.n	8003b22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ae6:	e01c      	b.n	8003b22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d903      	bls.n	8003af6 <DMA_CheckFifoParam+0xb6>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d003      	beq.n	8003afc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003af4:	e018      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      break;
 8003afa:	e015      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00e      	beq.n	8003b26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0c:	e00b      	b.n	8003b26 <DMA_CheckFifoParam+0xe6>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e00a      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b12:	bf00      	nop
 8003b14:	e008      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b16:	bf00      	nop
 8003b18:	e006      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e004      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e002      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b26:	bf00      	nop
    }
  } 
  
  return status; 
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop

08003b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e159      	b.n	8003e08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b54:	2201      	movs	r2, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	f040 8148 	bne.w	8003e02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d005      	beq.n	8003b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d130      	bne.n	8003bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	2203      	movs	r2, #3
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 0201 	and.w	r2, r3, #1
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d017      	beq.n	8003c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	2203      	movs	r2, #3
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d123      	bne.n	8003c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	08da      	lsrs	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3208      	adds	r2, #8
 8003c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	220f      	movs	r2, #15
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	08da      	lsrs	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3208      	adds	r2, #8
 8003c76:	69b9      	ldr	r1, [r7, #24]
 8003c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	2203      	movs	r2, #3
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0203 	and.w	r2, r3, #3
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a2 	beq.w	8003e02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	4b57      	ldr	r3, [pc, #348]	; (8003e20 <HAL_GPIO_Init+0x2e8>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	4a56      	ldr	r2, [pc, #344]	; (8003e20 <HAL_GPIO_Init+0x2e8>)
 8003cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cce:	4b54      	ldr	r3, [pc, #336]	; (8003e20 <HAL_GPIO_Init+0x2e8>)
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cda:	4a52      	ldr	r2, [pc, #328]	; (8003e24 <HAL_GPIO_Init+0x2ec>)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	089b      	lsrs	r3, r3, #2
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	220f      	movs	r2, #15
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a49      	ldr	r2, [pc, #292]	; (8003e28 <HAL_GPIO_Init+0x2f0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d019      	beq.n	8003d3a <HAL_GPIO_Init+0x202>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a48      	ldr	r2, [pc, #288]	; (8003e2c <HAL_GPIO_Init+0x2f4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_GPIO_Init+0x1fe>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a47      	ldr	r2, [pc, #284]	; (8003e30 <HAL_GPIO_Init+0x2f8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00d      	beq.n	8003d32 <HAL_GPIO_Init+0x1fa>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a46      	ldr	r2, [pc, #280]	; (8003e34 <HAL_GPIO_Init+0x2fc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <HAL_GPIO_Init+0x1f6>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a45      	ldr	r2, [pc, #276]	; (8003e38 <HAL_GPIO_Init+0x300>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_GPIO_Init+0x1f2>
 8003d26:	2304      	movs	r3, #4
 8003d28:	e008      	b.n	8003d3c <HAL_GPIO_Init+0x204>
 8003d2a:	2307      	movs	r3, #7
 8003d2c:	e006      	b.n	8003d3c <HAL_GPIO_Init+0x204>
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e004      	b.n	8003d3c <HAL_GPIO_Init+0x204>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e002      	b.n	8003d3c <HAL_GPIO_Init+0x204>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_GPIO_Init+0x204>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	f002 0203 	and.w	r2, r2, #3
 8003d42:	0092      	lsls	r2, r2, #2
 8003d44:	4093      	lsls	r3, r2
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d4c:	4935      	ldr	r1, [pc, #212]	; (8003e24 <HAL_GPIO_Init+0x2ec>)
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	3302      	adds	r3, #2
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d5a:	4b38      	ldr	r3, [pc, #224]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d7e:	4a2f      	ldr	r2, [pc, #188]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d84:	4b2d      	ldr	r3, [pc, #180]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003da8:	4a24      	ldr	r2, [pc, #144]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dae:	4b23      	ldr	r3, [pc, #140]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dd2:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dd8:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dfc:	4a0f      	ldr	r2, [pc, #60]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3301      	adds	r3, #1
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	2b0f      	cmp	r3, #15
 8003e0c:	f67f aea2 	bls.w	8003b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	3724      	adds	r7, #36	; 0x24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40013800 	.word	0x40013800
 8003e28:	40020000 	.word	0x40020000
 8003e2c:	40020400 	.word	0x40020400
 8003e30:	40020800 	.word	0x40020800
 8003e34:	40020c00 	.word	0x40020c00
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40013c00 	.word	0x40013c00

08003e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	887b      	ldrh	r3, [r7, #2]
 8003e52:	4013      	ands	r3, r2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
 8003e5c:	e001      	b.n	8003e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	807b      	strh	r3, [r7, #2]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e80:	787b      	ldrb	r3, [r7, #1]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e86:	887a      	ldrh	r2, [r7, #2]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e8c:	e003      	b.n	8003e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e8e:	887b      	ldrh	r3, [r7, #2]
 8003e90:	041a      	lsls	r2, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	619a      	str	r2, [r3, #24]
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eb4:	887a      	ldrh	r2, [r7, #2]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	041a      	lsls	r2, r3, #16
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	43d9      	mvns	r1, r3
 8003ec0:	887b      	ldrh	r3, [r7, #2]
 8003ec2:	400b      	ands	r3, r1
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	619a      	str	r2, [r3, #24]
}
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e267      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d075      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ef6:	4b88      	ldr	r3, [pc, #544]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d00c      	beq.n	8003f1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f02:	4b85      	ldr	r3, [pc, #532]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d112      	bne.n	8003f34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f0e:	4b82      	ldr	r3, [pc, #520]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f1a:	d10b      	bne.n	8003f34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1c:	4b7e      	ldr	r3, [pc, #504]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d05b      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x108>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d157      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e242      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3c:	d106      	bne.n	8003f4c <HAL_RCC_OscConfig+0x74>
 8003f3e:	4b76      	ldr	r3, [pc, #472]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a75      	ldr	r2, [pc, #468]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e01d      	b.n	8003f88 <HAL_RCC_OscConfig+0xb0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x98>
 8003f56:	4b70      	ldr	r3, [pc, #448]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a6f      	ldr	r2, [pc, #444]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b6d      	ldr	r3, [pc, #436]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a6c      	ldr	r2, [pc, #432]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e00b      	b.n	8003f88 <HAL_RCC_OscConfig+0xb0>
 8003f70:	4b69      	ldr	r3, [pc, #420]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a68      	ldr	r2, [pc, #416]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b66      	ldr	r3, [pc, #408]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a65      	ldr	r2, [pc, #404]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d013      	beq.n	8003fb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7ff f8e2 	bl	8003158 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f98:	f7ff f8de 	bl	8003158 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	; 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e207      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003faa:	4b5b      	ldr	r3, [pc, #364]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0xc0>
 8003fb6:	e014      	b.n	8003fe2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7ff f8ce 	bl	8003158 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc0:	f7ff f8ca 	bl	8003158 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e1f3      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd2:	4b51      	ldr	r3, [pc, #324]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0xe8>
 8003fde:	e000      	b.n	8003fe2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d063      	beq.n	80040b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fee:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ffa:	4b47      	ldr	r3, [pc, #284]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004002:	2b08      	cmp	r3, #8
 8004004:	d11c      	bne.n	8004040 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004006:	4b44      	ldr	r3, [pc, #272]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d116      	bne.n	8004040 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004012:	4b41      	ldr	r3, [pc, #260]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_RCC_OscConfig+0x152>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d001      	beq.n	800402a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e1c7      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402a:	4b3b      	ldr	r3, [pc, #236]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4937      	ldr	r1, [pc, #220]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 800403a:	4313      	orrs	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403e:	e03a      	b.n	80040b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004048:	4b34      	ldr	r3, [pc, #208]	; (800411c <HAL_RCC_OscConfig+0x244>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7ff f883 	bl	8003158 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004056:	f7ff f87f 	bl	8003158 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e1a8      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004068:	4b2b      	ldr	r3, [pc, #172]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004074:	4b28      	ldr	r3, [pc, #160]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4925      	ldr	r1, [pc, #148]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]
 8004088:	e015      	b.n	80040b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800408a:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_RCC_OscConfig+0x244>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7ff f862 	bl	8003158 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004098:	f7ff f85e 	bl	8003158 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e187      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040aa:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d036      	beq.n	8004130 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <HAL_RCC_OscConfig+0x248>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7ff f842 	bl	8003158 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040d8:	f7ff f83e 	bl	8003158 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e167      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_RCC_OscConfig+0x240>)
 80040ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x200>
 80040f6:	e01b      	b.n	8004130 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f8:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCC_OscConfig+0x248>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fe:	f7ff f82b 	bl	8003158 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004104:	e00e      	b.n	8004124 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004106:	f7ff f827 	bl	8003158 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d907      	bls.n	8004124 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e150      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
 8004118:	40023800 	.word	0x40023800
 800411c:	42470000 	.word	0x42470000
 8004120:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004124:	4b88      	ldr	r3, [pc, #544]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 8004126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ea      	bne.n	8004106 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 8097 	beq.w	800426c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004142:	4b81      	ldr	r3, [pc, #516]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10f      	bne.n	800416e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	4b7d      	ldr	r3, [pc, #500]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	4a7c      	ldr	r2, [pc, #496]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 8004158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415c:	6413      	str	r3, [r2, #64]	; 0x40
 800415e:	4b7a      	ldr	r3, [pc, #488]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416e:	4b77      	ldr	r3, [pc, #476]	; (800434c <HAL_RCC_OscConfig+0x474>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d118      	bne.n	80041ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800417a:	4b74      	ldr	r3, [pc, #464]	; (800434c <HAL_RCC_OscConfig+0x474>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a73      	ldr	r2, [pc, #460]	; (800434c <HAL_RCC_OscConfig+0x474>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004186:	f7fe ffe7 	bl	8003158 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418e:	f7fe ffe3 	bl	8003158 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e10c      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a0:	4b6a      	ldr	r3, [pc, #424]	; (800434c <HAL_RCC_OscConfig+0x474>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d106      	bne.n	80041c2 <HAL_RCC_OscConfig+0x2ea>
 80041b4:	4b64      	ldr	r3, [pc, #400]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b8:	4a63      	ldr	r2, [pc, #396]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	6713      	str	r3, [r2, #112]	; 0x70
 80041c0:	e01c      	b.n	80041fc <HAL_RCC_OscConfig+0x324>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x30c>
 80041ca:	4b5f      	ldr	r3, [pc, #380]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	4a5e      	ldr	r2, [pc, #376]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 80041d0:	f043 0304 	orr.w	r3, r3, #4
 80041d4:	6713      	str	r3, [r2, #112]	; 0x70
 80041d6:	4b5c      	ldr	r3, [pc, #368]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	4a5b      	ldr	r2, [pc, #364]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	6713      	str	r3, [r2, #112]	; 0x70
 80041e2:	e00b      	b.n	80041fc <HAL_RCC_OscConfig+0x324>
 80041e4:	4b58      	ldr	r3, [pc, #352]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	4a57      	ldr	r2, [pc, #348]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	6713      	str	r3, [r2, #112]	; 0x70
 80041f0:	4b55      	ldr	r3, [pc, #340]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	4a54      	ldr	r2, [pc, #336]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 80041f6:	f023 0304 	bic.w	r3, r3, #4
 80041fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d015      	beq.n	8004230 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004204:	f7fe ffa8 	bl	8003158 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420a:	e00a      	b.n	8004222 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800420c:	f7fe ffa4 	bl	8003158 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f241 3288 	movw	r2, #5000	; 0x1388
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e0cb      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004222:	4b49      	ldr	r3, [pc, #292]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0ee      	beq.n	800420c <HAL_RCC_OscConfig+0x334>
 800422e:	e014      	b.n	800425a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004230:	f7fe ff92 	bl	8003158 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004236:	e00a      	b.n	800424e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fe ff8e 	bl	8003158 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e0b5      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800424e:	4b3e      	ldr	r3, [pc, #248]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1ee      	bne.n	8004238 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d105      	bne.n	800426c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004260:	4b39      	ldr	r3, [pc, #228]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	4a38      	ldr	r2, [pc, #224]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 8004266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800426a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80a1 	beq.w	80043b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004276:	4b34      	ldr	r3, [pc, #208]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b08      	cmp	r3, #8
 8004280:	d05c      	beq.n	800433c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d141      	bne.n	800430e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428a:	4b31      	ldr	r3, [pc, #196]	; (8004350 <HAL_RCC_OscConfig+0x478>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fe ff62 	bl	8003158 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004298:	f7fe ff5e 	bl	8003158 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e087      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042aa:	4b27      	ldr	r3, [pc, #156]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	019b      	lsls	r3, r3, #6
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	3b01      	subs	r3, #1
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	491b      	ldr	r1, [pc, #108]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <HAL_RCC_OscConfig+0x478>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e6:	f7fe ff37 	bl	8003158 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fe ff33 	bl	8003158 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e05c      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x416>
 800430c:	e054      	b.n	80043b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	4b10      	ldr	r3, [pc, #64]	; (8004350 <HAL_RCC_OscConfig+0x478>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fe ff20 	bl	8003158 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431c:	f7fe ff1c 	bl	8003158 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e045      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_RCC_OscConfig+0x470>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x444>
 800433a:	e03d      	b.n	80043b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d107      	bne.n	8004354 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e038      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
 8004348:	40023800 	.word	0x40023800
 800434c:	40007000 	.word	0x40007000
 8004350:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_RCC_OscConfig+0x4ec>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d028      	beq.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d121      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d11a      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004384:	4013      	ands	r3, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800438a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800438c:	4293      	cmp	r3, r2
 800438e:	d111      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	3b01      	subs	r3, #1
 800439e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d107      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800

080043c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0cc      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043dc:	4b68      	ldr	r3, [pc, #416]	; (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d90c      	bls.n	8004404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ea:	4b65      	ldr	r3, [pc, #404]	; (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f2:	4b63      	ldr	r3, [pc, #396]	; (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d001      	beq.n	8004404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0b8      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d020      	beq.n	8004452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800441c:	4b59      	ldr	r3, [pc, #356]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	4a58      	ldr	r2, [pc, #352]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004434:	4b53      	ldr	r3, [pc, #332]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	4a52      	ldr	r2, [pc, #328]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800443e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004440:	4b50      	ldr	r3, [pc, #320]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	494d      	ldr	r1, [pc, #308]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d044      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d107      	bne.n	8004476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	4b47      	ldr	r3, [pc, #284]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d119      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e07f      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d003      	beq.n	8004486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004482:	2b03      	cmp	r3, #3
 8004484:	d107      	bne.n	8004496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004486:	4b3f      	ldr	r3, [pc, #252]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e06f      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004496:	4b3b      	ldr	r3, [pc, #236]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e067      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044a6:	4b37      	ldr	r3, [pc, #220]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f023 0203 	bic.w	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4934      	ldr	r1, [pc, #208]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b8:	f7fe fe4e 	bl	8003158 <HAL_GetTick>
 80044bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c0:	f7fe fe4a 	bl	8003158 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e04f      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	4b2b      	ldr	r3, [pc, #172]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 020c 	and.w	r2, r3, #12
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d1eb      	bne.n	80044c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044e8:	4b25      	ldr	r3, [pc, #148]	; (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d20c      	bcs.n	8004510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b22      	ldr	r3, [pc, #136]	; (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b20      	ldr	r3, [pc, #128]	; (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e032      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800451c:	4b19      	ldr	r3, [pc, #100]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	4916      	ldr	r1, [pc, #88]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	4313      	orrs	r3, r2
 800452c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800453a:	4b12      	ldr	r3, [pc, #72]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	490e      	ldr	r1, [pc, #56]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800454e:	f000 f821 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8004552:	4602      	mov	r2, r0
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	490a      	ldr	r1, [pc, #40]	; (8004588 <HAL_RCC_ClockConfig+0x1c0>)
 8004560:	5ccb      	ldrb	r3, [r1, r3]
 8004562:	fa22 f303 	lsr.w	r3, r2, r3
 8004566:	4a09      	ldr	r2, [pc, #36]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800456a:	4b09      	ldr	r3, [pc, #36]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe fc64 	bl	8002e3c <HAL_InitTick>

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40023c00 	.word	0x40023c00
 8004584:	40023800 	.word	0x40023800
 8004588:	0800a2e0 	.word	0x0800a2e0
 800458c:	20000010 	.word	0x20000010
 8004590:	20000014 	.word	0x20000014

08004594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004598:	b090      	sub	sp, #64	; 0x40
 800459a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	637b      	str	r3, [r7, #52]	; 0x34
 80045a0:	2300      	movs	r3, #0
 80045a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a4:	2300      	movs	r3, #0
 80045a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ac:	4b59      	ldr	r3, [pc, #356]	; (8004714 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d00d      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0x40>
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	f200 80a1 	bhi.w	8004700 <HAL_RCC_GetSysClockFreq+0x16c>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0x34>
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d003      	beq.n	80045ce <HAL_RCC_GetSysClockFreq+0x3a>
 80045c6:	e09b      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045c8:	4b53      	ldr	r3, [pc, #332]	; (8004718 <HAL_RCC_GetSysClockFreq+0x184>)
 80045ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80045cc:	e09b      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ce:	4b53      	ldr	r3, [pc, #332]	; (800471c <HAL_RCC_GetSysClockFreq+0x188>)
 80045d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045d2:	e098      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d4:	4b4f      	ldr	r3, [pc, #316]	; (8004714 <HAL_RCC_GetSysClockFreq+0x180>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045de:	4b4d      	ldr	r3, [pc, #308]	; (8004714 <HAL_RCC_GetSysClockFreq+0x180>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d028      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ea:	4b4a      	ldr	r3, [pc, #296]	; (8004714 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	099b      	lsrs	r3, r3, #6
 80045f0:	2200      	movs	r2, #0
 80045f2:	623b      	str	r3, [r7, #32]
 80045f4:	627a      	str	r2, [r7, #36]	; 0x24
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045fc:	2100      	movs	r1, #0
 80045fe:	4b47      	ldr	r3, [pc, #284]	; (800471c <HAL_RCC_GetSysClockFreq+0x188>)
 8004600:	fb03 f201 	mul.w	r2, r3, r1
 8004604:	2300      	movs	r3, #0
 8004606:	fb00 f303 	mul.w	r3, r0, r3
 800460a:	4413      	add	r3, r2
 800460c:	4a43      	ldr	r2, [pc, #268]	; (800471c <HAL_RCC_GetSysClockFreq+0x188>)
 800460e:	fba0 1202 	umull	r1, r2, r0, r2
 8004612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004614:	460a      	mov	r2, r1
 8004616:	62ba      	str	r2, [r7, #40]	; 0x28
 8004618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800461a:	4413      	add	r3, r2
 800461c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800461e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004620:	2200      	movs	r2, #0
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	61fa      	str	r2, [r7, #28]
 8004626:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800462a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800462e:	f7fb fddf 	bl	80001f0 <__aeabi_uldivmod>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4613      	mov	r3, r2
 8004638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800463a:	e053      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800463c:	4b35      	ldr	r3, [pc, #212]	; (8004714 <HAL_RCC_GetSysClockFreq+0x180>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	099b      	lsrs	r3, r3, #6
 8004642:	2200      	movs	r2, #0
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	617a      	str	r2, [r7, #20]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800464e:	f04f 0b00 	mov.w	fp, #0
 8004652:	4652      	mov	r2, sl
 8004654:	465b      	mov	r3, fp
 8004656:	f04f 0000 	mov.w	r0, #0
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	0159      	lsls	r1, r3, #5
 8004660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004664:	0150      	lsls	r0, r2, #5
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	ebb2 080a 	subs.w	r8, r2, sl
 800466e:	eb63 090b 	sbc.w	r9, r3, fp
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800467e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004682:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004686:	ebb2 0408 	subs.w	r4, r2, r8
 800468a:	eb63 0509 	sbc.w	r5, r3, r9
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	00eb      	lsls	r3, r5, #3
 8004698:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800469c:	00e2      	lsls	r2, r4, #3
 800469e:	4614      	mov	r4, r2
 80046a0:	461d      	mov	r5, r3
 80046a2:	eb14 030a 	adds.w	r3, r4, sl
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	eb45 030b 	adc.w	r3, r5, fp
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ba:	4629      	mov	r1, r5
 80046bc:	028b      	lsls	r3, r1, #10
 80046be:	4621      	mov	r1, r4
 80046c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046c4:	4621      	mov	r1, r4
 80046c6:	028a      	lsls	r2, r1, #10
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
 80046cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ce:	2200      	movs	r2, #0
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	60fa      	str	r2, [r7, #12]
 80046d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046d8:	f7fb fd8a 	bl	80001f0 <__aeabi_uldivmod>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4613      	mov	r3, r2
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCC_GetSysClockFreq+0x180>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	3301      	adds	r3, #1
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80046f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046fe:	e002      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <HAL_RCC_GetSysClockFreq+0x184>)
 8004702:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004708:	4618      	mov	r0, r3
 800470a:	3740      	adds	r7, #64	; 0x40
 800470c:	46bd      	mov	sp, r7
 800470e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800
 8004718:	00f42400 	.word	0x00f42400
 800471c:	017d7840 	.word	0x017d7840

08004720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004724:	4b03      	ldr	r3, [pc, #12]	; (8004734 <HAL_RCC_GetHCLKFreq+0x14>)
 8004726:	681b      	ldr	r3, [r3, #0]
}
 8004728:	4618      	mov	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000010 	.word	0x20000010

08004738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800473c:	f7ff fff0 	bl	8004720 <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	0a9b      	lsrs	r3, r3, #10
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4903      	ldr	r1, [pc, #12]	; (800475c <HAL_RCC_GetPCLK1Freq+0x24>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004754:	4618      	mov	r0, r3
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40023800 	.word	0x40023800
 800475c:	0800a2f0 	.word	0x0800a2f0

08004760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004764:	f7ff ffdc 	bl	8004720 <HAL_RCC_GetHCLKFreq>
 8004768:	4602      	mov	r2, r0
 800476a:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	0b5b      	lsrs	r3, r3, #13
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	4903      	ldr	r1, [pc, #12]	; (8004784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004776:	5ccb      	ldrb	r3, [r1, r3]
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800477c:	4618      	mov	r0, r3
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40023800 	.word	0x40023800
 8004784:	0800a2f0 	.word	0x0800a2f0

08004788 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	220f      	movs	r2, #15
 8004796:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004798:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <HAL_RCC_GetClockConfig+0x5c>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0203 	and.w	r2, r3, #3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80047a4:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <HAL_RCC_GetClockConfig+0x5c>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <HAL_RCC_GetClockConfig+0x5c>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_RCC_GetClockConfig+0x5c>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	08db      	lsrs	r3, r3, #3
 80047c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047ca:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <HAL_RCC_GetClockConfig+0x60>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0207 	and.w	r2, r3, #7
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	601a      	str	r2, [r3, #0]
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40023800 	.word	0x40023800
 80047e8:	40023c00 	.word	0x40023c00

080047ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e041      	b.n	8004882 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fe fa00 	bl	8002c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3304      	adds	r3, #4
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f000 fc54 	bl	80050d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d001      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e044      	b.n	800492e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1e      	ldr	r2, [pc, #120]	; (800493c <HAL_TIM_Base_Start_IT+0xb0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d018      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x6c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d013      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x6c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1a      	ldr	r2, [pc, #104]	; (8004940 <HAL_TIM_Base_Start_IT+0xb4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x6c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a19      	ldr	r2, [pc, #100]	; (8004944 <HAL_TIM_Base_Start_IT+0xb8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d009      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x6c>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a17      	ldr	r2, [pc, #92]	; (8004948 <HAL_TIM_Base_Start_IT+0xbc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x6c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a16      	ldr	r2, [pc, #88]	; (800494c <HAL_TIM_Base_Start_IT+0xc0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d111      	bne.n	800491c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b06      	cmp	r3, #6
 8004908:	d010      	beq.n	800492c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0201 	orr.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491a:	e007      	b.n	800492c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40010000 	.word	0x40010000
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	40000c00 	.word	0x40000c00
 800494c:	40014000 	.word	0x40014000

08004950 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e041      	b.n	80049e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f839 	bl	80049ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f000 fba2 	bl	80050d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d109      	bne.n	8004a28 <HAL_TIM_PWM_Start+0x24>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	e022      	b.n	8004a6e <HAL_TIM_PWM_Start+0x6a>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d109      	bne.n	8004a42 <HAL_TIM_PWM_Start+0x3e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	bf14      	ite	ne
 8004a3a:	2301      	movne	r3, #1
 8004a3c:	2300      	moveq	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	e015      	b.n	8004a6e <HAL_TIM_PWM_Start+0x6a>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d109      	bne.n	8004a5c <HAL_TIM_PWM_Start+0x58>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	bf14      	ite	ne
 8004a54:	2301      	movne	r3, #1
 8004a56:	2300      	moveq	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	e008      	b.n	8004a6e <HAL_TIM_PWM_Start+0x6a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	bf14      	ite	ne
 8004a68:	2301      	movne	r3, #1
 8004a6a:	2300      	moveq	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e068      	b.n	8004b48 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d104      	bne.n	8004a86 <HAL_TIM_PWM_Start+0x82>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a84:	e013      	b.n	8004aae <HAL_TIM_PWM_Start+0xaa>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d104      	bne.n	8004a96 <HAL_TIM_PWM_Start+0x92>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a94:	e00b      	b.n	8004aae <HAL_TIM_PWM_Start+0xaa>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d104      	bne.n	8004aa6 <HAL_TIM_PWM_Start+0xa2>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa4:	e003      	b.n	8004aae <HAL_TIM_PWM_Start+0xaa>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	6839      	ldr	r1, [r7, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fdb4 	bl	8005624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a23      	ldr	r2, [pc, #140]	; (8004b50 <HAL_TIM_PWM_Start+0x14c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d107      	bne.n	8004ad6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1d      	ldr	r2, [pc, #116]	; (8004b50 <HAL_TIM_PWM_Start+0x14c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d018      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x10e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae8:	d013      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x10e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <HAL_TIM_PWM_Start+0x150>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00e      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x10e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <HAL_TIM_PWM_Start+0x154>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d009      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x10e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <HAL_TIM_PWM_Start+0x158>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x10e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a14      	ldr	r2, [pc, #80]	; (8004b60 <HAL_TIM_PWM_Start+0x15c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d111      	bne.n	8004b36 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b06      	cmp	r3, #6
 8004b22:	d010      	beq.n	8004b46 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	e007      	b.n	8004b46 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800
 8004b5c:	40000c00 	.word	0x40000c00
 8004b60:	40014000 	.word	0x40014000

08004b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d122      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d11b      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0202 	mvn.w	r2, #2
 8004b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fa77 	bl	800509a <HAL_TIM_IC_CaptureCallback>
 8004bac:	e005      	b.n	8004bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa69 	bl	8005086 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fa7a 	bl	80050ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d122      	bne.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d11b      	bne.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0204 	mvn.w	r2, #4
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fa4d 	bl	800509a <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fa3f 	bl	8005086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fa50 	bl	80050ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d122      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d11b      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0208 	mvn.w	r2, #8
 8004c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fa23 	bl	800509a <HAL_TIM_IC_CaptureCallback>
 8004c54:	e005      	b.n	8004c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fa15 	bl	8005086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fa26 	bl	80050ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b10      	cmp	r3, #16
 8004c74:	d122      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d11b      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0210 	mvn.w	r2, #16
 8004c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2208      	movs	r2, #8
 8004c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f9f9 	bl	800509a <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f9eb 	bl	8005086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f9fc 	bl	80050ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d10e      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d107      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0201 	mvn.w	r2, #1
 8004ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fd f8e8 	bl	8001eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	2b80      	cmp	r3, #128	; 0x80
 8004cf4:	d10e      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d107      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fd26 	bl	8005760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b40      	cmp	r3, #64	; 0x40
 8004d20:	d10e      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d107      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f9c1 	bl	80050c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d10e      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d107      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0220 	mvn.w	r2, #32
 8004d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fcf0 	bl	800574c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e0ae      	b.n	8004ef0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b0c      	cmp	r3, #12
 8004d9e:	f200 809f 	bhi.w	8004ee0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004ddd 	.word	0x08004ddd
 8004dac:	08004ee1 	.word	0x08004ee1
 8004db0:	08004ee1 	.word	0x08004ee1
 8004db4:	08004ee1 	.word	0x08004ee1
 8004db8:	08004e1d 	.word	0x08004e1d
 8004dbc:	08004ee1 	.word	0x08004ee1
 8004dc0:	08004ee1 	.word	0x08004ee1
 8004dc4:	08004ee1 	.word	0x08004ee1
 8004dc8:	08004e5f 	.word	0x08004e5f
 8004dcc:	08004ee1 	.word	0x08004ee1
 8004dd0:	08004ee1 	.word	0x08004ee1
 8004dd4:	08004ee1 	.word	0x08004ee1
 8004dd8:	08004e9f 	.word	0x08004e9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68b9      	ldr	r1, [r7, #8]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f9f8 	bl	80051d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0208 	orr.w	r2, r2, #8
 8004df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0204 	bic.w	r2, r2, #4
 8004e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6999      	ldr	r1, [r3, #24]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	619a      	str	r2, [r3, #24]
      break;
 8004e1a:	e064      	b.n	8004ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fa3e 	bl	80052a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6999      	ldr	r1, [r3, #24]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	021a      	lsls	r2, r3, #8
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	619a      	str	r2, [r3, #24]
      break;
 8004e5c:	e043      	b.n	8004ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 fa89 	bl	800537c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0208 	orr.w	r2, r2, #8
 8004e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0204 	bic.w	r2, r2, #4
 8004e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69d9      	ldr	r1, [r3, #28]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	61da      	str	r2, [r3, #28]
      break;
 8004e9c:	e023      	b.n	8004ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fad3 	bl	8005450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69d9      	ldr	r1, [r3, #28]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	021a      	lsls	r2, r3, #8
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	61da      	str	r2, [r3, #28]
      break;
 8004ede:	e002      	b.n	8004ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ee4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_TIM_ConfigClockSource+0x1c>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e0b4      	b.n	800507e <HAL_TIM_ConfigClockSource+0x186>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4c:	d03e      	beq.n	8004fcc <HAL_TIM_ConfigClockSource+0xd4>
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f52:	f200 8087 	bhi.w	8005064 <HAL_TIM_ConfigClockSource+0x16c>
 8004f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5a:	f000 8086 	beq.w	800506a <HAL_TIM_ConfigClockSource+0x172>
 8004f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f62:	d87f      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x16c>
 8004f64:	2b70      	cmp	r3, #112	; 0x70
 8004f66:	d01a      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0xa6>
 8004f68:	2b70      	cmp	r3, #112	; 0x70
 8004f6a:	d87b      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x16c>
 8004f6c:	2b60      	cmp	r3, #96	; 0x60
 8004f6e:	d050      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0x11a>
 8004f70:	2b60      	cmp	r3, #96	; 0x60
 8004f72:	d877      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x16c>
 8004f74:	2b50      	cmp	r3, #80	; 0x50
 8004f76:	d03c      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0xfa>
 8004f78:	2b50      	cmp	r3, #80	; 0x50
 8004f7a:	d873      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x16c>
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d058      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0x13a>
 8004f80:	2b40      	cmp	r3, #64	; 0x40
 8004f82:	d86f      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x16c>
 8004f84:	2b30      	cmp	r3, #48	; 0x30
 8004f86:	d064      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x15a>
 8004f88:	2b30      	cmp	r3, #48	; 0x30
 8004f8a:	d86b      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x16c>
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d060      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x15a>
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	d867      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x16c>
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d05c      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x15a>
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d05a      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x15a>
 8004f9c:	e062      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6899      	ldr	r1, [r3, #8]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f000 fb19 	bl	80055e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	609a      	str	r2, [r3, #8]
      break;
 8004fca:	e04f      	b.n	800506c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	6899      	ldr	r1, [r3, #8]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f000 fb02 	bl	80055e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fee:	609a      	str	r2, [r3, #8]
      break;
 8004ff0:	e03c      	b.n	800506c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6859      	ldr	r1, [r3, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f000 fa76 	bl	80054f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2150      	movs	r1, #80	; 0x50
 800500a:	4618      	mov	r0, r3
 800500c:	f000 facf 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8005010:	e02c      	b.n	800506c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6859      	ldr	r1, [r3, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	461a      	mov	r2, r3
 8005020:	f000 fa95 	bl	800554e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2160      	movs	r1, #96	; 0x60
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fabf 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8005030:	e01c      	b.n	800506c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6859      	ldr	r1, [r3, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	461a      	mov	r2, r3
 8005040:	f000 fa56 	bl	80054f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2140      	movs	r1, #64	; 0x40
 800504a:	4618      	mov	r0, r3
 800504c:	f000 faaf 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8005050:	e00c      	b.n	800506c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4619      	mov	r1, r3
 800505c:	4610      	mov	r0, r2
 800505e:	f000 faa6 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8005062:	e003      	b.n	800506c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
      break;
 8005068:	e000      	b.n	800506c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800506a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800507c:	7bfb      	ldrb	r3, [r7, #15]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a34      	ldr	r2, [pc, #208]	; (80051bc <TIM_Base_SetConfig+0xe4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00f      	beq.n	8005110 <TIM_Base_SetConfig+0x38>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f6:	d00b      	beq.n	8005110 <TIM_Base_SetConfig+0x38>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a31      	ldr	r2, [pc, #196]	; (80051c0 <TIM_Base_SetConfig+0xe8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d007      	beq.n	8005110 <TIM_Base_SetConfig+0x38>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a30      	ldr	r2, [pc, #192]	; (80051c4 <TIM_Base_SetConfig+0xec>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d003      	beq.n	8005110 <TIM_Base_SetConfig+0x38>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a2f      	ldr	r2, [pc, #188]	; (80051c8 <TIM_Base_SetConfig+0xf0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d108      	bne.n	8005122 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a25      	ldr	r2, [pc, #148]	; (80051bc <TIM_Base_SetConfig+0xe4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d01b      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005130:	d017      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <TIM_Base_SetConfig+0xe8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d013      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <TIM_Base_SetConfig+0xec>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00f      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a20      	ldr	r2, [pc, #128]	; (80051c8 <TIM_Base_SetConfig+0xf0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00b      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <TIM_Base_SetConfig+0xf4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d007      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <TIM_Base_SetConfig+0xf8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_Base_SetConfig+0x8a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <TIM_Base_SetConfig+0xfc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d108      	bne.n	8005174 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a08      	ldr	r2, [pc, #32]	; (80051bc <TIM_Base_SetConfig+0xe4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d103      	bne.n	80051a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	615a      	str	r2, [r3, #20]
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800
 80051c8:	40000c00 	.word	0x40000c00
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800

080051d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f023 0201 	bic.w	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0303 	bic.w	r3, r3, #3
 800520e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f023 0302 	bic.w	r3, r3, #2
 8005220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a1c      	ldr	r2, [pc, #112]	; (80052a0 <TIM_OC1_SetConfig+0xc8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d10c      	bne.n	800524e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0308 	bic.w	r3, r3, #8
 800523a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 0304 	bic.w	r3, r3, #4
 800524c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <TIM_OC1_SetConfig+0xc8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d111      	bne.n	800527a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40010000 	.word	0x40010000

080052a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 0210 	bic.w	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f023 0320 	bic.w	r3, r3, #32
 80052ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1e      	ldr	r2, [pc, #120]	; (8005378 <TIM_OC2_SetConfig+0xd4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d10d      	bne.n	8005320 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800530a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a15      	ldr	r2, [pc, #84]	; (8005378 <TIM_OC2_SetConfig+0xd4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d113      	bne.n	8005350 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000

0800537c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0303 	bic.w	r3, r3, #3
 80053b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a1d      	ldr	r2, [pc, #116]	; (800544c <TIM_OC3_SetConfig+0xd0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d10d      	bne.n	80053f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a14      	ldr	r2, [pc, #80]	; (800544c <TIM_OC3_SetConfig+0xd0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d113      	bne.n	8005426 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800540c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	621a      	str	r2, [r3, #32]
}
 8005440:	bf00      	nop
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	40010000 	.word	0x40010000

08005450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800549a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	031b      	lsls	r3, r3, #12
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a10      	ldr	r2, [pc, #64]	; (80054ec <TIM_OC4_SetConfig+0x9c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d109      	bne.n	80054c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	019b      	lsls	r3, r3, #6
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000

080054f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0201 	bic.w	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800551a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f023 030a 	bic.w	r3, r3, #10
 800552c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554e:	b480      	push	{r7}
 8005550:	b087      	sub	sp, #28
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0210 	bic.w	r2, r3, #16
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	031b      	lsls	r3, r3, #12
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800558a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f043 0307 	orr.w	r3, r3, #7
 80055d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	609a      	str	r2, [r3, #8]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	021a      	lsls	r2, r3, #8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	431a      	orrs	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4313      	orrs	r3, r2
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	609a      	str	r2, [r3, #8]
}
 8005618:	bf00      	nop
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	2201      	movs	r2, #1
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1a      	ldr	r2, [r3, #32]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	43db      	mvns	r3, r3
 8005646:	401a      	ands	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1a      	ldr	r2, [r3, #32]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	fa01 f303 	lsl.w	r3, r1, r3
 800565c:	431a      	orrs	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005684:	2302      	movs	r3, #2
 8005686:	e050      	b.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d018      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d4:	d013      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a18      	ldr	r2, [pc, #96]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00e      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a16      	ldr	r2, [pc, #88]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d009      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a15      	ldr	r2, [pc, #84]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d004      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a13      	ldr	r2, [pc, #76]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d10c      	bne.n	8005718 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	4313      	orrs	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40010000 	.word	0x40010000
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40014000 	.word	0x40014000

0800574c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e03f      	b.n	8005806 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fd fa9a 	bl	8002cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2224      	movs	r2, #36	; 0x24
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 ff43 	bl	8006644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695a      	ldr	r2, [r3, #20]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08c      	sub	sp, #48	; 0x30
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b20      	cmp	r3, #32
 8005828:	d165      	bne.n	80058f6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_UART_Transmit_DMA+0x26>
 8005830:	88fb      	ldrh	r3, [r7, #6]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e05e      	b.n	80058f8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_UART_Transmit_DMA+0x38>
 8005844:	2302      	movs	r3, #2
 8005846:	e057      	b.n	80058f8 <HAL_UART_Transmit_DMA+0xe8>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	88fa      	ldrh	r2, [r7, #6]
 800585a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	88fa      	ldrh	r2, [r7, #6]
 8005860:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2221      	movs	r2, #33	; 0x21
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005874:	4a22      	ldr	r2, [pc, #136]	; (8005900 <HAL_UART_Transmit_DMA+0xf0>)
 8005876:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587c:	4a21      	ldr	r2, [pc, #132]	; (8005904 <HAL_UART_Transmit_DMA+0xf4>)
 800587e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005884:	4a20      	ldr	r2, [pc, #128]	; (8005908 <HAL_UART_Transmit_DMA+0xf8>)
 8005886:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588c:	2200      	movs	r2, #0
 800588e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005890:	f107 0308 	add.w	r3, r7, #8
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	6819      	ldr	r1, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3304      	adds	r3, #4
 80058a4:	461a      	mov	r2, r3
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	f7fd fdf2 	bl	8003490 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3314      	adds	r3, #20
 80058c4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	617b      	str	r3, [r7, #20]
   return(result);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3314      	adds	r3, #20
 80058dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058de:	627a      	str	r2, [r7, #36]	; 0x24
 80058e0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	6a39      	ldr	r1, [r7, #32]
 80058e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e5      	bne.n	80058be <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e000      	b.n	80058f8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
  }
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3730      	adds	r7, #48	; 0x30
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	08005edd 	.word	0x08005edd
 8005904:	08005f77 	.word	0x08005f77
 8005908:	080060ef 	.word	0x080060ef

0800590c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b20      	cmp	r3, #32
 8005924:	d11d      	bne.n	8005962 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <HAL_UART_Receive_DMA+0x26>
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e016      	b.n	8005964 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_UART_Receive_DMA+0x38>
 8005940:	2302      	movs	r3, #2
 8005942:	e00f      	b.n	8005964 <HAL_UART_Receive_DMA+0x58>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	461a      	mov	r2, r3
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 fc13 	bl	8006184 <UART_Start_Receive_DMA>
 800595e:	4603      	mov	r3, r0
 8005960:	e000      	b.n	8005964 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005962:	2302      	movs	r3, #2
  }
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b0ba      	sub	sp, #232	; 0xe8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005992:	2300      	movs	r3, #0
 8005994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005998:	2300      	movs	r3, #0
 800599a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10f      	bne.n	80059d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <HAL_UART_IRQHandler+0x66>
 80059be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fd7f 	bl	80064ce <UART_Receive_IT>
      return;
 80059d0:	e256      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 80de 	beq.w	8005b98 <HAL_UART_IRQHandler+0x22c>
 80059dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d106      	bne.n	80059f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80d1 	beq.w	8005b98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00b      	beq.n	8005a1a <HAL_UART_IRQHandler+0xae>
 8005a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f043 0201 	orr.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <HAL_UART_IRQHandler+0xd2>
 8005a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f043 0202 	orr.w	r2, r3, #2
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <HAL_UART_IRQHandler+0xf6>
 8005a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f043 0204 	orr.w	r2, r3, #4
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d011      	beq.n	8005a92 <HAL_UART_IRQHandler+0x126>
 8005a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d105      	bne.n	8005a86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f043 0208 	orr.w	r2, r3, #8
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 81ed 	beq.w	8005e76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_UART_IRQHandler+0x14e>
 8005aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aac:	f003 0320 	and.w	r3, r3, #32
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fd0a 	bl	80064ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x17a>
 8005ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d04f      	beq.n	8005b86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fc12 	bl	8006310 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b40      	cmp	r3, #64	; 0x40
 8005af8:	d141      	bne.n	8005b7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3314      	adds	r3, #20
 8005b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3314      	adds	r3, #20
 8005b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1d9      	bne.n	8005afa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d013      	beq.n	8005b76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	4a7d      	ldr	r2, [pc, #500]	; (8005d48 <HAL_UART_IRQHandler+0x3dc>)
 8005b54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fd fd60 	bl	8003620 <HAL_DMA_Abort_IT>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d016      	beq.n	8005b94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b70:	4610      	mov	r0, r2
 8005b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b74:	e00e      	b.n	8005b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f99a 	bl	8005eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	e00a      	b.n	8005b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f996 	bl	8005eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	e006      	b.n	8005b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f992 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b92:	e170      	b.n	8005e76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	bf00      	nop
    return;
 8005b96:	e16e      	b.n	8005e76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	f040 814a 	bne.w	8005e36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8143 	beq.w	8005e36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 813c 	beq.w	8005e36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60bb      	str	r3, [r7, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bde:	2b40      	cmp	r3, #64	; 0x40
 8005be0:	f040 80b4 	bne.w	8005d4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8140 	beq.w	8005e7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c02:	429a      	cmp	r2, r3
 8005c04:	f080 8139 	bcs.w	8005e7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1a:	f000 8088 	beq.w	8005d2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1d9      	bne.n	8005c1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3314      	adds	r3, #20
 8005c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3314      	adds	r3, #20
 8005c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e1      	bne.n	8005c6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3314      	adds	r3, #20
 8005cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3314      	adds	r3, #20
 8005cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e3      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cfe:	f023 0310 	bic.w	r3, r3, #16
 8005d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d10:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e3      	bne.n	8005cec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fd fc09 	bl	8003540 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f8c0 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d44:	e099      	b.n	8005e7a <HAL_UART_IRQHandler+0x50e>
 8005d46:	bf00      	nop
 8005d48:	080063d7 	.word	0x080063d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 808b 	beq.w	8005e7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8086 	beq.w	8005e7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	330c      	adds	r3, #12
 8005d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	330c      	adds	r3, #12
 8005d92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d96:	647a      	str	r2, [r7, #68]	; 0x44
 8005d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e3      	bne.n	8005d72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3314      	adds	r3, #20
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3314      	adds	r3, #20
 8005dca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dce:	633a      	str	r2, [r7, #48]	; 0x30
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e3      	bne.n	8005daa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0310 	bic.w	r3, r3, #16
 8005e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e14:	61fa      	str	r2, [r7, #28]
 8005e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	69b9      	ldr	r1, [r7, #24]
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	617b      	str	r3, [r7, #20]
   return(result);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e3      	bne.n	8005df0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f848 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e34:	e023      	b.n	8005e7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <HAL_UART_IRQHandler+0x4ea>
 8005e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fad5 	bl	80063fe <UART_Transmit_IT>
    return;
 8005e54:	e014      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00e      	beq.n	8005e80 <HAL_UART_IRQHandler+0x514>
 8005e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fb15 	bl	800649e <UART_EndTransmit_IT>
    return;
 8005e74:	e004      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
    return;
 8005e76:	bf00      	nop
 8005e78:	e002      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
      return;
 8005e7a:	bf00      	nop
 8005e7c:	e000      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
      return;
 8005e7e:	bf00      	nop
  }
}
 8005e80:	37e8      	adds	r7, #232	; 0xe8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop

08005e88 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b090      	sub	sp, #64	; 0x40
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d137      	bne.n	8005f68 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efa:	2200      	movs	r2, #0
 8005efc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3314      	adds	r3, #20
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f14:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3314      	adds	r3, #20
 8005f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f1e:	633a      	str	r2, [r7, #48]	; 0x30
 8005f20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e5      	bne.n	8005efe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	330c      	adds	r3, #12
 8005f38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f48:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	330c      	adds	r3, #12
 8005f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f52:	61fa      	str	r2, [r7, #28]
 8005f54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	69b9      	ldr	r1, [r7, #24]
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	617b      	str	r3, [r7, #20]
   return(result);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e5      	bne.n	8005f32 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f66:	e002      	b.n	8005f6e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005f68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005f6a:	f7fb fb49 	bl	8001600 <HAL_UART_TxCpltCallback>
}
 8005f6e:	bf00      	nop
 8005f70:	3740      	adds	r7, #64	; 0x40
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff ff7f 	bl	8005e88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f8a:	bf00      	nop
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b09c      	sub	sp, #112	; 0x70
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d172      	bne.n	8006094 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fca:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e5      	bne.n	8005fb4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffa:	f023 0301 	bic.w	r3, r3, #1
 8005ffe:	667b      	str	r3, [r7, #100]	; 0x64
 8006000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3314      	adds	r3, #20
 8006006:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006008:	647a      	str	r2, [r7, #68]	; 0x44
 800600a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800600e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e5      	bne.n	8005fe8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800601c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3314      	adds	r3, #20
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	623b      	str	r3, [r7, #32]
   return(result);
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006032:	663b      	str	r3, [r7, #96]	; 0x60
 8006034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3314      	adds	r3, #20
 800603a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800603c:	633a      	str	r2, [r7, #48]	; 0x30
 800603e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e5      	bne.n	800601c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	2b01      	cmp	r3, #1
 800605e:	d119      	bne.n	8006094 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	330c      	adds	r3, #12
 8006066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0310 	bic.w	r3, r3, #16
 8006076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006080:	61fa      	str	r2, [r7, #28]
 8006082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	69b9      	ldr	r1, [r7, #24]
 8006086:	69fa      	ldr	r2, [r7, #28]
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	617b      	str	r3, [r7, #20]
   return(result);
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e5      	bne.n	8006060 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	2b01      	cmp	r3, #1
 800609a:	d106      	bne.n	80060aa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800609c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060a0:	4619      	mov	r1, r3
 80060a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80060a4:	f7ff ff0e 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060a8:	e002      	b.n	80060b0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80060aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80060ac:	f7fb faba 	bl	8001624 <HAL_UART_RxCpltCallback>
}
 80060b0:	bf00      	nop
 80060b2:	3770      	adds	r7, #112	; 0x70
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d108      	bne.n	80060e0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	4619      	mov	r1, r3
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff fef3 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060de:	e002      	b.n	80060e6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f7ff fedb 	bl	8005e9c <HAL_UART_RxHalfCpltCallback>
}
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610a:	2b80      	cmp	r3, #128	; 0x80
 800610c:	bf0c      	ite	eq
 800610e:	2301      	moveq	r3, #1
 8006110:	2300      	movne	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b21      	cmp	r3, #33	; 0x21
 8006120:	d108      	bne.n	8006134 <UART_DMAError+0x46>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2200      	movs	r2, #0
 800612c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800612e:	68b8      	ldr	r0, [r7, #8]
 8006130:	f000 f8c6 	bl	80062c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	bf0c      	ite	eq
 8006142:	2301      	moveq	r3, #1
 8006144:	2300      	movne	r3, #0
 8006146:	b2db      	uxtb	r3, r3
 8006148:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b22      	cmp	r3, #34	; 0x22
 8006154:	d108      	bne.n	8006168 <UART_DMAError+0x7a>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2200      	movs	r2, #0
 8006160:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006162:	68b8      	ldr	r0, [r7, #8]
 8006164:	f000 f8d4 	bl	8006310 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	f043 0210 	orr.w	r2, r3, #16
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006174:	68b8      	ldr	r0, [r7, #8]
 8006176:	f7ff fe9b 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b098      	sub	sp, #96	; 0x60
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	88fa      	ldrh	r2, [r7, #6]
 800619c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2222      	movs	r2, #34	; 0x22
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b0:	4a40      	ldr	r2, [pc, #256]	; (80062b4 <UART_Start_Receive_DMA+0x130>)
 80061b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b8:	4a3f      	ldr	r2, [pc, #252]	; (80062b8 <UART_Start_Receive_DMA+0x134>)
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	4a3e      	ldr	r2, [pc, #248]	; (80062bc <UART_Start_Receive_DMA+0x138>)
 80061c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	2200      	movs	r2, #0
 80061ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80061cc:	f107 0308 	add.w	r3, r7, #8
 80061d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3304      	adds	r3, #4
 80061dc:	4619      	mov	r1, r3
 80061de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	88fb      	ldrh	r3, [r7, #6]
 80061e4:	f7fd f954 	bl	8003490 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80061e8:	2300      	movs	r3, #0
 80061ea:	613b      	str	r3, [r7, #16]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	613b      	str	r3, [r7, #16]
 80061fc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d019      	beq.n	8006242 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	330c      	adds	r3, #12
 8006214:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800621e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006224:	65bb      	str	r3, [r7, #88]	; 0x58
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	330c      	adds	r3, #12
 800622c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800622e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006230:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800623c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e5      	bne.n	800620e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3314      	adds	r3, #20
 8006248:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	f043 0301 	orr.w	r3, r3, #1
 8006258:	657b      	str	r3, [r7, #84]	; 0x54
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3314      	adds	r3, #20
 8006260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006262:	63ba      	str	r2, [r7, #56]	; 0x38
 8006264:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e5      	bne.n	8006242 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3314      	adds	r3, #20
 800627c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	617b      	str	r3, [r7, #20]
   return(result);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800628c:	653b      	str	r3, [r7, #80]	; 0x50
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3314      	adds	r3, #20
 8006294:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006296:	627a      	str	r2, [r7, #36]	; 0x24
 8006298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	6a39      	ldr	r1, [r7, #32]
 800629c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e5      	bne.n	8006276 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3760      	adds	r7, #96	; 0x60
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	08005f93 	.word	0x08005f93
 80062b8:	080060b9 	.word	0x080060b9
 80062bc:	080060ef 	.word	0x080060ef

080062c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b089      	sub	sp, #36	; 0x24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	330c      	adds	r3, #12
 80062ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	330c      	adds	r3, #12
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	61ba      	str	r2, [r7, #24]
 80062ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6979      	ldr	r1, [r7, #20]
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	613b      	str	r3, [r7, #16]
   return(result);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e5      	bne.n	80062c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006304:	bf00      	nop
 8006306:	3724      	adds	r7, #36	; 0x24
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b095      	sub	sp, #84	; 0x54
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800632e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	330c      	adds	r3, #12
 8006336:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006338:	643a      	str	r2, [r7, #64]	; 0x40
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800633e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e5      	bne.n	8006318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3314      	adds	r3, #20
 8006352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	61fb      	str	r3, [r7, #28]
   return(result);
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	64bb      	str	r3, [r7, #72]	; 0x48
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3314      	adds	r3, #20
 800636a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800636c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006374:	e841 2300 	strex	r3, r2, [r1]
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e5      	bne.n	800634c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	2b01      	cmp	r3, #1
 8006386:	d119      	bne.n	80063bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	330c      	adds	r3, #12
 800638e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	60bb      	str	r3, [r7, #8]
   return(result);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f023 0310 	bic.w	r3, r3, #16
 800639e:	647b      	str	r3, [r7, #68]	; 0x44
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063a8:	61ba      	str	r2, [r7, #24]
 80063aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6979      	ldr	r1, [r7, #20]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	613b      	str	r3, [r7, #16]
   return(result);
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e5      	bne.n	8006388 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063ca:	bf00      	nop
 80063cc:	3754      	adds	r7, #84	; 0x54
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f7ff fd5d 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063f6:	bf00      	nop
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b21      	cmp	r3, #33	; 0x21
 8006410:	d13e      	bne.n	8006490 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641a:	d114      	bne.n	8006446 <UART_Transmit_IT+0x48>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d110      	bne.n	8006446 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006438:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	1c9a      	adds	r2, r3, #2
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	621a      	str	r2, [r3, #32]
 8006444:	e008      	b.n	8006458 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	1c59      	adds	r1, r3, #1
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6211      	str	r1, [r2, #32]
 8006450:	781a      	ldrb	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	b29b      	uxth	r3, r3
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	4619      	mov	r1, r3
 8006466:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10f      	bne.n	800648c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800647a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800648a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	e000      	b.n	8006492 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006490:	2302      	movs	r3, #2
  }
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fb f89e 	bl	8001600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b08c      	sub	sp, #48	; 0x30
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b22      	cmp	r3, #34	; 0x22
 80064e0:	f040 80ab 	bne.w	800663a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ec:	d117      	bne.n	800651e <UART_Receive_IT+0x50>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d113      	bne.n	800651e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650c:	b29a      	uxth	r2, r3
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	1c9a      	adds	r2, r3, #2
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	629a      	str	r2, [r3, #40]	; 0x28
 800651c:	e026      	b.n	800656c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006524:	2300      	movs	r3, #0
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006530:	d007      	beq.n	8006542 <UART_Receive_IT+0x74>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <UART_Receive_IT+0x82>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	e008      	b.n	8006562 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800655c:	b2da      	uxtb	r2, r3
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006560:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29b      	uxth	r3, r3
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	4619      	mov	r1, r3
 800657a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800657c:	2b00      	cmp	r3, #0
 800657e:	d15a      	bne.n	8006636 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0220 	bic.w	r2, r2, #32
 800658e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800659e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695a      	ldr	r2, [r3, #20]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0201 	bic.w	r2, r2, #1
 80065ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d135      	bne.n	800662c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	330c      	adds	r3, #12
 80065cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	613b      	str	r3, [r7, #16]
   return(result);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f023 0310 	bic.w	r3, r3, #16
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	330c      	adds	r3, #12
 80065e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e6:	623a      	str	r2, [r7, #32]
 80065e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ea:	69f9      	ldr	r1, [r7, #28]
 80065ec:	6a3a      	ldr	r2, [r7, #32]
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e5      	bne.n	80065c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0310 	and.w	r3, r3, #16
 8006604:	2b10      	cmp	r3, #16
 8006606:	d10a      	bne.n	800661e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006608:	2300      	movs	r3, #0
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff fc4d 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
 800662a:	e002      	b.n	8006632 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7fa fff9 	bl	8001624 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	e002      	b.n	800663c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	e000      	b.n	800663c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800663a:	2302      	movs	r3, #2
  }
}
 800663c:	4618      	mov	r0, r3
 800663e:	3730      	adds	r7, #48	; 0x30
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006648:	b0c0      	sub	sp, #256	; 0x100
 800664a:	af00      	add	r7, sp, #0
 800664c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006660:	68d9      	ldr	r1, [r3, #12]
 8006662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	ea40 0301 	orr.w	r3, r0, r1
 800666c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800666e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	431a      	orrs	r2, r3
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	431a      	orrs	r2, r3
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	4313      	orrs	r3, r2
 800668c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800669c:	f021 010c 	bic.w	r1, r1, #12
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066aa:	430b      	orrs	r3, r1
 80066ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066be:	6999      	ldr	r1, [r3, #24]
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	ea40 0301 	orr.w	r3, r0, r1
 80066ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	4b8f      	ldr	r3, [pc, #572]	; (8006910 <UART_SetConfig+0x2cc>)
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d005      	beq.n	80066e4 <UART_SetConfig+0xa0>
 80066d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	4b8d      	ldr	r3, [pc, #564]	; (8006914 <UART_SetConfig+0x2d0>)
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d104      	bne.n	80066ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066e4:	f7fe f83c 	bl	8004760 <HAL_RCC_GetPCLK2Freq>
 80066e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066ec:	e003      	b.n	80066f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066ee:	f7fe f823 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 80066f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006700:	f040 810c 	bne.w	800691c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006708:	2200      	movs	r2, #0
 800670a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800670e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006712:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006716:	4622      	mov	r2, r4
 8006718:	462b      	mov	r3, r5
 800671a:	1891      	adds	r1, r2, r2
 800671c:	65b9      	str	r1, [r7, #88]	; 0x58
 800671e:	415b      	adcs	r3, r3
 8006720:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006722:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006726:	4621      	mov	r1, r4
 8006728:	eb12 0801 	adds.w	r8, r2, r1
 800672c:	4629      	mov	r1, r5
 800672e:	eb43 0901 	adc.w	r9, r3, r1
 8006732:	f04f 0200 	mov.w	r2, #0
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800673e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006746:	4690      	mov	r8, r2
 8006748:	4699      	mov	r9, r3
 800674a:	4623      	mov	r3, r4
 800674c:	eb18 0303 	adds.w	r3, r8, r3
 8006750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006754:	462b      	mov	r3, r5
 8006756:	eb49 0303 	adc.w	r3, r9, r3
 800675a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800675e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800676a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800676e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006772:	460b      	mov	r3, r1
 8006774:	18db      	adds	r3, r3, r3
 8006776:	653b      	str	r3, [r7, #80]	; 0x50
 8006778:	4613      	mov	r3, r2
 800677a:	eb42 0303 	adc.w	r3, r2, r3
 800677e:	657b      	str	r3, [r7, #84]	; 0x54
 8006780:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006784:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006788:	f7f9 fd32 	bl	80001f0 <__aeabi_uldivmod>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4b61      	ldr	r3, [pc, #388]	; (8006918 <UART_SetConfig+0x2d4>)
 8006792:	fba3 2302 	umull	r2, r3, r3, r2
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	011c      	lsls	r4, r3, #4
 800679a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067ac:	4642      	mov	r2, r8
 80067ae:	464b      	mov	r3, r9
 80067b0:	1891      	adds	r1, r2, r2
 80067b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80067b4:	415b      	adcs	r3, r3
 80067b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067bc:	4641      	mov	r1, r8
 80067be:	eb12 0a01 	adds.w	sl, r2, r1
 80067c2:	4649      	mov	r1, r9
 80067c4:	eb43 0b01 	adc.w	fp, r3, r1
 80067c8:	f04f 0200 	mov.w	r2, #0
 80067cc:	f04f 0300 	mov.w	r3, #0
 80067d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067dc:	4692      	mov	sl, r2
 80067de:	469b      	mov	fp, r3
 80067e0:	4643      	mov	r3, r8
 80067e2:	eb1a 0303 	adds.w	r3, sl, r3
 80067e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067ea:	464b      	mov	r3, r9
 80067ec:	eb4b 0303 	adc.w	r3, fp, r3
 80067f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006800:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006804:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006808:	460b      	mov	r3, r1
 800680a:	18db      	adds	r3, r3, r3
 800680c:	643b      	str	r3, [r7, #64]	; 0x40
 800680e:	4613      	mov	r3, r2
 8006810:	eb42 0303 	adc.w	r3, r2, r3
 8006814:	647b      	str	r3, [r7, #68]	; 0x44
 8006816:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800681a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800681e:	f7f9 fce7 	bl	80001f0 <__aeabi_uldivmod>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4611      	mov	r1, r2
 8006828:	4b3b      	ldr	r3, [pc, #236]	; (8006918 <UART_SetConfig+0x2d4>)
 800682a:	fba3 2301 	umull	r2, r3, r3, r1
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	2264      	movs	r2, #100	; 0x64
 8006832:	fb02 f303 	mul.w	r3, r2, r3
 8006836:	1acb      	subs	r3, r1, r3
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800683e:	4b36      	ldr	r3, [pc, #216]	; (8006918 <UART_SetConfig+0x2d4>)
 8006840:	fba3 2302 	umull	r2, r3, r3, r2
 8006844:	095b      	lsrs	r3, r3, #5
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800684c:	441c      	add	r4, r3
 800684e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006852:	2200      	movs	r2, #0
 8006854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006858:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800685c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006860:	4642      	mov	r2, r8
 8006862:	464b      	mov	r3, r9
 8006864:	1891      	adds	r1, r2, r2
 8006866:	63b9      	str	r1, [r7, #56]	; 0x38
 8006868:	415b      	adcs	r3, r3
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800686c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006870:	4641      	mov	r1, r8
 8006872:	1851      	adds	r1, r2, r1
 8006874:	6339      	str	r1, [r7, #48]	; 0x30
 8006876:	4649      	mov	r1, r9
 8006878:	414b      	adcs	r3, r1
 800687a:	637b      	str	r3, [r7, #52]	; 0x34
 800687c:	f04f 0200 	mov.w	r2, #0
 8006880:	f04f 0300 	mov.w	r3, #0
 8006884:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006888:	4659      	mov	r1, fp
 800688a:	00cb      	lsls	r3, r1, #3
 800688c:	4651      	mov	r1, sl
 800688e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006892:	4651      	mov	r1, sl
 8006894:	00ca      	lsls	r2, r1, #3
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	4603      	mov	r3, r0
 800689c:	4642      	mov	r2, r8
 800689e:	189b      	adds	r3, r3, r2
 80068a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068a4:	464b      	mov	r3, r9
 80068a6:	460a      	mov	r2, r1
 80068a8:	eb42 0303 	adc.w	r3, r2, r3
 80068ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068c4:	460b      	mov	r3, r1
 80068c6:	18db      	adds	r3, r3, r3
 80068c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ca:	4613      	mov	r3, r2
 80068cc:	eb42 0303 	adc.w	r3, r2, r3
 80068d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068da:	f7f9 fc89 	bl	80001f0 <__aeabi_uldivmod>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	4b0d      	ldr	r3, [pc, #52]	; (8006918 <UART_SetConfig+0x2d4>)
 80068e4:	fba3 1302 	umull	r1, r3, r3, r2
 80068e8:	095b      	lsrs	r3, r3, #5
 80068ea:	2164      	movs	r1, #100	; 0x64
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	3332      	adds	r3, #50	; 0x32
 80068f6:	4a08      	ldr	r2, [pc, #32]	; (8006918 <UART_SetConfig+0x2d4>)
 80068f8:	fba2 2303 	umull	r2, r3, r2, r3
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	f003 0207 	and.w	r2, r3, #7
 8006902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4422      	add	r2, r4
 800690a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800690c:	e105      	b.n	8006b1a <UART_SetConfig+0x4d6>
 800690e:	bf00      	nop
 8006910:	40011000 	.word	0x40011000
 8006914:	40011400 	.word	0x40011400
 8006918:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800691c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006920:	2200      	movs	r2, #0
 8006922:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006926:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800692a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800692e:	4642      	mov	r2, r8
 8006930:	464b      	mov	r3, r9
 8006932:	1891      	adds	r1, r2, r2
 8006934:	6239      	str	r1, [r7, #32]
 8006936:	415b      	adcs	r3, r3
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
 800693a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800693e:	4641      	mov	r1, r8
 8006940:	1854      	adds	r4, r2, r1
 8006942:	4649      	mov	r1, r9
 8006944:	eb43 0501 	adc.w	r5, r3, r1
 8006948:	f04f 0200 	mov.w	r2, #0
 800694c:	f04f 0300 	mov.w	r3, #0
 8006950:	00eb      	lsls	r3, r5, #3
 8006952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006956:	00e2      	lsls	r2, r4, #3
 8006958:	4614      	mov	r4, r2
 800695a:	461d      	mov	r5, r3
 800695c:	4643      	mov	r3, r8
 800695e:	18e3      	adds	r3, r4, r3
 8006960:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006964:	464b      	mov	r3, r9
 8006966:	eb45 0303 	adc.w	r3, r5, r3
 800696a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800696e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800697a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800698a:	4629      	mov	r1, r5
 800698c:	008b      	lsls	r3, r1, #2
 800698e:	4621      	mov	r1, r4
 8006990:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006994:	4621      	mov	r1, r4
 8006996:	008a      	lsls	r2, r1, #2
 8006998:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800699c:	f7f9 fc28 	bl	80001f0 <__aeabi_uldivmod>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4b60      	ldr	r3, [pc, #384]	; (8006b28 <UART_SetConfig+0x4e4>)
 80069a6:	fba3 2302 	umull	r2, r3, r3, r2
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	011c      	lsls	r4, r3, #4
 80069ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069c0:	4642      	mov	r2, r8
 80069c2:	464b      	mov	r3, r9
 80069c4:	1891      	adds	r1, r2, r2
 80069c6:	61b9      	str	r1, [r7, #24]
 80069c8:	415b      	adcs	r3, r3
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069d0:	4641      	mov	r1, r8
 80069d2:	1851      	adds	r1, r2, r1
 80069d4:	6139      	str	r1, [r7, #16]
 80069d6:	4649      	mov	r1, r9
 80069d8:	414b      	adcs	r3, r1
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069e8:	4659      	mov	r1, fp
 80069ea:	00cb      	lsls	r3, r1, #3
 80069ec:	4651      	mov	r1, sl
 80069ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069f2:	4651      	mov	r1, sl
 80069f4:	00ca      	lsls	r2, r1, #3
 80069f6:	4610      	mov	r0, r2
 80069f8:	4619      	mov	r1, r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	4642      	mov	r2, r8
 80069fe:	189b      	adds	r3, r3, r2
 8006a00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a04:	464b      	mov	r3, r9
 8006a06:	460a      	mov	r2, r1
 8006a08:	eb42 0303 	adc.w	r3, r2, r3
 8006a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a28:	4649      	mov	r1, r9
 8006a2a:	008b      	lsls	r3, r1, #2
 8006a2c:	4641      	mov	r1, r8
 8006a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a32:	4641      	mov	r1, r8
 8006a34:	008a      	lsls	r2, r1, #2
 8006a36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a3a:	f7f9 fbd9 	bl	80001f0 <__aeabi_uldivmod>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	4b39      	ldr	r3, [pc, #228]	; (8006b28 <UART_SetConfig+0x4e4>)
 8006a44:	fba3 1302 	umull	r1, r3, r3, r2
 8006a48:	095b      	lsrs	r3, r3, #5
 8006a4a:	2164      	movs	r1, #100	; 0x64
 8006a4c:	fb01 f303 	mul.w	r3, r1, r3
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	3332      	adds	r3, #50	; 0x32
 8006a56:	4a34      	ldr	r2, [pc, #208]	; (8006b28 <UART_SetConfig+0x4e4>)
 8006a58:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5c:	095b      	lsrs	r3, r3, #5
 8006a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a62:	441c      	add	r4, r3
 8006a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a68:	2200      	movs	r2, #0
 8006a6a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a6c:	677a      	str	r2, [r7, #116]	; 0x74
 8006a6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a72:	4642      	mov	r2, r8
 8006a74:	464b      	mov	r3, r9
 8006a76:	1891      	adds	r1, r2, r2
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	415b      	adcs	r3, r3
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a82:	4641      	mov	r1, r8
 8006a84:	1851      	adds	r1, r2, r1
 8006a86:	6039      	str	r1, [r7, #0]
 8006a88:	4649      	mov	r1, r9
 8006a8a:	414b      	adcs	r3, r1
 8006a8c:	607b      	str	r3, [r7, #4]
 8006a8e:	f04f 0200 	mov.w	r2, #0
 8006a92:	f04f 0300 	mov.w	r3, #0
 8006a96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a9a:	4659      	mov	r1, fp
 8006a9c:	00cb      	lsls	r3, r1, #3
 8006a9e:	4651      	mov	r1, sl
 8006aa0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006aa4:	4651      	mov	r1, sl
 8006aa6:	00ca      	lsls	r2, r1, #3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4603      	mov	r3, r0
 8006aae:	4642      	mov	r2, r8
 8006ab0:	189b      	adds	r3, r3, r2
 8006ab2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ab4:	464b      	mov	r3, r9
 8006ab6:	460a      	mov	r2, r1
 8006ab8:	eb42 0303 	adc.w	r3, r2, r3
 8006abc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ac8:	667a      	str	r2, [r7, #100]	; 0x64
 8006aca:	f04f 0200 	mov.w	r2, #0
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	008b      	lsls	r3, r1, #2
 8006ada:	4641      	mov	r1, r8
 8006adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	008a      	lsls	r2, r1, #2
 8006ae4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ae8:	f7f9 fb82 	bl	80001f0 <__aeabi_uldivmod>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <UART_SetConfig+0x4e4>)
 8006af2:	fba3 1302 	umull	r1, r3, r3, r2
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	2164      	movs	r1, #100	; 0x64
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	3332      	adds	r3, #50	; 0x32
 8006b04:	4a08      	ldr	r2, [pc, #32]	; (8006b28 <UART_SetConfig+0x4e4>)
 8006b06:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	f003 020f 	and.w	r2, r3, #15
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4422      	add	r2, r4
 8006b18:	609a      	str	r2, [r3, #8]
}
 8006b1a:	bf00      	nop
 8006b1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b20:	46bd      	mov	sp, r7
 8006b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b26:	bf00      	nop
 8006b28:	51eb851f 	.word	0x51eb851f

08006b2c <__NVIC_SetPriority>:
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	db0a      	blt.n	8006b56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	490c      	ldr	r1, [pc, #48]	; (8006b78 <__NVIC_SetPriority+0x4c>)
 8006b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b4a:	0112      	lsls	r2, r2, #4
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	440b      	add	r3, r1
 8006b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006b54:	e00a      	b.n	8006b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	4908      	ldr	r1, [pc, #32]	; (8006b7c <__NVIC_SetPriority+0x50>)
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	3b04      	subs	r3, #4
 8006b64:	0112      	lsls	r2, r2, #4
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	440b      	add	r3, r1
 8006b6a:	761a      	strb	r2, [r3, #24]
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	e000e100 	.word	0xe000e100
 8006b7c:	e000ed00 	.word	0xe000ed00

08006b80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <SysTick_Handler+0x1c>)
 8006b86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006b88:	f001 fd28 	bl	80085dc <xTaskGetSchedulerState>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d001      	beq.n	8006b96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006b92:	f002 fb11 	bl	80091b8 <xPortSysTickHandler>
  }
}
 8006b96:	bf00      	nop
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	e000e010 	.word	0xe000e010

08006ba0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	f06f 0004 	mvn.w	r0, #4
 8006baa:	f7ff ffbf 	bl	8006b2c <__NVIC_SetPriority>
#endif
}
 8006bae:	bf00      	nop
 8006bb0:	bd80      	pop	{r7, pc}
	...

08006bb4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bba:	f3ef 8305 	mrs	r3, IPSR
 8006bbe:	603b      	str	r3, [r7, #0]
  return(result);
 8006bc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006bc6:	f06f 0305 	mvn.w	r3, #5
 8006bca:	607b      	str	r3, [r7, #4]
 8006bcc:	e00c      	b.n	8006be8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006bce:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <osKernelInitialize+0x44>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d105      	bne.n	8006be2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006bd6:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <osKernelInitialize+0x44>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	607b      	str	r3, [r7, #4]
 8006be0:	e002      	b.n	8006be8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006be2:	f04f 33ff 	mov.w	r3, #4294967295
 8006be6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006be8:	687b      	ldr	r3, [r7, #4]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	20000c30 	.word	0x20000c30

08006bfc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c02:	f3ef 8305 	mrs	r3, IPSR
 8006c06:	603b      	str	r3, [r7, #0]
  return(result);
 8006c08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006c0e:	f06f 0305 	mvn.w	r3, #5
 8006c12:	607b      	str	r3, [r7, #4]
 8006c14:	e010      	b.n	8006c38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c16:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <osKernelStart+0x48>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d109      	bne.n	8006c32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c1e:	f7ff ffbf 	bl	8006ba0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c22:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <osKernelStart+0x48>)
 8006c24:	2202      	movs	r2, #2
 8006c26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c28:	f001 f87c 	bl	8007d24 <vTaskStartScheduler>
      stat = osOK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	607b      	str	r3, [r7, #4]
 8006c30:	e002      	b.n	8006c38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006c32:	f04f 33ff 	mov.w	r3, #4294967295
 8006c36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c38:	687b      	ldr	r3, [r7, #4]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000c30 	.word	0x20000c30

08006c48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08e      	sub	sp, #56	; 0x38
 8006c4c:	af04      	add	r7, sp, #16
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c58:	f3ef 8305 	mrs	r3, IPSR
 8006c5c:	617b      	str	r3, [r7, #20]
  return(result);
 8006c5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d17e      	bne.n	8006d62 <osThreadNew+0x11a>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d07b      	beq.n	8006d62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006c6a:	2380      	movs	r3, #128	; 0x80
 8006c6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006c6e:	2318      	movs	r3, #24
 8006c70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006c76:	f04f 33ff 	mov.w	r3, #4294967295
 8006c7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d045      	beq.n	8006d0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <osThreadNew+0x48>
        name = attr->name;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d008      	beq.n	8006cb6 <osThreadNew+0x6e>
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2b38      	cmp	r3, #56	; 0x38
 8006ca8:	d805      	bhi.n	8006cb6 <osThreadNew+0x6e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <osThreadNew+0x72>
        return (NULL);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e054      	b.n	8006d64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00e      	beq.n	8006cf0 <osThreadNew+0xa8>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2bbb      	cmp	r3, #187	; 0xbb
 8006cd8:	d90a      	bls.n	8006cf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d006      	beq.n	8006cf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <osThreadNew+0xa8>
        mem = 1;
 8006cea:	2301      	movs	r3, #1
 8006cec:	61bb      	str	r3, [r7, #24]
 8006cee:	e010      	b.n	8006d12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10c      	bne.n	8006d12 <osThreadNew+0xca>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d108      	bne.n	8006d12 <osThreadNew+0xca>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <osThreadNew+0xca>
          mem = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	e001      	b.n	8006d12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d110      	bne.n	8006d3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d20:	9202      	str	r2, [sp, #8]
 8006d22:	9301      	str	r3, [sp, #4]
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 fe0c 	bl	800794c <xTaskCreateStatic>
 8006d34:	4603      	mov	r3, r0
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	e013      	b.n	8006d62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d110      	bne.n	8006d62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	f107 0310 	add.w	r3, r7, #16
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 fe57 	bl	8007a06 <xTaskCreate>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d001      	beq.n	8006d62 <osThreadNew+0x11a>
            hTask = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d62:	693b      	ldr	r3, [r7, #16]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3728      	adds	r7, #40	; 0x28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d74:	f3ef 8305 	mrs	r3, IPSR
 8006d78:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <osDelay+0x1c>
    stat = osErrorISR;
 8006d80:	f06f 0305 	mvn.w	r3, #5
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	e007      	b.n	8006d98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 ff92 	bl	8007cbc <vTaskDelay>
    }
  }

  return (stat);
 8006d98:	68fb      	ldr	r3, [r7, #12]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a07      	ldr	r2, [pc, #28]	; (8006dd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006db4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4a06      	ldr	r2, [pc, #24]	; (8006dd4 <vApplicationGetIdleTaskMemory+0x30>)
 8006dba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2280      	movs	r2, #128	; 0x80
 8006dc0:	601a      	str	r2, [r3, #0]
}
 8006dc2:	bf00      	nop
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	20000c34 	.word	0x20000c34
 8006dd4:	20000cf0 	.word	0x20000cf0

08006dd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a07      	ldr	r2, [pc, #28]	; (8006e04 <vApplicationGetTimerTaskMemory+0x2c>)
 8006de8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	4a06      	ldr	r2, [pc, #24]	; (8006e08 <vApplicationGetTimerTaskMemory+0x30>)
 8006dee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006df6:	601a      	str	r2, [r3, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	20000ef0 	.word	0x20000ef0
 8006e08:	20000fac 	.word	0x20000fac

08006e0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f103 0208 	add.w	r2, r3, #8
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f04f 32ff 	mov.w	r2, #4294967295
 8006e24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f103 0208 	add.w	r2, r3, #8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f103 0208 	add.w	r2, r3, #8
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e66:	b480      	push	{r7}
 8006e68:	b085      	sub	sp, #20
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]
}
 8006ea2:	bf00      	nop
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b085      	sub	sp, #20
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec4:	d103      	bne.n	8006ece <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	e00c      	b.n	8006ee8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	e002      	b.n	8006edc <vListInsert+0x2e>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d2f6      	bcs.n	8006ed6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	601a      	str	r2, [r3, #0]
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6892      	ldr	r2, [r2, #8]
 8006f36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6852      	ldr	r2, [r2, #4]
 8006f40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d103      	bne.n	8006f54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	1e5a      	subs	r2, r3, #1
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f9e:	f002 f879 	bl	8009094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006faa:	68f9      	ldr	r1, [r7, #12]
 8006fac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fae:	fb01 f303 	mul.w	r3, r1, r3
 8006fb2:	441a      	add	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	68f9      	ldr	r1, [r7, #12]
 8006fd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fd4:	fb01 f303 	mul.w	r3, r1, r3
 8006fd8:	441a      	add	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	22ff      	movs	r2, #255	; 0xff
 8006fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	22ff      	movs	r2, #255	; 0xff
 8006fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d114      	bne.n	800701e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01a      	beq.n	8007032 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3310      	adds	r3, #16
 8007000:	4618      	mov	r0, r3
 8007002:	f001 f929 	bl	8008258 <xTaskRemoveFromEventList>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d012      	beq.n	8007032 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800700c:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <xQueueGenericReset+0xcc>)
 800700e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	e009      	b.n	8007032 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3310      	adds	r3, #16
 8007022:	4618      	mov	r0, r3
 8007024:	f7ff fef2 	bl	8006e0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3324      	adds	r3, #36	; 0x24
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff feed 	bl	8006e0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007032:	f002 f85f 	bl	80090f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007036:	2301      	movs	r3, #1
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	e000ed04 	.word	0xe000ed04

08007044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08e      	sub	sp, #56	; 0x38
 8007048:	af02      	add	r7, sp, #8
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800706a:	bf00      	nop
 800706c:	e7fe      	b.n	800706c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <xQueueGenericCreateStatic+0x52>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <xQueueGenericCreateStatic+0x56>
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <xQueueGenericCreateStatic+0x58>
 800709a:	2300      	movs	r3, #0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10a      	bne.n	80070b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	623b      	str	r3, [r7, #32]
}
 80070b2:	bf00      	nop
 80070b4:	e7fe      	b.n	80070b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <xQueueGenericCreateStatic+0x7e>
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <xQueueGenericCreateStatic+0x82>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <xQueueGenericCreateStatic+0x84>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	61fb      	str	r3, [r7, #28]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80070e2:	2350      	movs	r3, #80	; 0x50
 80070e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b50      	cmp	r3, #80	; 0x50
 80070ea:	d00a      	beq.n	8007102 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	61bb      	str	r3, [r7, #24]
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007102:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00d      	beq.n	800712a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007116:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	4613      	mov	r3, r2
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f805 	bl	8007134 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800712c:	4618      	mov	r0, r3
 800712e:	3730      	adds	r7, #48	; 0x30
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d103      	bne.n	8007150 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	e002      	b.n	8007156 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007162:	2101      	movs	r1, #1
 8007164:	69b8      	ldr	r0, [r7, #24]
 8007166:	f7ff ff05 	bl	8006f74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	78fa      	ldrb	r2, [r7, #3]
 800716e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08e      	sub	sp, #56	; 0x38
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800718a:	2300      	movs	r3, #0
 800718c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10a      	bne.n	80071ae <xQueueGenericSend+0x32>
	__asm volatile
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071aa:	bf00      	nop
 80071ac:	e7fe      	b.n	80071ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d103      	bne.n	80071bc <xQueueGenericSend+0x40>
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <xQueueGenericSend+0x44>
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <xQueueGenericSend+0x46>
 80071c0:	2300      	movs	r3, #0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10a      	bne.n	80071dc <xQueueGenericSend+0x60>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071d8:	bf00      	nop
 80071da:	e7fe      	b.n	80071da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d103      	bne.n	80071ea <xQueueGenericSend+0x6e>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <xQueueGenericSend+0x72>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <xQueueGenericSend+0x74>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <xQueueGenericSend+0x8e>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	623b      	str	r3, [r7, #32]
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800720a:	f001 f9e7 	bl	80085dc <xTaskGetSchedulerState>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <xQueueGenericSend+0x9e>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <xQueueGenericSend+0xa2>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <xQueueGenericSend+0xa4>
 800721e:	2300      	movs	r3, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <xQueueGenericSend+0xbe>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	61fb      	str	r3, [r7, #28]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800723a:	f001 ff2b 	bl	8009094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	429a      	cmp	r2, r3
 8007248:	d302      	bcc.n	8007250 <xQueueGenericSend+0xd4>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d129      	bne.n	80072a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007256:	f000 fa0b 	bl	8007670 <prvCopyDataToQueue>
 800725a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	2b00      	cmp	r3, #0
 8007262:	d010      	beq.n	8007286 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007266:	3324      	adds	r3, #36	; 0x24
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fff5 	bl	8008258 <xTaskRemoveFromEventList>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d013      	beq.n	800729c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007274:	4b3f      	ldr	r3, [pc, #252]	; (8007374 <xQueueGenericSend+0x1f8>)
 8007276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	e00a      	b.n	800729c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d007      	beq.n	800729c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800728c:	4b39      	ldr	r3, [pc, #228]	; (8007374 <xQueueGenericSend+0x1f8>)
 800728e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800729c:	f001 ff2a 	bl	80090f4 <vPortExitCritical>
				return pdPASS;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e063      	b.n	800736c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072aa:	f001 ff23 	bl	80090f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	e05c      	b.n	800736c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d106      	bne.n	80072c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072b8:	f107 0314 	add.w	r3, r7, #20
 80072bc:	4618      	mov	r0, r3
 80072be:	f001 f82f 	bl	8008320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072c2:	2301      	movs	r3, #1
 80072c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072c6:	f001 ff15 	bl	80090f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072ca:	f000 fd9b 	bl	8007e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072ce:	f001 fee1 	bl	8009094 <vPortEnterCritical>
 80072d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072d8:	b25b      	sxtb	r3, r3
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072de:	d103      	bne.n	80072e8 <xQueueGenericSend+0x16c>
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072ee:	b25b      	sxtb	r3, r3
 80072f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f4:	d103      	bne.n	80072fe <xQueueGenericSend+0x182>
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072fe:	f001 fef9 	bl	80090f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007302:	1d3a      	adds	r2, r7, #4
 8007304:	f107 0314 	add.w	r3, r7, #20
 8007308:	4611      	mov	r1, r2
 800730a:	4618      	mov	r0, r3
 800730c:	f001 f81e 	bl	800834c <xTaskCheckForTimeOut>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d124      	bne.n	8007360 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007316:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007318:	f000 faa2 	bl	8007860 <prvIsQueueFull>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d018      	beq.n	8007354 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	3310      	adds	r3, #16
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	4611      	mov	r1, r2
 800732a:	4618      	mov	r0, r3
 800732c:	f000 ff44 	bl	80081b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007332:	f000 fa2d 	bl	8007790 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007336:	f000 fd73 	bl	8007e20 <xTaskResumeAll>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	f47f af7c 	bne.w	800723a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007342:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <xQueueGenericSend+0x1f8>)
 8007344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	e772      	b.n	800723a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007356:	f000 fa1b 	bl	8007790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800735a:	f000 fd61 	bl	8007e20 <xTaskResumeAll>
 800735e:	e76c      	b.n	800723a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007362:	f000 fa15 	bl	8007790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007366:	f000 fd5b 	bl	8007e20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800736a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800736c:	4618      	mov	r0, r3
 800736e:	3738      	adds	r7, #56	; 0x38
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	e000ed04 	.word	0xe000ed04

08007378 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b090      	sub	sp, #64	; 0x40
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10a      	bne.n	80073a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d103      	bne.n	80073b4 <xQueueGenericSendFromISR+0x3c>
 80073ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <xQueueGenericSendFromISR+0x40>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <xQueueGenericSendFromISR+0x42>
 80073b8:	2300      	movs	r3, #0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073d0:	bf00      	nop
 80073d2:	e7fe      	b.n	80073d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d103      	bne.n	80073e2 <xQueueGenericSendFromISR+0x6a>
 80073da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <xQueueGenericSendFromISR+0x6e>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <xQueueGenericSendFromISR+0x70>
 80073e6:	2300      	movs	r3, #0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	623b      	str	r3, [r7, #32]
}
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007402:	f001 ff29 	bl	8009258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007406:	f3ef 8211 	mrs	r2, BASEPRI
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	61fa      	str	r2, [r7, #28]
 800741c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800741e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007420:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742a:	429a      	cmp	r2, r3
 800742c:	d302      	bcc.n	8007434 <xQueueGenericSendFromISR+0xbc>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b02      	cmp	r3, #2
 8007432:	d12f      	bne.n	8007494 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800743a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007442:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	68b9      	ldr	r1, [r7, #8]
 8007448:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800744a:	f000 f911 	bl	8007670 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800744e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d112      	bne.n	800747e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	2b00      	cmp	r3, #0
 800745e:	d016      	beq.n	800748e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	3324      	adds	r3, #36	; 0x24
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fef7 	bl	8008258 <xTaskRemoveFromEventList>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00e      	beq.n	800748e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00b      	beq.n	800748e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e007      	b.n	800748e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800747e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007482:	3301      	adds	r3, #1
 8007484:	b2db      	uxtb	r3, r3
 8007486:	b25a      	sxtb	r2, r3
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800748e:	2301      	movs	r3, #1
 8007490:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007492:	e001      	b.n	8007498 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007494:	2300      	movs	r3, #0
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3740      	adds	r7, #64	; 0x40
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08c      	sub	sp, #48	; 0x30
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80074bc:	2300      	movs	r3, #0
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <xQueueReceive+0x30>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	623b      	str	r3, [r7, #32]
}
 80074dc:	bf00      	nop
 80074de:	e7fe      	b.n	80074de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <xQueueReceive+0x3e>
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <xQueueReceive+0x42>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <xQueueReceive+0x44>
 80074f2:	2300      	movs	r3, #0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <xQueueReceive+0x5e>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	61fb      	str	r3, [r7, #28]
}
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800750e:	f001 f865 	bl	80085dc <xTaskGetSchedulerState>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <xQueueReceive+0x6e>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <xQueueReceive+0x72>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <xQueueReceive+0x74>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <xQueueReceive+0x8e>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	61bb      	str	r3, [r7, #24]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800753e:	f001 fda9 	bl	8009094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d01f      	beq.n	800758e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007552:	f000 f8f7 	bl	8007744 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	1e5a      	subs	r2, r3, #1
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00f      	beq.n	8007586 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	3310      	adds	r3, #16
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fe74 	bl	8008258 <xTaskRemoveFromEventList>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d007      	beq.n	8007586 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007576:	4b3d      	ldr	r3, [pc, #244]	; (800766c <xQueueReceive+0x1bc>)
 8007578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007586:	f001 fdb5 	bl	80090f4 <vPortExitCritical>
				return pdPASS;
 800758a:	2301      	movs	r3, #1
 800758c:	e069      	b.n	8007662 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d103      	bne.n	800759c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007594:	f001 fdae 	bl	80090f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007598:	2300      	movs	r3, #0
 800759a:	e062      	b.n	8007662 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800759c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d106      	bne.n	80075b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075a2:	f107 0310 	add.w	r3, r7, #16
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 feba 	bl	8008320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075ac:	2301      	movs	r3, #1
 80075ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075b0:	f001 fda0 	bl	80090f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075b4:	f000 fc26 	bl	8007e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075b8:	f001 fd6c 	bl	8009094 <vPortEnterCritical>
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075c2:	b25b      	sxtb	r3, r3
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c8:	d103      	bne.n	80075d2 <xQueueReceive+0x122>
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075d8:	b25b      	sxtb	r3, r3
 80075da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075de:	d103      	bne.n	80075e8 <xQueueReceive+0x138>
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075e8:	f001 fd84 	bl	80090f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ec:	1d3a      	adds	r2, r7, #4
 80075ee:	f107 0310 	add.w	r3, r7, #16
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fea9 	bl	800834c <xTaskCheckForTimeOut>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d123      	bne.n	8007648 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007602:	f000 f917 	bl	8007834 <prvIsQueueEmpty>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d017      	beq.n	800763c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	3324      	adds	r3, #36	; 0x24
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fdcf 	bl	80081b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800761a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800761c:	f000 f8b8 	bl	8007790 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007620:	f000 fbfe 	bl	8007e20 <xTaskResumeAll>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d189      	bne.n	800753e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800762a:	4b10      	ldr	r3, [pc, #64]	; (800766c <xQueueReceive+0x1bc>)
 800762c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	e780      	b.n	800753e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800763c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800763e:	f000 f8a7 	bl	8007790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007642:	f000 fbed 	bl	8007e20 <xTaskResumeAll>
 8007646:	e77a      	b.n	800753e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800764a:	f000 f8a1 	bl	8007790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800764e:	f000 fbe7 	bl	8007e20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007654:	f000 f8ee 	bl	8007834 <prvIsQueueEmpty>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	f43f af6f 	beq.w	800753e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007662:	4618      	mov	r0, r3
 8007664:	3730      	adds	r7, #48	; 0x30
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	e000ed04 	.word	0xe000ed04

08007670 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007684:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10d      	bne.n	80076aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d14d      	bne.n	8007732 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	4618      	mov	r0, r3
 800769c:	f000 ffbc 	bl	8008618 <xTaskPriorityDisinherit>
 80076a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	609a      	str	r2, [r3, #8]
 80076a8:	e043      	b.n	8007732 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d119      	bne.n	80076e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6858      	ldr	r0, [r3, #4]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	461a      	mov	r2, r3
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	f002 f9ec 	bl	8009a98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c8:	441a      	add	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d32b      	bcc.n	8007732 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	605a      	str	r2, [r3, #4]
 80076e2:	e026      	b.n	8007732 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	68d8      	ldr	r0, [r3, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ec:	461a      	mov	r2, r3
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	f002 f9d2 	bl	8009a98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fc:	425b      	negs	r3, r3
 80076fe:	441a      	add	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	68da      	ldr	r2, [r3, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d207      	bcs.n	8007720 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007718:	425b      	negs	r3, r3
 800771a:	441a      	add	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d105      	bne.n	8007732 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	3b01      	subs	r3, #1
 8007730:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800773a:	697b      	ldr	r3, [r7, #20]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	d018      	beq.n	8007788 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	441a      	add	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	429a      	cmp	r2, r3
 800776e:	d303      	bcc.n	8007778 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68d9      	ldr	r1, [r3, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	461a      	mov	r2, r3
 8007782:	6838      	ldr	r0, [r7, #0]
 8007784:	f002 f988 	bl	8009a98 <memcpy>
	}
}
 8007788:	bf00      	nop
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007798:	f001 fc7c 	bl	8009094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077a4:	e011      	b.n	80077ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d012      	beq.n	80077d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3324      	adds	r3, #36	; 0x24
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 fd50 	bl	8008258 <xTaskRemoveFromEventList>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80077be:	f000 fe27 	bl	8008410 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	dce9      	bgt.n	80077a6 <prvUnlockQueue+0x16>
 80077d2:	e000      	b.n	80077d6 <prvUnlockQueue+0x46>
					break;
 80077d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	22ff      	movs	r2, #255	; 0xff
 80077da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80077de:	f001 fc89 	bl	80090f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80077e2:	f001 fc57 	bl	8009094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077ee:	e011      	b.n	8007814 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d012      	beq.n	800781e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3310      	adds	r3, #16
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 fd2b 	bl	8008258 <xTaskRemoveFromEventList>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007808:	f000 fe02 	bl	8008410 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	3b01      	subs	r3, #1
 8007810:	b2db      	uxtb	r3, r3
 8007812:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007818:	2b00      	cmp	r3, #0
 800781a:	dce9      	bgt.n	80077f0 <prvUnlockQueue+0x60>
 800781c:	e000      	b.n	8007820 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800781e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	22ff      	movs	r2, #255	; 0xff
 8007824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007828:	f001 fc64 	bl	80090f4 <vPortExitCritical>
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800783c:	f001 fc2a 	bl	8009094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007848:	2301      	movs	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e001      	b.n	8007852 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007852:	f001 fc4f 	bl	80090f4 <vPortExitCritical>

	return xReturn;
 8007856:	68fb      	ldr	r3, [r7, #12]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007868:	f001 fc14 	bl	8009094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007874:	429a      	cmp	r2, r3
 8007876:	d102      	bne.n	800787e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007878:	2301      	movs	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	e001      	b.n	8007882 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007882:	f001 fc37 	bl	80090f4 <vPortExitCritical>

	return xReturn;
 8007886:	68fb      	ldr	r3, [r7, #12]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	e014      	b.n	80078ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078a0:	4a0f      	ldr	r2, [pc, #60]	; (80078e0 <vQueueAddToRegistry+0x50>)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10b      	bne.n	80078c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80078ac:	490c      	ldr	r1, [pc, #48]	; (80078e0 <vQueueAddToRegistry+0x50>)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80078b6:	4a0a      	ldr	r2, [pc, #40]	; (80078e0 <vQueueAddToRegistry+0x50>)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	4413      	add	r3, r2
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80078c2:	e006      	b.n	80078d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3301      	adds	r3, #1
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b07      	cmp	r3, #7
 80078ce:	d9e7      	bls.n	80078a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80078d0:	bf00      	nop
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	200013ac 	.word	0x200013ac

080078e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078f4:	f001 fbce 	bl	8009094 <vPortEnterCritical>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078fe:	b25b      	sxtb	r3, r3
 8007900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007904:	d103      	bne.n	800790e <vQueueWaitForMessageRestricted+0x2a>
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007914:	b25b      	sxtb	r3, r3
 8007916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791a:	d103      	bne.n	8007924 <vQueueWaitForMessageRestricted+0x40>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007924:	f001 fbe6 	bl	80090f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	2b00      	cmp	r3, #0
 800792e:	d106      	bne.n	800793e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	3324      	adds	r3, #36	; 0x24
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fc61 	bl	8008200 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800793e:	6978      	ldr	r0, [r7, #20]
 8007940:	f7ff ff26 	bl	8007790 <prvUnlockQueue>
	}
 8007944:	bf00      	nop
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08e      	sub	sp, #56	; 0x38
 8007950:	af04      	add	r7, sp, #16
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	623b      	str	r3, [r7, #32]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <xTaskCreateStatic+0x46>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	61fb      	str	r3, [r7, #28]
}
 800798e:	bf00      	nop
 8007990:	e7fe      	b.n	8007990 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007992:	23bc      	movs	r3, #188	; 0xbc
 8007994:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2bbc      	cmp	r3, #188	; 0xbc
 800799a:	d00a      	beq.n	80079b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	61bb      	str	r3, [r7, #24]
}
 80079ae:	bf00      	nop
 80079b0:	e7fe      	b.n	80079b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01e      	beq.n	80079f8 <xTaskCreateStatic+0xac>
 80079ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01b      	beq.n	80079f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	2202      	movs	r2, #2
 80079ce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079d2:	2300      	movs	r3, #0
 80079d4:	9303      	str	r3, [sp, #12]
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	9302      	str	r3, [sp, #8]
 80079da:	f107 0314 	add.w	r3, r7, #20
 80079de:	9301      	str	r3, [sp, #4]
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 f850 	bl	8007a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079f2:	f000 f8f3 	bl	8007bdc <prvAddNewTaskToReadyList>
 80079f6:	e001      	b.n	80079fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079fc:	697b      	ldr	r3, [r7, #20]
	}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3728      	adds	r7, #40	; 0x28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b08c      	sub	sp, #48	; 0x30
 8007a0a:	af04      	add	r7, sp, #16
 8007a0c:	60f8      	str	r0, [r7, #12]
 8007a0e:	60b9      	str	r1, [r7, #8]
 8007a10:	603b      	str	r3, [r7, #0]
 8007a12:	4613      	mov	r3, r2
 8007a14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f001 fc5c 	bl	80092d8 <pvPortMalloc>
 8007a20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00e      	beq.n	8007a46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a28:	20bc      	movs	r0, #188	; 0xbc
 8007a2a:	f001 fc55 	bl	80092d8 <pvPortMalloc>
 8007a2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8007a3c:	e005      	b.n	8007a4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a3e:	6978      	ldr	r0, [r7, #20]
 8007a40:	f001 fd16 	bl	8009470 <vPortFree>
 8007a44:	e001      	b.n	8007a4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d017      	beq.n	8007a80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a58:	88fa      	ldrh	r2, [r7, #6]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9303      	str	r3, [sp, #12]
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	9302      	str	r3, [sp, #8]
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 f80e 	bl	8007a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a74:	69f8      	ldr	r0, [r7, #28]
 8007a76:	f000 f8b1 	bl	8007bdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	e002      	b.n	8007a86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a80:	f04f 33ff 	mov.w	r3, #4294967295
 8007a84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a86:	69bb      	ldr	r3, [r7, #24]
	}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3720      	adds	r7, #32
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	21a5      	movs	r1, #165	; 0xa5
 8007aaa:	f002 f81d 	bl	8009ae8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	f023 0307 	bic.w	r3, r3, #7
 8007ac6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	617b      	str	r3, [r7, #20]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d01f      	beq.n	8007b2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007aee:	2300      	movs	r3, #0
 8007af0:	61fb      	str	r3, [r7, #28]
 8007af2:	e012      	b.n	8007b1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	4413      	add	r3, r2
 8007afa:	7819      	ldrb	r1, [r3, #0]
 8007afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	4413      	add	r3, r2
 8007b02:	3334      	adds	r3, #52	; 0x34
 8007b04:	460a      	mov	r2, r1
 8007b06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d006      	beq.n	8007b22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	3301      	adds	r3, #1
 8007b18:	61fb      	str	r3, [r7, #28]
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	2b0f      	cmp	r3, #15
 8007b1e:	d9e9      	bls.n	8007af4 <prvInitialiseNewTask+0x64>
 8007b20:	e000      	b.n	8007b24 <prvInitialiseNewTask+0x94>
			{
				break;
 8007b22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b2c:	e003      	b.n	8007b36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	2b37      	cmp	r3, #55	; 0x37
 8007b3a:	d901      	bls.n	8007b40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b3c:	2337      	movs	r3, #55	; 0x37
 8007b3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	2200      	movs	r2, #0
 8007b50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	3304      	adds	r3, #4
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff f978 	bl	8006e4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	3318      	adds	r3, #24
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff f973 	bl	8006e4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8e:	3354      	adds	r3, #84	; 0x54
 8007b90:	2260      	movs	r2, #96	; 0x60
 8007b92:	2100      	movs	r1, #0
 8007b94:	4618      	mov	r0, r3
 8007b96:	f001 ffa7 	bl	8009ae8 <memset>
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	4a0c      	ldr	r2, [pc, #48]	; (8007bd0 <prvInitialiseNewTask+0x140>)
 8007b9e:	659a      	str	r2, [r3, #88]	; 0x58
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	4a0c      	ldr	r2, [pc, #48]	; (8007bd4 <prvInitialiseNewTask+0x144>)
 8007ba4:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	4a0b      	ldr	r2, [pc, #44]	; (8007bd8 <prvInitialiseNewTask+0x148>)
 8007baa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	68f9      	ldr	r1, [r7, #12]
 8007bb0:	69b8      	ldr	r0, [r7, #24]
 8007bb2:	f001 f941 	bl	8008e38 <pxPortInitialiseStack>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bc8:	bf00      	nop
 8007bca:	3720      	adds	r7, #32
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	0800a37c 	.word	0x0800a37c
 8007bd4:	0800a39c 	.word	0x0800a39c
 8007bd8:	0800a35c 	.word	0x0800a35c

08007bdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007be4:	f001 fa56 	bl	8009094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007be8:	4b2d      	ldr	r3, [pc, #180]	; (8007ca0 <prvAddNewTaskToReadyList+0xc4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3301      	adds	r3, #1
 8007bee:	4a2c      	ldr	r2, [pc, #176]	; (8007ca0 <prvAddNewTaskToReadyList+0xc4>)
 8007bf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007bf2:	4b2c      	ldr	r3, [pc, #176]	; (8007ca4 <prvAddNewTaskToReadyList+0xc8>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d109      	bne.n	8007c0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007bfa:	4a2a      	ldr	r2, [pc, #168]	; (8007ca4 <prvAddNewTaskToReadyList+0xc8>)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c00:	4b27      	ldr	r3, [pc, #156]	; (8007ca0 <prvAddNewTaskToReadyList+0xc4>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d110      	bne.n	8007c2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c08:	f000 fc26 	bl	8008458 <prvInitialiseTaskLists>
 8007c0c:	e00d      	b.n	8007c2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c0e:	4b26      	ldr	r3, [pc, #152]	; (8007ca8 <prvAddNewTaskToReadyList+0xcc>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c16:	4b23      	ldr	r3, [pc, #140]	; (8007ca4 <prvAddNewTaskToReadyList+0xc8>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d802      	bhi.n	8007c2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c24:	4a1f      	ldr	r2, [pc, #124]	; (8007ca4 <prvAddNewTaskToReadyList+0xc8>)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c2a:	4b20      	ldr	r3, [pc, #128]	; (8007cac <prvAddNewTaskToReadyList+0xd0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	4a1e      	ldr	r2, [pc, #120]	; (8007cac <prvAddNewTaskToReadyList+0xd0>)
 8007c32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c34:	4b1d      	ldr	r3, [pc, #116]	; (8007cac <prvAddNewTaskToReadyList+0xd0>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c40:	4b1b      	ldr	r3, [pc, #108]	; (8007cb0 <prvAddNewTaskToReadyList+0xd4>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d903      	bls.n	8007c50 <prvAddNewTaskToReadyList+0x74>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	4a18      	ldr	r2, [pc, #96]	; (8007cb0 <prvAddNewTaskToReadyList+0xd4>)
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4a15      	ldr	r2, [pc, #84]	; (8007cb4 <prvAddNewTaskToReadyList+0xd8>)
 8007c5e:	441a      	add	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3304      	adds	r3, #4
 8007c64:	4619      	mov	r1, r3
 8007c66:	4610      	mov	r0, r2
 8007c68:	f7ff f8fd 	bl	8006e66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c6c:	f001 fa42 	bl	80090f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c70:	4b0d      	ldr	r3, [pc, #52]	; (8007ca8 <prvAddNewTaskToReadyList+0xcc>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00e      	beq.n	8007c96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <prvAddNewTaskToReadyList+0xc8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d207      	bcs.n	8007c96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c86:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <prvAddNewTaskToReadyList+0xdc>)
 8007c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	200018c0 	.word	0x200018c0
 8007ca4:	200013ec 	.word	0x200013ec
 8007ca8:	200018cc 	.word	0x200018cc
 8007cac:	200018dc 	.word	0x200018dc
 8007cb0:	200018c8 	.word	0x200018c8
 8007cb4:	200013f0 	.word	0x200013f0
 8007cb8:	e000ed04 	.word	0xe000ed04

08007cbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d017      	beq.n	8007cfe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cce:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <vTaskDelay+0x60>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <vTaskDelay+0x30>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	60bb      	str	r3, [r7, #8]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007cec:	f000 f88a 	bl	8007e04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fcfe 	bl	80086f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007cf8:	f000 f892 	bl	8007e20 <xTaskResumeAll>
 8007cfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d107      	bne.n	8007d14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d04:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <vTaskDelay+0x64>)
 8007d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	200018e8 	.word	0x200018e8
 8007d20:	e000ed04 	.word	0xe000ed04

08007d24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	; 0x28
 8007d28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d32:	463a      	mov	r2, r7
 8007d34:	1d39      	adds	r1, r7, #4
 8007d36:	f107 0308 	add.w	r3, r7, #8
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff f832 	bl	8006da4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	9202      	str	r2, [sp, #8]
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	460a      	mov	r2, r1
 8007d52:	4924      	ldr	r1, [pc, #144]	; (8007de4 <vTaskStartScheduler+0xc0>)
 8007d54:	4824      	ldr	r0, [pc, #144]	; (8007de8 <vTaskStartScheduler+0xc4>)
 8007d56:	f7ff fdf9 	bl	800794c <xTaskCreateStatic>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	4a23      	ldr	r2, [pc, #140]	; (8007dec <vTaskStartScheduler+0xc8>)
 8007d5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d60:	4b22      	ldr	r3, [pc, #136]	; (8007dec <vTaskStartScheduler+0xc8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	e001      	b.n	8007d72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d102      	bne.n	8007d7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d78:	f000 fd10 	bl	800879c <xTimerCreateTimerTask>
 8007d7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d11b      	bne.n	8007dbc <vTaskStartScheduler+0x98>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	613b      	str	r3, [r7, #16]
}
 8007d96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d98:	4b15      	ldr	r3, [pc, #84]	; (8007df0 <vTaskStartScheduler+0xcc>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3354      	adds	r3, #84	; 0x54
 8007d9e:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <vTaskStartScheduler+0xd0>)
 8007da0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007da2:	4b15      	ldr	r3, [pc, #84]	; (8007df8 <vTaskStartScheduler+0xd4>)
 8007da4:	f04f 32ff 	mov.w	r2, #4294967295
 8007da8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007daa:	4b14      	ldr	r3, [pc, #80]	; (8007dfc <vTaskStartScheduler+0xd8>)
 8007dac:	2201      	movs	r2, #1
 8007dae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007db0:	4b13      	ldr	r3, [pc, #76]	; (8007e00 <vTaskStartScheduler+0xdc>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007db6:	f001 f8cb 	bl	8008f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007dba:	e00e      	b.n	8007dda <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc2:	d10a      	bne.n	8007dda <vTaskStartScheduler+0xb6>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	60fb      	str	r3, [r7, #12]
}
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <vTaskStartScheduler+0xb4>
}
 8007dda:	bf00      	nop
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	0800a0c8 	.word	0x0800a0c8
 8007de8:	08008429 	.word	0x08008429
 8007dec:	200018e4 	.word	0x200018e4
 8007df0:	200013ec 	.word	0x200013ec
 8007df4:	20000024 	.word	0x20000024
 8007df8:	200018e0 	.word	0x200018e0
 8007dfc:	200018cc 	.word	0x200018cc
 8007e00:	200018c4 	.word	0x200018c4

08007e04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e08:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <vTaskSuspendAll+0x18>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	4a03      	ldr	r2, [pc, #12]	; (8007e1c <vTaskSuspendAll+0x18>)
 8007e10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e12:	bf00      	nop
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	200018e8 	.word	0x200018e8

08007e20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e2e:	4b42      	ldr	r3, [pc, #264]	; (8007f38 <xTaskResumeAll+0x118>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10a      	bne.n	8007e4c <xTaskResumeAll+0x2c>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	603b      	str	r3, [r7, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e4c:	f001 f922 	bl	8009094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e50:	4b39      	ldr	r3, [pc, #228]	; (8007f38 <xTaskResumeAll+0x118>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	4a38      	ldr	r2, [pc, #224]	; (8007f38 <xTaskResumeAll+0x118>)
 8007e58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e5a:	4b37      	ldr	r3, [pc, #220]	; (8007f38 <xTaskResumeAll+0x118>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d162      	bne.n	8007f28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e62:	4b36      	ldr	r3, [pc, #216]	; (8007f3c <xTaskResumeAll+0x11c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d05e      	beq.n	8007f28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e6a:	e02f      	b.n	8007ecc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e6c:	4b34      	ldr	r3, [pc, #208]	; (8007f40 <xTaskResumeAll+0x120>)
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3318      	adds	r3, #24
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7ff f851 	bl	8006f20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3304      	adds	r3, #4
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff f84c 	bl	8006f20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8c:	4b2d      	ldr	r3, [pc, #180]	; (8007f44 <xTaskResumeAll+0x124>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d903      	bls.n	8007e9c <xTaskResumeAll+0x7c>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	4a2a      	ldr	r2, [pc, #168]	; (8007f44 <xTaskResumeAll+0x124>)
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4a27      	ldr	r2, [pc, #156]	; (8007f48 <xTaskResumeAll+0x128>)
 8007eaa:	441a      	add	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	f7fe ffd7 	bl	8006e66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ebc:	4b23      	ldr	r3, [pc, #140]	; (8007f4c <xTaskResumeAll+0x12c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d302      	bcc.n	8007ecc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007ec6:	4b22      	ldr	r3, [pc, #136]	; (8007f50 <xTaskResumeAll+0x130>)
 8007ec8:	2201      	movs	r2, #1
 8007eca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ecc:	4b1c      	ldr	r3, [pc, #112]	; (8007f40 <xTaskResumeAll+0x120>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1cb      	bne.n	8007e6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007eda:	f000 fb5f 	bl	800859c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ede:	4b1d      	ldr	r3, [pc, #116]	; (8007f54 <xTaskResumeAll+0x134>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d010      	beq.n	8007f0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007eea:	f000 f847 	bl	8007f7c <xTaskIncrementTick>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ef4:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <xTaskResumeAll+0x130>)
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1f1      	bne.n	8007eea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007f06:	4b13      	ldr	r3, [pc, #76]	; (8007f54 <xTaskResumeAll+0x134>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f0c:	4b10      	ldr	r3, [pc, #64]	; (8007f50 <xTaskResumeAll+0x130>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d009      	beq.n	8007f28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f18:	4b0f      	ldr	r3, [pc, #60]	; (8007f58 <xTaskResumeAll+0x138>)
 8007f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1e:	601a      	str	r2, [r3, #0]
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f28:	f001 f8e4 	bl	80090f4 <vPortExitCritical>

	return xAlreadyYielded;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	200018e8 	.word	0x200018e8
 8007f3c:	200018c0 	.word	0x200018c0
 8007f40:	20001880 	.word	0x20001880
 8007f44:	200018c8 	.word	0x200018c8
 8007f48:	200013f0 	.word	0x200013f0
 8007f4c:	200013ec 	.word	0x200013ec
 8007f50:	200018d4 	.word	0x200018d4
 8007f54:	200018d0 	.word	0x200018d0
 8007f58:	e000ed04 	.word	0xe000ed04

08007f5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f62:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <xTaskGetTickCount+0x1c>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f68:	687b      	ldr	r3, [r7, #4]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	200018c4 	.word	0x200018c4

08007f7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f86:	4b4f      	ldr	r3, [pc, #316]	; (80080c4 <xTaskIncrementTick+0x148>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f040 808f 	bne.w	80080ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f90:	4b4d      	ldr	r3, [pc, #308]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3301      	adds	r3, #1
 8007f96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f98:	4a4b      	ldr	r2, [pc, #300]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d120      	bne.n	8007fe6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fa4:	4b49      	ldr	r3, [pc, #292]	; (80080cc <xTaskIncrementTick+0x150>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00a      	beq.n	8007fc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	603b      	str	r3, [r7, #0]
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <xTaskIncrementTick+0x46>
 8007fc4:	4b41      	ldr	r3, [pc, #260]	; (80080cc <xTaskIncrementTick+0x150>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	4b41      	ldr	r3, [pc, #260]	; (80080d0 <xTaskIncrementTick+0x154>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a3f      	ldr	r2, [pc, #252]	; (80080cc <xTaskIncrementTick+0x150>)
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	4a3f      	ldr	r2, [pc, #252]	; (80080d0 <xTaskIncrementTick+0x154>)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	4b3e      	ldr	r3, [pc, #248]	; (80080d4 <xTaskIncrementTick+0x158>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	4a3d      	ldr	r2, [pc, #244]	; (80080d4 <xTaskIncrementTick+0x158>)
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	f000 fadb 	bl	800859c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fe6:	4b3c      	ldr	r3, [pc, #240]	; (80080d8 <xTaskIncrementTick+0x15c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d349      	bcc.n	8008084 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ff0:	4b36      	ldr	r3, [pc, #216]	; (80080cc <xTaskIncrementTick+0x150>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d104      	bne.n	8008004 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffa:	4b37      	ldr	r3, [pc, #220]	; (80080d8 <xTaskIncrementTick+0x15c>)
 8007ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8008000:	601a      	str	r2, [r3, #0]
					break;
 8008002:	e03f      	b.n	8008084 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008004:	4b31      	ldr	r3, [pc, #196]	; (80080cc <xTaskIncrementTick+0x150>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d203      	bcs.n	8008024 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800801c:	4a2e      	ldr	r2, [pc, #184]	; (80080d8 <xTaskIncrementTick+0x15c>)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008022:	e02f      	b.n	8008084 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	3304      	adds	r3, #4
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe ff79 	bl	8006f20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	3318      	adds	r3, #24
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe ff70 	bl	8006f20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008044:	4b25      	ldr	r3, [pc, #148]	; (80080dc <xTaskIncrementTick+0x160>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	429a      	cmp	r2, r3
 800804a:	d903      	bls.n	8008054 <xTaskIncrementTick+0xd8>
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008050:	4a22      	ldr	r2, [pc, #136]	; (80080dc <xTaskIncrementTick+0x160>)
 8008052:	6013      	str	r3, [r2, #0]
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008058:	4613      	mov	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4a1f      	ldr	r2, [pc, #124]	; (80080e0 <xTaskIncrementTick+0x164>)
 8008062:	441a      	add	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	3304      	adds	r3, #4
 8008068:	4619      	mov	r1, r3
 800806a:	4610      	mov	r0, r2
 800806c:	f7fe fefb 	bl	8006e66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008074:	4b1b      	ldr	r3, [pc, #108]	; (80080e4 <xTaskIncrementTick+0x168>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	429a      	cmp	r2, r3
 800807c:	d3b8      	bcc.n	8007ff0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800807e:	2301      	movs	r3, #1
 8008080:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008082:	e7b5      	b.n	8007ff0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008084:	4b17      	ldr	r3, [pc, #92]	; (80080e4 <xTaskIncrementTick+0x168>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808a:	4915      	ldr	r1, [pc, #84]	; (80080e0 <xTaskIncrementTick+0x164>)
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	440b      	add	r3, r1
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d901      	bls.n	80080a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800809c:	2301      	movs	r3, #1
 800809e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80080a0:	4b11      	ldr	r3, [pc, #68]	; (80080e8 <xTaskIncrementTick+0x16c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d007      	beq.n	80080b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80080a8:	2301      	movs	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	e004      	b.n	80080b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80080ae:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <xTaskIncrementTick+0x170>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3301      	adds	r3, #1
 80080b4:	4a0d      	ldr	r2, [pc, #52]	; (80080ec <xTaskIncrementTick+0x170>)
 80080b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080b8:	697b      	ldr	r3, [r7, #20]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	200018e8 	.word	0x200018e8
 80080c8:	200018c4 	.word	0x200018c4
 80080cc:	20001878 	.word	0x20001878
 80080d0:	2000187c 	.word	0x2000187c
 80080d4:	200018d8 	.word	0x200018d8
 80080d8:	200018e0 	.word	0x200018e0
 80080dc:	200018c8 	.word	0x200018c8
 80080e0:	200013f0 	.word	0x200013f0
 80080e4:	200013ec 	.word	0x200013ec
 80080e8:	200018d4 	.word	0x200018d4
 80080ec:	200018d0 	.word	0x200018d0

080080f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080f6:	4b2a      	ldr	r3, [pc, #168]	; (80081a0 <vTaskSwitchContext+0xb0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080fe:	4b29      	ldr	r3, [pc, #164]	; (80081a4 <vTaskSwitchContext+0xb4>)
 8008100:	2201      	movs	r2, #1
 8008102:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008104:	e046      	b.n	8008194 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008106:	4b27      	ldr	r3, [pc, #156]	; (80081a4 <vTaskSwitchContext+0xb4>)
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810c:	4b26      	ldr	r3, [pc, #152]	; (80081a8 <vTaskSwitchContext+0xb8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	e010      	b.n	8008136 <vTaskSwitchContext+0x46>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <vTaskSwitchContext+0x40>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	607b      	str	r3, [r7, #4]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <vTaskSwitchContext+0x3e>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3b01      	subs	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	491d      	ldr	r1, [pc, #116]	; (80081ac <vTaskSwitchContext+0xbc>)
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	4613      	mov	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	440b      	add	r3, r1
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0e4      	beq.n	8008114 <vTaskSwitchContext+0x24>
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4a15      	ldr	r2, [pc, #84]	; (80081ac <vTaskSwitchContext+0xbc>)
 8008156:	4413      	add	r3, r2
 8008158:	60bb      	str	r3, [r7, #8]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	605a      	str	r2, [r3, #4]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	3308      	adds	r3, #8
 800816c:	429a      	cmp	r2, r3
 800816e:	d104      	bne.n	800817a <vTaskSwitchContext+0x8a>
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	605a      	str	r2, [r3, #4]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	4a0b      	ldr	r2, [pc, #44]	; (80081b0 <vTaskSwitchContext+0xc0>)
 8008182:	6013      	str	r3, [r2, #0]
 8008184:	4a08      	ldr	r2, [pc, #32]	; (80081a8 <vTaskSwitchContext+0xb8>)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800818a:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <vTaskSwitchContext+0xc0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3354      	adds	r3, #84	; 0x54
 8008190:	4a08      	ldr	r2, [pc, #32]	; (80081b4 <vTaskSwitchContext+0xc4>)
 8008192:	6013      	str	r3, [r2, #0]
}
 8008194:	bf00      	nop
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	200018e8 	.word	0x200018e8
 80081a4:	200018d4 	.word	0x200018d4
 80081a8:	200018c8 	.word	0x200018c8
 80081ac:	200013f0 	.word	0x200013f0
 80081b0:	200013ec 	.word	0x200013ec
 80081b4:	20000024 	.word	0x20000024

080081b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	60fb      	str	r3, [r7, #12]
}
 80081da:	bf00      	nop
 80081dc:	e7fe      	b.n	80081dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081de:	4b07      	ldr	r3, [pc, #28]	; (80081fc <vTaskPlaceOnEventList+0x44>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3318      	adds	r3, #24
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7fe fe61 	bl	8006eae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081ec:	2101      	movs	r1, #1
 80081ee:	6838      	ldr	r0, [r7, #0]
 80081f0:	f000 fa80 	bl	80086f4 <prvAddCurrentTaskToDelayedList>
}
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	200013ec 	.word	0x200013ec

08008200 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	617b      	str	r3, [r7, #20]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008228:	4b0a      	ldr	r3, [pc, #40]	; (8008254 <vTaskPlaceOnEventListRestricted+0x54>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3318      	adds	r3, #24
 800822e:	4619      	mov	r1, r3
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7fe fe18 	bl	8006e66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800823c:	f04f 33ff 	mov.w	r3, #4294967295
 8008240:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	68b8      	ldr	r0, [r7, #8]
 8008246:	f000 fa55 	bl	80086f4 <prvAddCurrentTaskToDelayedList>
	}
 800824a:	bf00      	nop
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	200013ec 	.word	0x200013ec

08008258 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10a      	bne.n	8008284 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	60fb      	str	r3, [r7, #12]
}
 8008280:	bf00      	nop
 8008282:	e7fe      	b.n	8008282 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	3318      	adds	r3, #24
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe fe49 	bl	8006f20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800828e:	4b1e      	ldr	r3, [pc, #120]	; (8008308 <xTaskRemoveFromEventList+0xb0>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d11d      	bne.n	80082d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	3304      	adds	r3, #4
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fe40 	bl	8006f20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a4:	4b19      	ldr	r3, [pc, #100]	; (800830c <xTaskRemoveFromEventList+0xb4>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d903      	bls.n	80082b4 <xTaskRemoveFromEventList+0x5c>
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	4a16      	ldr	r2, [pc, #88]	; (800830c <xTaskRemoveFromEventList+0xb4>)
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b8:	4613      	mov	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4a13      	ldr	r2, [pc, #76]	; (8008310 <xTaskRemoveFromEventList+0xb8>)
 80082c2:	441a      	add	r2, r3
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4619      	mov	r1, r3
 80082ca:	4610      	mov	r0, r2
 80082cc:	f7fe fdcb 	bl	8006e66 <vListInsertEnd>
 80082d0:	e005      	b.n	80082de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	3318      	adds	r3, #24
 80082d6:	4619      	mov	r1, r3
 80082d8:	480e      	ldr	r0, [pc, #56]	; (8008314 <xTaskRemoveFromEventList+0xbc>)
 80082da:	f7fe fdc4 	bl	8006e66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e2:	4b0d      	ldr	r3, [pc, #52]	; (8008318 <xTaskRemoveFromEventList+0xc0>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d905      	bls.n	80082f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80082ec:	2301      	movs	r3, #1
 80082ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80082f0:	4b0a      	ldr	r3, [pc, #40]	; (800831c <xTaskRemoveFromEventList+0xc4>)
 80082f2:	2201      	movs	r2, #1
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	e001      	b.n	80082fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80082fc:	697b      	ldr	r3, [r7, #20]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	200018e8 	.word	0x200018e8
 800830c:	200018c8 	.word	0x200018c8
 8008310:	200013f0 	.word	0x200013f0
 8008314:	20001880 	.word	0x20001880
 8008318:	200013ec 	.word	0x200013ec
 800831c:	200018d4 	.word	0x200018d4

08008320 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008328:	4b06      	ldr	r3, [pc, #24]	; (8008344 <vTaskInternalSetTimeOutState+0x24>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <vTaskInternalSetTimeOutState+0x28>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	605a      	str	r2, [r3, #4]
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	200018d8 	.word	0x200018d8
 8008348:	200018c4 	.word	0x200018c4

0800834c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	613b      	str	r3, [r7, #16]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	60fb      	str	r3, [r7, #12]
}
 800838a:	bf00      	nop
 800838c:	e7fe      	b.n	800838c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800838e:	f000 fe81 	bl	8009094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008392:	4b1d      	ldr	r3, [pc, #116]	; (8008408 <xTaskCheckForTimeOut+0xbc>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083aa:	d102      	bne.n	80083b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083ac:	2300      	movs	r3, #0
 80083ae:	61fb      	str	r3, [r7, #28]
 80083b0:	e023      	b.n	80083fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	4b15      	ldr	r3, [pc, #84]	; (800840c <xTaskCheckForTimeOut+0xc0>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d007      	beq.n	80083ce <xTaskCheckForTimeOut+0x82>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d302      	bcc.n	80083ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083c8:	2301      	movs	r3, #1
 80083ca:	61fb      	str	r3, [r7, #28]
 80083cc:	e015      	b.n	80083fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d20b      	bcs.n	80083f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	1ad2      	subs	r2, r2, r3
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7ff ff9b 	bl	8008320 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	61fb      	str	r3, [r7, #28]
 80083ee:	e004      	b.n	80083fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083f6:	2301      	movs	r3, #1
 80083f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083fa:	f000 fe7b 	bl	80090f4 <vPortExitCritical>

	return xReturn;
 80083fe:	69fb      	ldr	r3, [r7, #28]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3720      	adds	r7, #32
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	200018c4 	.word	0x200018c4
 800840c:	200018d8 	.word	0x200018d8

08008410 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008410:	b480      	push	{r7}
 8008412:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008414:	4b03      	ldr	r3, [pc, #12]	; (8008424 <vTaskMissedYield+0x14>)
 8008416:	2201      	movs	r2, #1
 8008418:	601a      	str	r2, [r3, #0]
}
 800841a:	bf00      	nop
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	200018d4 	.word	0x200018d4

08008428 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008430:	f000 f852 	bl	80084d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008434:	4b06      	ldr	r3, [pc, #24]	; (8008450 <prvIdleTask+0x28>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d9f9      	bls.n	8008430 <prvIdleTask+0x8>
			{
				taskYIELD();
 800843c:	4b05      	ldr	r3, [pc, #20]	; (8008454 <prvIdleTask+0x2c>)
 800843e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800844c:	e7f0      	b.n	8008430 <prvIdleTask+0x8>
 800844e:	bf00      	nop
 8008450:	200013f0 	.word	0x200013f0
 8008454:	e000ed04 	.word	0xe000ed04

08008458 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800845e:	2300      	movs	r3, #0
 8008460:	607b      	str	r3, [r7, #4]
 8008462:	e00c      	b.n	800847e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4a12      	ldr	r2, [pc, #72]	; (80084b8 <prvInitialiseTaskLists+0x60>)
 8008470:	4413      	add	r3, r2
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe fcca 	bl	8006e0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3301      	adds	r3, #1
 800847c:	607b      	str	r3, [r7, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b37      	cmp	r3, #55	; 0x37
 8008482:	d9ef      	bls.n	8008464 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008484:	480d      	ldr	r0, [pc, #52]	; (80084bc <prvInitialiseTaskLists+0x64>)
 8008486:	f7fe fcc1 	bl	8006e0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800848a:	480d      	ldr	r0, [pc, #52]	; (80084c0 <prvInitialiseTaskLists+0x68>)
 800848c:	f7fe fcbe 	bl	8006e0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008490:	480c      	ldr	r0, [pc, #48]	; (80084c4 <prvInitialiseTaskLists+0x6c>)
 8008492:	f7fe fcbb 	bl	8006e0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008496:	480c      	ldr	r0, [pc, #48]	; (80084c8 <prvInitialiseTaskLists+0x70>)
 8008498:	f7fe fcb8 	bl	8006e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800849c:	480b      	ldr	r0, [pc, #44]	; (80084cc <prvInitialiseTaskLists+0x74>)
 800849e:	f7fe fcb5 	bl	8006e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084a2:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <prvInitialiseTaskLists+0x78>)
 80084a4:	4a05      	ldr	r2, [pc, #20]	; (80084bc <prvInitialiseTaskLists+0x64>)
 80084a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084a8:	4b0a      	ldr	r3, [pc, #40]	; (80084d4 <prvInitialiseTaskLists+0x7c>)
 80084aa:	4a05      	ldr	r2, [pc, #20]	; (80084c0 <prvInitialiseTaskLists+0x68>)
 80084ac:	601a      	str	r2, [r3, #0]
}
 80084ae:	bf00      	nop
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	200013f0 	.word	0x200013f0
 80084bc:	20001850 	.word	0x20001850
 80084c0:	20001864 	.word	0x20001864
 80084c4:	20001880 	.word	0x20001880
 80084c8:	20001894 	.word	0x20001894
 80084cc:	200018ac 	.word	0x200018ac
 80084d0:	20001878 	.word	0x20001878
 80084d4:	2000187c 	.word	0x2000187c

080084d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084de:	e019      	b.n	8008514 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084e0:	f000 fdd8 	bl	8009094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e4:	4b10      	ldr	r3, [pc, #64]	; (8008528 <prvCheckTasksWaitingTermination+0x50>)
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3304      	adds	r3, #4
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fe fd15 	bl	8006f20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084f6:	4b0d      	ldr	r3, [pc, #52]	; (800852c <prvCheckTasksWaitingTermination+0x54>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	4a0b      	ldr	r2, [pc, #44]	; (800852c <prvCheckTasksWaitingTermination+0x54>)
 80084fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008500:	4b0b      	ldr	r3, [pc, #44]	; (8008530 <prvCheckTasksWaitingTermination+0x58>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3b01      	subs	r3, #1
 8008506:	4a0a      	ldr	r2, [pc, #40]	; (8008530 <prvCheckTasksWaitingTermination+0x58>)
 8008508:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800850a:	f000 fdf3 	bl	80090f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f810 	bl	8008534 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008514:	4b06      	ldr	r3, [pc, #24]	; (8008530 <prvCheckTasksWaitingTermination+0x58>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1e1      	bne.n	80084e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800851c:	bf00      	nop
 800851e:	bf00      	nop
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20001894 	.word	0x20001894
 800852c:	200018c0 	.word	0x200018c0
 8008530:	200018a8 	.word	0x200018a8

08008534 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3354      	adds	r3, #84	; 0x54
 8008540:	4618      	mov	r0, r3
 8008542:	f001 fbcf 	bl	8009ce4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800854c:	2b00      	cmp	r3, #0
 800854e:	d108      	bne.n	8008562 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008554:	4618      	mov	r0, r3
 8008556:	f000 ff8b 	bl	8009470 <vPortFree>
				vPortFree( pxTCB );
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 ff88 	bl	8009470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008560:	e018      	b.n	8008594 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008568:	2b01      	cmp	r3, #1
 800856a:	d103      	bne.n	8008574 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 ff7f 	bl	8009470 <vPortFree>
	}
 8008572:	e00f      	b.n	8008594 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800857a:	2b02      	cmp	r3, #2
 800857c:	d00a      	beq.n	8008594 <prvDeleteTCB+0x60>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	60fb      	str	r3, [r7, #12]
}
 8008590:	bf00      	nop
 8008592:	e7fe      	b.n	8008592 <prvDeleteTCB+0x5e>
	}
 8008594:	bf00      	nop
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085a2:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <prvResetNextTaskUnblockTime+0x38>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d104      	bne.n	80085b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085ac:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <prvResetNextTaskUnblockTime+0x3c>)
 80085ae:	f04f 32ff 	mov.w	r2, #4294967295
 80085b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085b4:	e008      	b.n	80085c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b6:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <prvResetNextTaskUnblockTime+0x38>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	4a04      	ldr	r2, [pc, #16]	; (80085d8 <prvResetNextTaskUnblockTime+0x3c>)
 80085c6:	6013      	str	r3, [r2, #0]
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	20001878 	.word	0x20001878
 80085d8:	200018e0 	.word	0x200018e0

080085dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085e2:	4b0b      	ldr	r3, [pc, #44]	; (8008610 <xTaskGetSchedulerState+0x34>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d102      	bne.n	80085f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085ea:	2301      	movs	r3, #1
 80085ec:	607b      	str	r3, [r7, #4]
 80085ee:	e008      	b.n	8008602 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085f0:	4b08      	ldr	r3, [pc, #32]	; (8008614 <xTaskGetSchedulerState+0x38>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d102      	bne.n	80085fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085f8:	2302      	movs	r3, #2
 80085fa:	607b      	str	r3, [r7, #4]
 80085fc:	e001      	b.n	8008602 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085fe:	2300      	movs	r3, #0
 8008600:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008602:	687b      	ldr	r3, [r7, #4]
	}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	200018cc 	.word	0x200018cc
 8008614:	200018e8 	.word	0x200018e8

08008618 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008624:	2300      	movs	r3, #0
 8008626:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d056      	beq.n	80086dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800862e:	4b2e      	ldr	r3, [pc, #184]	; (80086e8 <xTaskPriorityDisinherit+0xd0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	429a      	cmp	r2, r3
 8008636:	d00a      	beq.n	800864e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	60fb      	str	r3, [r7, #12]
}
 800864a:	bf00      	nop
 800864c:	e7fe      	b.n	800864c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10a      	bne.n	800866c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	60bb      	str	r3, [r7, #8]
}
 8008668:	bf00      	nop
 800866a:	e7fe      	b.n	800866a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008670:	1e5a      	subs	r2, r3, #1
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800867e:	429a      	cmp	r2, r3
 8008680:	d02c      	beq.n	80086dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008686:	2b00      	cmp	r3, #0
 8008688:	d128      	bne.n	80086dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	3304      	adds	r3, #4
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fc46 	bl	8006f20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ac:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <xTaskPriorityDisinherit+0xd4>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d903      	bls.n	80086bc <xTaskPriorityDisinherit+0xa4>
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	4a0c      	ldr	r2, [pc, #48]	; (80086ec <xTaskPriorityDisinherit+0xd4>)
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	4613      	mov	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <xTaskPriorityDisinherit+0xd8>)
 80086ca:	441a      	add	r2, r3
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4619      	mov	r1, r3
 80086d2:	4610      	mov	r0, r2
 80086d4:	f7fe fbc7 	bl	8006e66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086d8:	2301      	movs	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086dc:	697b      	ldr	r3, [r7, #20]
	}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	200013ec 	.word	0x200013ec
 80086ec:	200018c8 	.word	0x200018c8
 80086f0:	200013f0 	.word	0x200013f0

080086f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086fe:	4b21      	ldr	r3, [pc, #132]	; (8008784 <prvAddCurrentTaskToDelayedList+0x90>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008704:	4b20      	ldr	r3, [pc, #128]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3304      	adds	r3, #4
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe fc08 	bl	8006f20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008716:	d10a      	bne.n	800872e <prvAddCurrentTaskToDelayedList+0x3a>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800871e:	4b1a      	ldr	r3, [pc, #104]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3304      	adds	r3, #4
 8008724:	4619      	mov	r1, r3
 8008726:	4819      	ldr	r0, [pc, #100]	; (800878c <prvAddCurrentTaskToDelayedList+0x98>)
 8008728:	f7fe fb9d 	bl	8006e66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800872c:	e026      	b.n	800877c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4413      	add	r3, r2
 8008734:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008736:	4b14      	ldr	r3, [pc, #80]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	429a      	cmp	r2, r3
 8008744:	d209      	bcs.n	800875a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008746:	4b12      	ldr	r3, [pc, #72]	; (8008790 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3304      	adds	r3, #4
 8008750:	4619      	mov	r1, r3
 8008752:	4610      	mov	r0, r2
 8008754:	f7fe fbab 	bl	8006eae <vListInsert>
}
 8008758:	e010      	b.n	800877c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800875a:	4b0e      	ldr	r3, [pc, #56]	; (8008794 <prvAddCurrentTaskToDelayedList+0xa0>)
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3304      	adds	r3, #4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f7fe fba1 	bl	8006eae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800876c:	4b0a      	ldr	r3, [pc, #40]	; (8008798 <prvAddCurrentTaskToDelayedList+0xa4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	429a      	cmp	r2, r3
 8008774:	d202      	bcs.n	800877c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008776:	4a08      	ldr	r2, [pc, #32]	; (8008798 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	6013      	str	r3, [r2, #0]
}
 800877c:	bf00      	nop
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	200018c4 	.word	0x200018c4
 8008788:	200013ec 	.word	0x200013ec
 800878c:	200018ac 	.word	0x200018ac
 8008790:	2000187c 	.word	0x2000187c
 8008794:	20001878 	.word	0x20001878
 8008798:	200018e0 	.word	0x200018e0

0800879c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08a      	sub	sp, #40	; 0x28
 80087a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087a6:	f000 fb07 	bl	8008db8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087aa:	4b1c      	ldr	r3, [pc, #112]	; (800881c <xTimerCreateTimerTask+0x80>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d021      	beq.n	80087f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80087ba:	1d3a      	adds	r2, r7, #4
 80087bc:	f107 0108 	add.w	r1, r7, #8
 80087c0:	f107 030c 	add.w	r3, r7, #12
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fb07 	bl	8006dd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	9202      	str	r2, [sp, #8]
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	2302      	movs	r3, #2
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	2300      	movs	r3, #0
 80087da:	460a      	mov	r2, r1
 80087dc:	4910      	ldr	r1, [pc, #64]	; (8008820 <xTimerCreateTimerTask+0x84>)
 80087de:	4811      	ldr	r0, [pc, #68]	; (8008824 <xTimerCreateTimerTask+0x88>)
 80087e0:	f7ff f8b4 	bl	800794c <xTaskCreateStatic>
 80087e4:	4603      	mov	r3, r0
 80087e6:	4a10      	ldr	r2, [pc, #64]	; (8008828 <xTimerCreateTimerTask+0x8c>)
 80087e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80087ea:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <xTimerCreateTimerTask+0x8c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087f2:	2301      	movs	r3, #1
 80087f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	613b      	str	r3, [r7, #16]
}
 800880e:	bf00      	nop
 8008810:	e7fe      	b.n	8008810 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008812:	697b      	ldr	r3, [r7, #20]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	2000191c 	.word	0x2000191c
 8008820:	0800a0d0 	.word	0x0800a0d0
 8008824:	08008961 	.word	0x08008961
 8008828:	20001920 	.word	0x20001920

0800882c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08a      	sub	sp, #40	; 0x28
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800883a:	2300      	movs	r3, #0
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	623b      	str	r3, [r7, #32]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800885a:	4b1a      	ldr	r3, [pc, #104]	; (80088c4 <xTimerGenericCommand+0x98>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d02a      	beq.n	80088b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2b05      	cmp	r3, #5
 8008872:	dc18      	bgt.n	80088a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008874:	f7ff feb2 	bl	80085dc <xTaskGetSchedulerState>
 8008878:	4603      	mov	r3, r0
 800887a:	2b02      	cmp	r3, #2
 800887c:	d109      	bne.n	8008892 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800887e:	4b11      	ldr	r3, [pc, #68]	; (80088c4 <xTimerGenericCommand+0x98>)
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	f107 0110 	add.w	r1, r7, #16
 8008886:	2300      	movs	r3, #0
 8008888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800888a:	f7fe fc77 	bl	800717c <xQueueGenericSend>
 800888e:	6278      	str	r0, [r7, #36]	; 0x24
 8008890:	e012      	b.n	80088b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008892:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <xTimerGenericCommand+0x98>)
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	f107 0110 	add.w	r1, r7, #16
 800889a:	2300      	movs	r3, #0
 800889c:	2200      	movs	r2, #0
 800889e:	f7fe fc6d 	bl	800717c <xQueueGenericSend>
 80088a2:	6278      	str	r0, [r7, #36]	; 0x24
 80088a4:	e008      	b.n	80088b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088a6:	4b07      	ldr	r3, [pc, #28]	; (80088c4 <xTimerGenericCommand+0x98>)
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	f107 0110 	add.w	r1, r7, #16
 80088ae:	2300      	movs	r3, #0
 80088b0:	683a      	ldr	r2, [r7, #0]
 80088b2:	f7fe fd61 	bl	8007378 <xQueueGenericSendFromISR>
 80088b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3728      	adds	r7, #40	; 0x28
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	2000191c 	.word	0x2000191c

080088c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d2:	4b22      	ldr	r3, [pc, #136]	; (800895c <prvProcessExpiredTimer+0x94>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	3304      	adds	r3, #4
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fe fb1d 	bl	8006f20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088ec:	f003 0304 	and.w	r3, r3, #4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d022      	beq.n	800893a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	699a      	ldr	r2, [r3, #24]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	18d1      	adds	r1, r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	6978      	ldr	r0, [r7, #20]
 8008902:	f000 f8d1 	bl	8008aa8 <prvInsertTimerInActiveList>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01f      	beq.n	800894c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800890c:	2300      	movs	r3, #0
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	2300      	movs	r3, #0
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	2100      	movs	r1, #0
 8008916:	6978      	ldr	r0, [r7, #20]
 8008918:	f7ff ff88 	bl	800882c <xTimerGenericCommand>
 800891c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d113      	bne.n	800894c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	60fb      	str	r3, [r7, #12]
}
 8008936:	bf00      	nop
 8008938:	e7fe      	b.n	8008938 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008940:	f023 0301 	bic.w	r3, r3, #1
 8008944:	b2da      	uxtb	r2, r3
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	6978      	ldr	r0, [r7, #20]
 8008952:	4798      	blx	r3
}
 8008954:	bf00      	nop
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	20001914 	.word	0x20001914

08008960 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008968:	f107 0308 	add.w	r3, r7, #8
 800896c:	4618      	mov	r0, r3
 800896e:	f000 f857 	bl	8008a20 <prvGetNextExpireTime>
 8008972:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4619      	mov	r1, r3
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 f803 	bl	8008984 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800897e:	f000 f8d5 	bl	8008b2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008982:	e7f1      	b.n	8008968 <prvTimerTask+0x8>

08008984 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800898e:	f7ff fa39 	bl	8007e04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008992:	f107 0308 	add.w	r3, r7, #8
 8008996:	4618      	mov	r0, r3
 8008998:	f000 f866 	bl	8008a68 <prvSampleTimeNow>
 800899c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d130      	bne.n	8008a06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10a      	bne.n	80089c0 <prvProcessTimerOrBlockTask+0x3c>
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d806      	bhi.n	80089c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80089b2:	f7ff fa35 	bl	8007e20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80089b6:	68f9      	ldr	r1, [r7, #12]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff ff85 	bl	80088c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80089be:	e024      	b.n	8008a0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d008      	beq.n	80089d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089c6:	4b13      	ldr	r3, [pc, #76]	; (8008a14 <prvProcessTimerOrBlockTask+0x90>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <prvProcessTimerOrBlockTask+0x50>
 80089d0:	2301      	movs	r3, #1
 80089d2:	e000      	b.n	80089d6 <prvProcessTimerOrBlockTask+0x52>
 80089d4:	2300      	movs	r3, #0
 80089d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089d8:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <prvProcessTimerOrBlockTask+0x94>)
 80089da:	6818      	ldr	r0, [r3, #0]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	4619      	mov	r1, r3
 80089e6:	f7fe ff7d 	bl	80078e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089ea:	f7ff fa19 	bl	8007e20 <xTaskResumeAll>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10a      	bne.n	8008a0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089f4:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <prvProcessTimerOrBlockTask+0x98>)
 80089f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	f3bf 8f6f 	isb	sy
}
 8008a04:	e001      	b.n	8008a0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a06:	f7ff fa0b 	bl	8007e20 <xTaskResumeAll>
}
 8008a0a:	bf00      	nop
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	20001918 	.word	0x20001918
 8008a18:	2000191c 	.word	0x2000191c
 8008a1c:	e000ed04 	.word	0xe000ed04

08008a20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a28:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <prvGetNextExpireTime+0x44>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <prvGetNextExpireTime+0x16>
 8008a32:	2201      	movs	r2, #1
 8008a34:	e000      	b.n	8008a38 <prvGetNextExpireTime+0x18>
 8008a36:	2200      	movs	r2, #0
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d105      	bne.n	8008a50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a44:	4b07      	ldr	r3, [pc, #28]	; (8008a64 <prvGetNextExpireTime+0x44>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	60fb      	str	r3, [r7, #12]
 8008a4e:	e001      	b.n	8008a54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a54:	68fb      	ldr	r3, [r7, #12]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	20001914 	.word	0x20001914

08008a68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a70:	f7ff fa74 	bl	8007f5c <xTaskGetTickCount>
 8008a74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a76:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <prvSampleTimeNow+0x3c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d205      	bcs.n	8008a8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a80:	f000 f936 	bl	8008cf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	e002      	b.n	8008a92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a92:	4a04      	ldr	r2, [pc, #16]	; (8008aa4 <prvSampleTimeNow+0x3c>)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a98:	68fb      	ldr	r3, [r7, #12]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20001924 	.word	0x20001924

08008aa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d812      	bhi.n	8008af4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	1ad2      	subs	r2, r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d302      	bcc.n	8008ae2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008adc:	2301      	movs	r3, #1
 8008ade:	617b      	str	r3, [r7, #20]
 8008ae0:	e01b      	b.n	8008b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ae2:	4b10      	ldr	r3, [pc, #64]	; (8008b24 <prvInsertTimerInActiveList+0x7c>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4619      	mov	r1, r3
 8008aec:	4610      	mov	r0, r2
 8008aee:	f7fe f9de 	bl	8006eae <vListInsert>
 8008af2:	e012      	b.n	8008b1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d206      	bcs.n	8008b0a <prvInsertTimerInActiveList+0x62>
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d302      	bcc.n	8008b0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b04:	2301      	movs	r3, #1
 8008b06:	617b      	str	r3, [r7, #20]
 8008b08:	e007      	b.n	8008b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b0a:	4b07      	ldr	r3, [pc, #28]	; (8008b28 <prvInsertTimerInActiveList+0x80>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3304      	adds	r3, #4
 8008b12:	4619      	mov	r1, r3
 8008b14:	4610      	mov	r0, r2
 8008b16:	f7fe f9ca 	bl	8006eae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b1a:	697b      	ldr	r3, [r7, #20]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20001918 	.word	0x20001918
 8008b28:	20001914 	.word	0x20001914

08008b2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08e      	sub	sp, #56	; 0x38
 8008b30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b32:	e0ca      	b.n	8008cca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	da18      	bge.n	8008b6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b3a:	1d3b      	adds	r3, r7, #4
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10a      	bne.n	8008b5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	61fb      	str	r3, [r7, #28]
}
 8008b58:	bf00      	nop
 8008b5a:	e7fe      	b.n	8008b5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b62:	6850      	ldr	r0, [r2, #4]
 8008b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b66:	6892      	ldr	r2, [r2, #8]
 8008b68:	4611      	mov	r1, r2
 8008b6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f2c0 80aa 	blt.w	8008cc8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d004      	beq.n	8008b8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b82:	3304      	adds	r3, #4
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fe f9cb 	bl	8006f20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b8a:	463b      	mov	r3, r7
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7ff ff6b 	bl	8008a68 <prvSampleTimeNow>
 8008b92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b09      	cmp	r3, #9
 8008b98:	f200 8097 	bhi.w	8008cca <prvProcessReceivedCommands+0x19e>
 8008b9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <prvProcessReceivedCommands+0x78>)
 8008b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba2:	bf00      	nop
 8008ba4:	08008bcd 	.word	0x08008bcd
 8008ba8:	08008bcd 	.word	0x08008bcd
 8008bac:	08008bcd 	.word	0x08008bcd
 8008bb0:	08008c41 	.word	0x08008c41
 8008bb4:	08008c55 	.word	0x08008c55
 8008bb8:	08008c9f 	.word	0x08008c9f
 8008bbc:	08008bcd 	.word	0x08008bcd
 8008bc0:	08008bcd 	.word	0x08008bcd
 8008bc4:	08008c41 	.word	0x08008c41
 8008bc8:	08008c55 	.word	0x08008c55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bd2:	f043 0301 	orr.w	r3, r3, #1
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	18d1      	adds	r1, r2, r3
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bec:	f7ff ff5c 	bl	8008aa8 <prvInsertTimerInActiveList>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d069      	beq.n	8008cca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d05e      	beq.n	8008cca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	441a      	add	r2, r3
 8008c14:	2300      	movs	r3, #0
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c1e:	f7ff fe05 	bl	800882c <xTimerGenericCommand>
 8008c22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d14f      	bne.n	8008cca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	61bb      	str	r3, [r7, #24]
}
 8008c3c:	bf00      	nop
 8008c3e:	e7fe      	b.n	8008c3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c46:	f023 0301 	bic.w	r3, r3, #1
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008c52:	e03a      	b.n	8008cca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c5a:	f043 0301 	orr.w	r3, r3, #1
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	617b      	str	r3, [r7, #20]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	699a      	ldr	r2, [r3, #24]
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	18d1      	adds	r1, r2, r3
 8008c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c98:	f7ff ff06 	bl	8008aa8 <prvInsertTimerInActiveList>
					break;
 8008c9c:	e015      	b.n	8008cca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ca4:	f003 0302 	and.w	r3, r3, #2
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d103      	bne.n	8008cb4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cae:	f000 fbdf 	bl	8009470 <vPortFree>
 8008cb2:	e00a      	b.n	8008cca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cba:	f023 0301 	bic.w	r3, r3, #1
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008cc6:	e000      	b.n	8008cca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008cc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cca:	4b08      	ldr	r3, [pc, #32]	; (8008cec <prvProcessReceivedCommands+0x1c0>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	1d39      	adds	r1, r7, #4
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fbec 	bl	80074b0 <xQueueReceive>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f47f af2a 	bne.w	8008b34 <prvProcessReceivedCommands+0x8>
	}
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	3730      	adds	r7, #48	; 0x30
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	2000191c 	.word	0x2000191c

08008cf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cf6:	e048      	b.n	8008d8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cf8:	4b2d      	ldr	r3, [pc, #180]	; (8008db0 <prvSwitchTimerLists+0xc0>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d02:	4b2b      	ldr	r3, [pc, #172]	; (8008db0 <prvSwitchTimerLists+0xc0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fe f905 	bl	8006f20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d02e      	beq.n	8008d8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	4413      	add	r3, r2
 8008d34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d90e      	bls.n	8008d5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d4a:	4b19      	ldr	r3, [pc, #100]	; (8008db0 <prvSwitchTimerLists+0xc0>)
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4619      	mov	r1, r3
 8008d54:	4610      	mov	r0, r2
 8008d56:	f7fe f8aa 	bl	8006eae <vListInsert>
 8008d5a:	e016      	b.n	8008d8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	2300      	movs	r3, #0
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	2100      	movs	r1, #0
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f7ff fd60 	bl	800882c <xTimerGenericCommand>
 8008d6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	603b      	str	r3, [r7, #0]
}
 8008d86:	bf00      	nop
 8008d88:	e7fe      	b.n	8008d88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d8a:	4b09      	ldr	r3, [pc, #36]	; (8008db0 <prvSwitchTimerLists+0xc0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1b1      	bne.n	8008cf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d94:	4b06      	ldr	r3, [pc, #24]	; (8008db0 <prvSwitchTimerLists+0xc0>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d9a:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <prvSwitchTimerLists+0xc4>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a04      	ldr	r2, [pc, #16]	; (8008db0 <prvSwitchTimerLists+0xc0>)
 8008da0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008da2:	4a04      	ldr	r2, [pc, #16]	; (8008db4 <prvSwitchTimerLists+0xc4>)
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	6013      	str	r3, [r2, #0]
}
 8008da8:	bf00      	nop
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20001914 	.word	0x20001914
 8008db4:	20001918 	.word	0x20001918

08008db8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008dbe:	f000 f969 	bl	8009094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008dc2:	4b15      	ldr	r3, [pc, #84]	; (8008e18 <prvCheckForValidListAndQueue+0x60>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d120      	bne.n	8008e0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008dca:	4814      	ldr	r0, [pc, #80]	; (8008e1c <prvCheckForValidListAndQueue+0x64>)
 8008dcc:	f7fe f81e 	bl	8006e0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008dd0:	4813      	ldr	r0, [pc, #76]	; (8008e20 <prvCheckForValidListAndQueue+0x68>)
 8008dd2:	f7fe f81b 	bl	8006e0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008dd6:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <prvCheckForValidListAndQueue+0x6c>)
 8008dd8:	4a10      	ldr	r2, [pc, #64]	; (8008e1c <prvCheckForValidListAndQueue+0x64>)
 8008dda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ddc:	4b12      	ldr	r3, [pc, #72]	; (8008e28 <prvCheckForValidListAndQueue+0x70>)
 8008dde:	4a10      	ldr	r2, [pc, #64]	; (8008e20 <prvCheckForValidListAndQueue+0x68>)
 8008de0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008de2:	2300      	movs	r3, #0
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	4b11      	ldr	r3, [pc, #68]	; (8008e2c <prvCheckForValidListAndQueue+0x74>)
 8008de8:	4a11      	ldr	r2, [pc, #68]	; (8008e30 <prvCheckForValidListAndQueue+0x78>)
 8008dea:	2110      	movs	r1, #16
 8008dec:	200a      	movs	r0, #10
 8008dee:	f7fe f929 	bl	8007044 <xQueueGenericCreateStatic>
 8008df2:	4603      	mov	r3, r0
 8008df4:	4a08      	ldr	r2, [pc, #32]	; (8008e18 <prvCheckForValidListAndQueue+0x60>)
 8008df6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008df8:	4b07      	ldr	r3, [pc, #28]	; (8008e18 <prvCheckForValidListAndQueue+0x60>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d005      	beq.n	8008e0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e00:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <prvCheckForValidListAndQueue+0x60>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	490b      	ldr	r1, [pc, #44]	; (8008e34 <prvCheckForValidListAndQueue+0x7c>)
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fd42 	bl	8007890 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e0c:	f000 f972 	bl	80090f4 <vPortExitCritical>
}
 8008e10:	bf00      	nop
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	2000191c 	.word	0x2000191c
 8008e1c:	200018ec 	.word	0x200018ec
 8008e20:	20001900 	.word	0x20001900
 8008e24:	20001914 	.word	0x20001914
 8008e28:	20001918 	.word	0x20001918
 8008e2c:	200019c8 	.word	0x200019c8
 8008e30:	20001928 	.word	0x20001928
 8008e34:	0800a0d8 	.word	0x0800a0d8

08008e38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3b04      	subs	r3, #4
 8008e48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3b04      	subs	r3, #4
 8008e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f023 0201 	bic.w	r2, r3, #1
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3b04      	subs	r3, #4
 8008e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e68:	4a0c      	ldr	r2, [pc, #48]	; (8008e9c <pxPortInitialiseStack+0x64>)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3b14      	subs	r3, #20
 8008e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3b04      	subs	r3, #4
 8008e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f06f 0202 	mvn.w	r2, #2
 8008e86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3b20      	subs	r3, #32
 8008e8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	08008ea1 	.word	0x08008ea1

08008ea0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008eaa:	4b12      	ldr	r3, [pc, #72]	; (8008ef4 <prvTaskExitError+0x54>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb2:	d00a      	beq.n	8008eca <prvTaskExitError+0x2a>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	60fb      	str	r3, [r7, #12]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <prvTaskExitError+0x28>
	__asm volatile
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	60bb      	str	r3, [r7, #8]
}
 8008edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ede:	bf00      	nop
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0fc      	beq.n	8008ee0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ee6:	bf00      	nop
 8008ee8:	bf00      	nop
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	2000001c 	.word	0x2000001c
	...

08008f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f00:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <pxCurrentTCBConst2>)
 8008f02:	6819      	ldr	r1, [r3, #0]
 8008f04:	6808      	ldr	r0, [r1, #0]
 8008f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0a:	f380 8809 	msr	PSP, r0
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f04f 0000 	mov.w	r0, #0
 8008f16:	f380 8811 	msr	BASEPRI, r0
 8008f1a:	4770      	bx	lr
 8008f1c:	f3af 8000 	nop.w

08008f20 <pxCurrentTCBConst2>:
 8008f20:	200013ec 	.word	0x200013ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f28:	4808      	ldr	r0, [pc, #32]	; (8008f4c <prvPortStartFirstTask+0x24>)
 8008f2a:	6800      	ldr	r0, [r0, #0]
 8008f2c:	6800      	ldr	r0, [r0, #0]
 8008f2e:	f380 8808 	msr	MSP, r0
 8008f32:	f04f 0000 	mov.w	r0, #0
 8008f36:	f380 8814 	msr	CONTROL, r0
 8008f3a:	b662      	cpsie	i
 8008f3c:	b661      	cpsie	f
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	df00      	svc	0
 8008f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f4a:	bf00      	nop
 8008f4c:	e000ed08 	.word	0xe000ed08

08008f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f56:	4b46      	ldr	r3, [pc, #280]	; (8009070 <xPortStartScheduler+0x120>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a46      	ldr	r2, [pc, #280]	; (8009074 <xPortStartScheduler+0x124>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d10a      	bne.n	8008f76 <xPortStartScheduler+0x26>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	613b      	str	r3, [r7, #16]
}
 8008f72:	bf00      	nop
 8008f74:	e7fe      	b.n	8008f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f76:	4b3e      	ldr	r3, [pc, #248]	; (8009070 <xPortStartScheduler+0x120>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a3f      	ldr	r2, [pc, #252]	; (8009078 <xPortStartScheduler+0x128>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d10a      	bne.n	8008f96 <xPortStartScheduler+0x46>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	60fb      	str	r3, [r7, #12]
}
 8008f92:	bf00      	nop
 8008f94:	e7fe      	b.n	8008f94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f96:	4b39      	ldr	r3, [pc, #228]	; (800907c <xPortStartScheduler+0x12c>)
 8008f98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	22ff      	movs	r2, #255	; 0xff
 8008fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	4b31      	ldr	r3, [pc, #196]	; (8009080 <xPortStartScheduler+0x130>)
 8008fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008fbe:	4b31      	ldr	r3, [pc, #196]	; (8009084 <xPortStartScheduler+0x134>)
 8008fc0:	2207      	movs	r2, #7
 8008fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fc4:	e009      	b.n	8008fda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008fc6:	4b2f      	ldr	r3, [pc, #188]	; (8009084 <xPortStartScheduler+0x134>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	4a2d      	ldr	r2, [pc, #180]	; (8009084 <xPortStartScheduler+0x134>)
 8008fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	005b      	lsls	r3, r3, #1
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe2:	2b80      	cmp	r3, #128	; 0x80
 8008fe4:	d0ef      	beq.n	8008fc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fe6:	4b27      	ldr	r3, [pc, #156]	; (8009084 <xPortStartScheduler+0x134>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f1c3 0307 	rsb	r3, r3, #7
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d00a      	beq.n	8009008 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	60bb      	str	r3, [r7, #8]
}
 8009004:	bf00      	nop
 8009006:	e7fe      	b.n	8009006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009008:	4b1e      	ldr	r3, [pc, #120]	; (8009084 <xPortStartScheduler+0x134>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	021b      	lsls	r3, r3, #8
 800900e:	4a1d      	ldr	r2, [pc, #116]	; (8009084 <xPortStartScheduler+0x134>)
 8009010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009012:	4b1c      	ldr	r3, [pc, #112]	; (8009084 <xPortStartScheduler+0x134>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800901a:	4a1a      	ldr	r2, [pc, #104]	; (8009084 <xPortStartScheduler+0x134>)
 800901c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	b2da      	uxtb	r2, r3
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009026:	4b18      	ldr	r3, [pc, #96]	; (8009088 <xPortStartScheduler+0x138>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a17      	ldr	r2, [pc, #92]	; (8009088 <xPortStartScheduler+0x138>)
 800902c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009032:	4b15      	ldr	r3, [pc, #84]	; (8009088 <xPortStartScheduler+0x138>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a14      	ldr	r2, [pc, #80]	; (8009088 <xPortStartScheduler+0x138>)
 8009038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800903c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800903e:	f000 f8dd 	bl	80091fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009042:	4b12      	ldr	r3, [pc, #72]	; (800908c <xPortStartScheduler+0x13c>)
 8009044:	2200      	movs	r2, #0
 8009046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009048:	f000 f8fc 	bl	8009244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800904c:	4b10      	ldr	r3, [pc, #64]	; (8009090 <xPortStartScheduler+0x140>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a0f      	ldr	r2, [pc, #60]	; (8009090 <xPortStartScheduler+0x140>)
 8009052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009058:	f7ff ff66 	bl	8008f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800905c:	f7ff f848 	bl	80080f0 <vTaskSwitchContext>
	prvTaskExitError();
 8009060:	f7ff ff1e 	bl	8008ea0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	e000ed00 	.word	0xe000ed00
 8009074:	410fc271 	.word	0x410fc271
 8009078:	410fc270 	.word	0x410fc270
 800907c:	e000e400 	.word	0xe000e400
 8009080:	20001a18 	.word	0x20001a18
 8009084:	20001a1c 	.word	0x20001a1c
 8009088:	e000ed20 	.word	0xe000ed20
 800908c:	2000001c 	.word	0x2000001c
 8009090:	e000ef34 	.word	0xe000ef34

08009094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	607b      	str	r3, [r7, #4]
}
 80090ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090ae:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <vPortEnterCritical+0x58>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3301      	adds	r3, #1
 80090b4:	4a0d      	ldr	r2, [pc, #52]	; (80090ec <vPortEnterCritical+0x58>)
 80090b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090b8:	4b0c      	ldr	r3, [pc, #48]	; (80090ec <vPortEnterCritical+0x58>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d10f      	bne.n	80090e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090c0:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <vPortEnterCritical+0x5c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	603b      	str	r3, [r7, #0]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <vPortEnterCritical+0x4a>
	}
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	2000001c 	.word	0x2000001c
 80090f0:	e000ed04 	.word	0xe000ed04

080090f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090fa:	4b12      	ldr	r3, [pc, #72]	; (8009144 <vPortExitCritical+0x50>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10a      	bne.n	8009118 <vPortExitCritical+0x24>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	607b      	str	r3, [r7, #4]
}
 8009114:	bf00      	nop
 8009116:	e7fe      	b.n	8009116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009118:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <vPortExitCritical+0x50>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3b01      	subs	r3, #1
 800911e:	4a09      	ldr	r2, [pc, #36]	; (8009144 <vPortExitCritical+0x50>)
 8009120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009122:	4b08      	ldr	r3, [pc, #32]	; (8009144 <vPortExitCritical+0x50>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d105      	bne.n	8009136 <vPortExitCritical+0x42>
 800912a:	2300      	movs	r3, #0
 800912c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	f383 8811 	msr	BASEPRI, r3
}
 8009134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	2000001c 	.word	0x2000001c
	...

08009150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009150:	f3ef 8009 	mrs	r0, PSP
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	4b15      	ldr	r3, [pc, #84]	; (80091b0 <pxCurrentTCBConst>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	f01e 0f10 	tst.w	lr, #16
 8009160:	bf08      	it	eq
 8009162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916a:	6010      	str	r0, [r2, #0]
 800916c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009174:	f380 8811 	msr	BASEPRI, r0
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f7fe ffb6 	bl	80080f0 <vTaskSwitchContext>
 8009184:	f04f 0000 	mov.w	r0, #0
 8009188:	f380 8811 	msr	BASEPRI, r0
 800918c:	bc09      	pop	{r0, r3}
 800918e:	6819      	ldr	r1, [r3, #0]
 8009190:	6808      	ldr	r0, [r1, #0]
 8009192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009196:	f01e 0f10 	tst.w	lr, #16
 800919a:	bf08      	it	eq
 800919c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091a0:	f380 8809 	msr	PSP, r0
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	f3af 8000 	nop.w

080091b0 <pxCurrentTCBConst>:
 80091b0:	200013ec 	.word	0x200013ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80091b4:	bf00      	nop
 80091b6:	bf00      	nop

080091b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	607b      	str	r3, [r7, #4]
}
 80091d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091d2:	f7fe fed3 	bl	8007f7c <xTaskIncrementTick>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091dc:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <xPortSysTickHandler+0x40>)
 80091de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	2300      	movs	r3, #0
 80091e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	f383 8811 	msr	BASEPRI, r3
}
 80091ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	e000ed04 	.word	0xe000ed04

080091fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009200:	4b0b      	ldr	r3, [pc, #44]	; (8009230 <vPortSetupTimerInterrupt+0x34>)
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009206:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <vPortSetupTimerInterrupt+0x38>)
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800920c:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <vPortSetupTimerInterrupt+0x3c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a0a      	ldr	r2, [pc, #40]	; (800923c <vPortSetupTimerInterrupt+0x40>)
 8009212:	fba2 2303 	umull	r2, r3, r2, r3
 8009216:	099b      	lsrs	r3, r3, #6
 8009218:	4a09      	ldr	r2, [pc, #36]	; (8009240 <vPortSetupTimerInterrupt+0x44>)
 800921a:	3b01      	subs	r3, #1
 800921c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800921e:	4b04      	ldr	r3, [pc, #16]	; (8009230 <vPortSetupTimerInterrupt+0x34>)
 8009220:	2207      	movs	r2, #7
 8009222:	601a      	str	r2, [r3, #0]
}
 8009224:	bf00      	nop
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	e000e010 	.word	0xe000e010
 8009234:	e000e018 	.word	0xe000e018
 8009238:	20000010 	.word	0x20000010
 800923c:	10624dd3 	.word	0x10624dd3
 8009240:	e000e014 	.word	0xe000e014

08009244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009254 <vPortEnableVFP+0x10>
 8009248:	6801      	ldr	r1, [r0, #0]
 800924a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800924e:	6001      	str	r1, [r0, #0]
 8009250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009252:	bf00      	nop
 8009254:	e000ed88 	.word	0xe000ed88

08009258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800925e:	f3ef 8305 	mrs	r3, IPSR
 8009262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b0f      	cmp	r3, #15
 8009268:	d914      	bls.n	8009294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800926a:	4a17      	ldr	r2, [pc, #92]	; (80092c8 <vPortValidateInterruptPriority+0x70>)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009274:	4b15      	ldr	r3, [pc, #84]	; (80092cc <vPortValidateInterruptPriority+0x74>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	7afa      	ldrb	r2, [r7, #11]
 800927a:	429a      	cmp	r2, r3
 800927c:	d20a      	bcs.n	8009294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	607b      	str	r3, [r7, #4]
}
 8009290:	bf00      	nop
 8009292:	e7fe      	b.n	8009292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009294:	4b0e      	ldr	r3, [pc, #56]	; (80092d0 <vPortValidateInterruptPriority+0x78>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800929c:	4b0d      	ldr	r3, [pc, #52]	; (80092d4 <vPortValidateInterruptPriority+0x7c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d90a      	bls.n	80092ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	603b      	str	r3, [r7, #0]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <vPortValidateInterruptPriority+0x60>
	}
 80092ba:	bf00      	nop
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	e000e3f0 	.word	0xe000e3f0
 80092cc:	20001a18 	.word	0x20001a18
 80092d0:	e000ed0c 	.word	0xe000ed0c
 80092d4:	20001a1c 	.word	0x20001a1c

080092d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08a      	sub	sp, #40	; 0x28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092e0:	2300      	movs	r3, #0
 80092e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092e4:	f7fe fd8e 	bl	8007e04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092e8:	4b5b      	ldr	r3, [pc, #364]	; (8009458 <pvPortMalloc+0x180>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092f0:	f000 f920 	bl	8009534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092f4:	4b59      	ldr	r3, [pc, #356]	; (800945c <pvPortMalloc+0x184>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4013      	ands	r3, r2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f040 8093 	bne.w	8009428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d01d      	beq.n	8009344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009308:	2208      	movs	r2, #8
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4413      	add	r3, r2
 800930e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	2b00      	cmp	r3, #0
 8009318:	d014      	beq.n	8009344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f023 0307 	bic.w	r3, r3, #7
 8009320:	3308      	adds	r3, #8
 8009322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f003 0307 	and.w	r3, r3, #7
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <pvPortMalloc+0x6c>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	617b      	str	r3, [r7, #20]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d06e      	beq.n	8009428 <pvPortMalloc+0x150>
 800934a:	4b45      	ldr	r3, [pc, #276]	; (8009460 <pvPortMalloc+0x188>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	429a      	cmp	r2, r3
 8009352:	d869      	bhi.n	8009428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009354:	4b43      	ldr	r3, [pc, #268]	; (8009464 <pvPortMalloc+0x18c>)
 8009356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009358:	4b42      	ldr	r3, [pc, #264]	; (8009464 <pvPortMalloc+0x18c>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800935e:	e004      	b.n	800936a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	429a      	cmp	r2, r3
 8009372:	d903      	bls.n	800937c <pvPortMalloc+0xa4>
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1f1      	bne.n	8009360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800937c:	4b36      	ldr	r3, [pc, #216]	; (8009458 <pvPortMalloc+0x180>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009382:	429a      	cmp	r2, r3
 8009384:	d050      	beq.n	8009428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2208      	movs	r2, #8
 800938c:	4413      	add	r3, r2
 800938e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	1ad2      	subs	r2, r2, r3
 80093a0:	2308      	movs	r3, #8
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d91f      	bls.n	80093e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4413      	add	r3, r2
 80093ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <pvPortMalloc+0xf8>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	613b      	str	r3, [r7, #16]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	1ad2      	subs	r2, r2, r3
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093e2:	69b8      	ldr	r0, [r7, #24]
 80093e4:	f000 f908 	bl	80095f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093e8:	4b1d      	ldr	r3, [pc, #116]	; (8009460 <pvPortMalloc+0x188>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	4a1b      	ldr	r2, [pc, #108]	; (8009460 <pvPortMalloc+0x188>)
 80093f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093f6:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <pvPortMalloc+0x188>)
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	4b1b      	ldr	r3, [pc, #108]	; (8009468 <pvPortMalloc+0x190>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d203      	bcs.n	800940a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009402:	4b17      	ldr	r3, [pc, #92]	; (8009460 <pvPortMalloc+0x188>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a18      	ldr	r2, [pc, #96]	; (8009468 <pvPortMalloc+0x190>)
 8009408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	4b13      	ldr	r3, [pc, #76]	; (800945c <pvPortMalloc+0x184>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	431a      	orrs	r2, r3
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	2200      	movs	r2, #0
 800941c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800941e:	4b13      	ldr	r3, [pc, #76]	; (800946c <pvPortMalloc+0x194>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3301      	adds	r3, #1
 8009424:	4a11      	ldr	r2, [pc, #68]	; (800946c <pvPortMalloc+0x194>)
 8009426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009428:	f7fe fcfa 	bl	8007e20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	f003 0307 	and.w	r3, r3, #7
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <pvPortMalloc+0x174>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	60fb      	str	r3, [r7, #12]
}
 8009448:	bf00      	nop
 800944a:	e7fe      	b.n	800944a <pvPortMalloc+0x172>
	return pvReturn;
 800944c:	69fb      	ldr	r3, [r7, #28]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3728      	adds	r7, #40	; 0x28
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20005628 	.word	0x20005628
 800945c:	2000563c 	.word	0x2000563c
 8009460:	2000562c 	.word	0x2000562c
 8009464:	20005620 	.word	0x20005620
 8009468:	20005630 	.word	0x20005630
 800946c:	20005634 	.word	0x20005634

08009470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d04d      	beq.n	800951e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009482:	2308      	movs	r3, #8
 8009484:	425b      	negs	r3, r3
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	4413      	add	r3, r2
 800948a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	4b24      	ldr	r3, [pc, #144]	; (8009528 <vPortFree+0xb8>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4013      	ands	r3, r2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <vPortFree+0x44>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	60fb      	str	r3, [r7, #12]
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00a      	beq.n	80094d2 <vPortFree+0x62>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	60bb      	str	r3, [r7, #8]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	685a      	ldr	r2, [r3, #4]
 80094d6:	4b14      	ldr	r3, [pc, #80]	; (8009528 <vPortFree+0xb8>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4013      	ands	r3, r2
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01e      	beq.n	800951e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d11a      	bne.n	800951e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	4b0e      	ldr	r3, [pc, #56]	; (8009528 <vPortFree+0xb8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	43db      	mvns	r3, r3
 80094f2:	401a      	ands	r2, r3
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094f8:	f7fe fc84 	bl	8007e04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	4b0a      	ldr	r3, [pc, #40]	; (800952c <vPortFree+0xbc>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4413      	add	r3, r2
 8009506:	4a09      	ldr	r2, [pc, #36]	; (800952c <vPortFree+0xbc>)
 8009508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800950a:	6938      	ldr	r0, [r7, #16]
 800950c:	f000 f874 	bl	80095f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009510:	4b07      	ldr	r3, [pc, #28]	; (8009530 <vPortFree+0xc0>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3301      	adds	r3, #1
 8009516:	4a06      	ldr	r2, [pc, #24]	; (8009530 <vPortFree+0xc0>)
 8009518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800951a:	f7fe fc81 	bl	8007e20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800951e:	bf00      	nop
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	2000563c 	.word	0x2000563c
 800952c:	2000562c 	.word	0x2000562c
 8009530:	20005638 	.word	0x20005638

08009534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800953a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800953e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009540:	4b27      	ldr	r3, [pc, #156]	; (80095e0 <prvHeapInit+0xac>)
 8009542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f003 0307 	and.w	r3, r3, #7
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00c      	beq.n	8009568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3307      	adds	r3, #7
 8009552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 0307 	bic.w	r3, r3, #7
 800955a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	4a1f      	ldr	r2, [pc, #124]	; (80095e0 <prvHeapInit+0xac>)
 8009564:	4413      	add	r3, r2
 8009566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800956c:	4a1d      	ldr	r2, [pc, #116]	; (80095e4 <prvHeapInit+0xb0>)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009572:	4b1c      	ldr	r3, [pc, #112]	; (80095e4 <prvHeapInit+0xb0>)
 8009574:	2200      	movs	r2, #0
 8009576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	4413      	add	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009580:	2208      	movs	r2, #8
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	1a9b      	subs	r3, r3, r2
 8009586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f023 0307 	bic.w	r3, r3, #7
 800958e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4a15      	ldr	r2, [pc, #84]	; (80095e8 <prvHeapInit+0xb4>)
 8009594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009596:	4b14      	ldr	r3, [pc, #80]	; (80095e8 <prvHeapInit+0xb4>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2200      	movs	r2, #0
 800959c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800959e:	4b12      	ldr	r3, [pc, #72]	; (80095e8 <prvHeapInit+0xb4>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	1ad2      	subs	r2, r2, r3
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095b4:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <prvHeapInit+0xb4>)
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	4a0a      	ldr	r2, [pc, #40]	; (80095ec <prvHeapInit+0xb8>)
 80095c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	4a09      	ldr	r2, [pc, #36]	; (80095f0 <prvHeapInit+0xbc>)
 80095ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095cc:	4b09      	ldr	r3, [pc, #36]	; (80095f4 <prvHeapInit+0xc0>)
 80095ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80095d2:	601a      	str	r2, [r3, #0]
}
 80095d4:	bf00      	nop
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	20001a20 	.word	0x20001a20
 80095e4:	20005620 	.word	0x20005620
 80095e8:	20005628 	.word	0x20005628
 80095ec:	20005630 	.word	0x20005630
 80095f0:	2000562c 	.word	0x2000562c
 80095f4:	2000563c 	.word	0x2000563c

080095f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009600:	4b28      	ldr	r3, [pc, #160]	; (80096a4 <prvInsertBlockIntoFreeList+0xac>)
 8009602:	60fb      	str	r3, [r7, #12]
 8009604:	e002      	b.n	800960c <prvInsertBlockIntoFreeList+0x14>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	429a      	cmp	r2, r3
 8009614:	d8f7      	bhi.n	8009606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	4413      	add	r3, r2
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d108      	bne.n	800963a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	441a      	add	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	441a      	add	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	429a      	cmp	r2, r3
 800964c:	d118      	bne.n	8009680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	4b15      	ldr	r3, [pc, #84]	; (80096a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	429a      	cmp	r2, r3
 8009658:	d00d      	beq.n	8009676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	441a      	add	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	e008      	b.n	8009688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009676:	4b0c      	ldr	r3, [pc, #48]	; (80096a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	e003      	b.n	8009688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	429a      	cmp	r2, r3
 800968e:	d002      	beq.n	8009696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009696:	bf00      	nop
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	20005620 	.word	0x20005620
 80096a8:	20005628 	.word	0x20005628

080096ac <__cxa_pure_virtual>:
 80096ac:	b508      	push	{r3, lr}
 80096ae:	f000 f987 	bl	80099c0 <_ZSt9terminatev>

080096b2 <_ZNSaIcEC1Ev>:
 80096b2:	4770      	bx	lr

080096b4 <_ZNSaIcED1Ev>:
 80096b4:	4770      	bx	lr

080096b6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80096b6:	b10a      	cbz	r2, 80096bc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80096b8:	f000 b9ee 	b.w	8009a98 <memcpy>
 80096bc:	4770      	bx	lr
	...

080096c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80096c0:	b508      	push	{r3, lr}
 80096c2:	680b      	ldr	r3, [r1, #0]
 80096c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c8:	d302      	bcc.n	80096d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80096ca:	480d      	ldr	r0, [pc, #52]	; (8009700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80096cc:	f000 f994 	bl	80099f8 <_ZSt20__throw_length_errorPKc>
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d90b      	bls.n	80096ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80096d4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80096d8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80096dc:	d206      	bcs.n	80096ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80096de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80096e2:	bf2a      	itet	cs
 80096e4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80096e8:	6008      	strcc	r0, [r1, #0]
 80096ea:	600b      	strcs	r3, [r1, #0]
 80096ec:	6808      	ldr	r0, [r1, #0]
 80096ee:	3001      	adds	r0, #1
 80096f0:	d501      	bpl.n	80096f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80096f2:	f000 f97b 	bl	80099ec <_ZSt17__throw_bad_allocv>
 80096f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80096fa:	f000 b966 	b.w	80099ca <_Znwj>
 80096fe:	bf00      	nop
 8009700:	0800a300 	.word	0x0800a300

08009704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8009704:	f850 3b08 	ldr.w	r3, [r0], #8
 8009708:	4283      	cmp	r3, r0
 800970a:	d002      	beq.n	8009712 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800970c:	4618      	mov	r0, r3
 800970e:	f000 b948 	b.w	80099a2 <_ZdlPv>
 8009712:	4770      	bx	lr

08009714 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8009714:	6840      	ldr	r0, [r0, #4]
 8009716:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800971a:	3901      	subs	r1, #1
 800971c:	1a09      	subs	r1, r1, r0
 800971e:	4291      	cmp	r1, r2
 8009720:	b508      	push	{r3, lr}
 8009722:	d202      	bcs.n	800972a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8009724:	4618      	mov	r0, r3
 8009726:	f000 f967 	bl	80099f8 <_ZSt20__throw_length_errorPKc>
 800972a:	bd08      	pop	{r3, pc}

0800972c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800972c:	6803      	ldr	r3, [r0, #0]
 800972e:	428b      	cmp	r3, r1
 8009730:	d806      	bhi.n	8009740 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8009732:	6840      	ldr	r0, [r0, #4]
 8009734:	4418      	add	r0, r3
 8009736:	4281      	cmp	r1, r0
 8009738:	bf94      	ite	ls
 800973a:	2000      	movls	r0, #0
 800973c:	2001      	movhi	r0, #1
 800973e:	4770      	bx	lr
 8009740:	2001      	movs	r0, #1
 8009742:	4770      	bx	lr

08009744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8009744:	2a01      	cmp	r2, #1
 8009746:	b410      	push	{r4}
 8009748:	d104      	bne.n	8009754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800974a:	780a      	ldrb	r2, [r1, #0]
 800974c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009750:	7002      	strb	r2, [r0, #0]
 8009752:	4770      	bx	lr
 8009754:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009758:	f7ff bfad 	b.w	80096b6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800975c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800975c:	2a01      	cmp	r2, #1
 800975e:	b430      	push	{r4, r5}
 8009760:	d103      	bne.n	800976a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8009762:	780b      	ldrb	r3, [r1, #0]
 8009764:	7003      	strb	r3, [r0, #0]
 8009766:	bc30      	pop	{r4, r5}
 8009768:	4770      	bx	lr
 800976a:	2a00      	cmp	r2, #0
 800976c:	d0fb      	beq.n	8009766 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800976e:	bc30      	pop	{r4, r5}
 8009770:	f000 b9a0 	b.w	8009ab4 <memmove>

08009774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8009774:	b508      	push	{r3, lr}
 8009776:	1a52      	subs	r2, r2, r1
 8009778:	f7ff ffe4 	bl	8009744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800977c:	bd08      	pop	{r3, pc}

0800977e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800977e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009782:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009784:	461f      	mov	r7, r3
 8009786:	6843      	ldr	r3, [r0, #4]
 8009788:	eb01 0802 	add.w	r8, r1, r2
 800978c:	1ab2      	subs	r2, r6, r2
 800978e:	441a      	add	r2, r3
 8009790:	eba3 0908 	sub.w	r9, r3, r8
 8009794:	4603      	mov	r3, r0
 8009796:	9201      	str	r2, [sp, #4]
 8009798:	f853 2b08 	ldr.w	r2, [r3], #8
 800979c:	429a      	cmp	r2, r3
 800979e:	bf18      	it	ne
 80097a0:	6882      	ldrne	r2, [r0, #8]
 80097a2:	460d      	mov	r5, r1
 80097a4:	bf08      	it	eq
 80097a6:	220f      	moveq	r2, #15
 80097a8:	a901      	add	r1, sp, #4
 80097aa:	4604      	mov	r4, r0
 80097ac:	f7ff ff88 	bl	80096c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80097b0:	4682      	mov	sl, r0
 80097b2:	b11d      	cbz	r5, 80097bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80097b4:	6821      	ldr	r1, [r4, #0]
 80097b6:	462a      	mov	r2, r5
 80097b8:	f7ff ffc4 	bl	8009744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80097bc:	b137      	cbz	r7, 80097cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80097be:	b12e      	cbz	r6, 80097cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80097c0:	4632      	mov	r2, r6
 80097c2:	4639      	mov	r1, r7
 80097c4:	eb0a 0005 	add.w	r0, sl, r5
 80097c8:	f7ff ffbc 	bl	8009744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80097cc:	f1b9 0f00 	cmp.w	r9, #0
 80097d0:	d007      	beq.n	80097e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 80097d2:	6821      	ldr	r1, [r4, #0]
 80097d4:	4435      	add	r5, r6
 80097d6:	464a      	mov	r2, r9
 80097d8:	4441      	add	r1, r8
 80097da:	eb0a 0005 	add.w	r0, sl, r5
 80097de:	f7ff ffb1 	bl	8009744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80097e2:	4620      	mov	r0, r4
 80097e4:	f7ff ff8e 	bl	8009704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80097e8:	9b01      	ldr	r3, [sp, #4]
 80097ea:	f8c4 a000 	str.w	sl, [r4]
 80097ee:	60a3      	str	r3, [r4, #8]
 80097f0:	b002      	add	sp, #8
 80097f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080097f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80097f6:	b510      	push	{r4, lr}
 80097f8:	4604      	mov	r4, r0
 80097fa:	f7ff ff83 	bl	8009704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80097fe:	4620      	mov	r0, r4
 8009800:	bd10      	pop	{r4, pc}

08009802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8009802:	6800      	ldr	r0, [r0, #0]
 8009804:	4408      	add	r0, r1
 8009806:	4770      	bx	lr

08009808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8009808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800980e:	4614      	mov	r4, r2
 8009810:	4680      	mov	r8, r0
 8009812:	462a      	mov	r2, r5
 8009814:	4689      	mov	r9, r1
 8009816:	461f      	mov	r7, r3
 8009818:	4621      	mov	r1, r4
 800981a:	4b39      	ldr	r3, [pc, #228]	; (8009900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 800981c:	f7ff ff7a 	bl	8009714 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8009820:	4642      	mov	r2, r8
 8009822:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009826:	f852 6b08 	ldr.w	r6, [r2], #8
 800982a:	4296      	cmp	r6, r2
 800982c:	bf18      	it	ne
 800982e:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8009832:	eba5 0b04 	sub.w	fp, r5, r4
 8009836:	eb03 0a0b 	add.w	sl, r3, fp
 800983a:	bf08      	it	eq
 800983c:	220f      	moveq	r2, #15
 800983e:	4552      	cmp	r2, sl
 8009840:	d351      	bcc.n	80098e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8009842:	444e      	add	r6, r9
 8009844:	4639      	mov	r1, r7
 8009846:	44a1      	add	r9, r4
 8009848:	4640      	mov	r0, r8
 800984a:	eba3 0909 	sub.w	r9, r3, r9
 800984e:	f7ff ff6d 	bl	800972c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8009852:	b180      	cbz	r0, 8009876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8009854:	f1b9 0f00 	cmp.w	r9, #0
 8009858:	d006      	beq.n	8009868 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800985a:	42ac      	cmp	r4, r5
 800985c:	d004      	beq.n	8009868 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800985e:	464a      	mov	r2, r9
 8009860:	1931      	adds	r1, r6, r4
 8009862:	1970      	adds	r0, r6, r5
 8009864:	f7ff ff7a 	bl	800975c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009868:	b315      	cbz	r5, 80098b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800986a:	462a      	mov	r2, r5
 800986c:	4639      	mov	r1, r7
 800986e:	4630      	mov	r0, r6
 8009870:	f7ff ff68 	bl	8009744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009874:	e01c      	b.n	80098b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009876:	b135      	cbz	r5, 8009886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8009878:	42ac      	cmp	r4, r5
 800987a:	d33c      	bcc.n	80098f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 800987c:	462a      	mov	r2, r5
 800987e:	4639      	mov	r1, r7
 8009880:	4630      	mov	r0, r6
 8009882:	f7ff ff6b 	bl	800975c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009886:	f1b9 0f00 	cmp.w	r9, #0
 800988a:	d011      	beq.n	80098b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800988c:	42ac      	cmp	r4, r5
 800988e:	d00f      	beq.n	80098b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8009890:	464a      	mov	r2, r9
 8009892:	1931      	adds	r1, r6, r4
 8009894:	1970      	adds	r0, r6, r5
 8009896:	f7ff ff61 	bl	800975c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800989a:	42ac      	cmp	r4, r5
 800989c:	d208      	bcs.n	80098b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800989e:	4434      	add	r4, r6
 80098a0:	197b      	adds	r3, r7, r5
 80098a2:	429c      	cmp	r4, r3
 80098a4:	d30f      	bcc.n	80098c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 80098a6:	462a      	mov	r2, r5
 80098a8:	4639      	mov	r1, r7
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7ff ff56 	bl	800975c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80098b0:	f8d8 3000 	ldr.w	r3, [r8]
 80098b4:	f8c8 a004 	str.w	sl, [r8, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	4640      	mov	r0, r8
 80098bc:	f803 200a 	strb.w	r2, [r3, sl]
 80098c0:	b003      	add	sp, #12
 80098c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c6:	42bc      	cmp	r4, r7
 80098c8:	d803      	bhi.n	80098d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 80098ca:	462a      	mov	r2, r5
 80098cc:	eb07 010b 	add.w	r1, r7, fp
 80098d0:	e7cd      	b.n	800986e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 80098d2:	1be4      	subs	r4, r4, r7
 80098d4:	4622      	mov	r2, r4
 80098d6:	4639      	mov	r1, r7
 80098d8:	4630      	mov	r0, r6
 80098da:	f7ff ff3f 	bl	800975c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80098de:	1b2a      	subs	r2, r5, r4
 80098e0:	1971      	adds	r1, r6, r5
 80098e2:	1930      	adds	r0, r6, r4
 80098e4:	e7c4      	b.n	8009870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80098e6:	9500      	str	r5, [sp, #0]
 80098e8:	463b      	mov	r3, r7
 80098ea:	4622      	mov	r2, r4
 80098ec:	4649      	mov	r1, r9
 80098ee:	4640      	mov	r0, r8
 80098f0:	f7ff ff45 	bl	800977e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80098f4:	e7dc      	b.n	80098b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80098f6:	f1b9 0f00 	cmp.w	r9, #0
 80098fa:	d0d0      	beq.n	800989e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 80098fc:	e7c8      	b.n	8009890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 80098fe:	bf00      	nop
 8009900:	0800a318 	.word	0x0800a318

08009904 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8009904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009906:	4604      	mov	r4, r0
 8009908:	4608      	mov	r0, r1
 800990a:	9103      	str	r1, [sp, #12]
 800990c:	f7f6 fc68 	bl	80001e0 <strlen>
 8009910:	9b03      	ldr	r3, [sp, #12]
 8009912:	9000      	str	r0, [sp, #0]
 8009914:	6862      	ldr	r2, [r4, #4]
 8009916:	2100      	movs	r1, #0
 8009918:	4620      	mov	r0, r4
 800991a:	f7ff ff75 	bl	8009808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800991e:	b004      	add	sp, #16
 8009920:	bd10      	pop	{r4, pc}

08009922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8009922:	b508      	push	{r3, lr}
 8009924:	f7ff ffee 	bl	8009904 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8009928:	bd08      	pop	{r3, pc}

0800992a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800992a:	6800      	ldr	r0, [r0, #0]
 800992c:	4770      	bx	lr
	...

08009930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8009930:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009932:	4604      	mov	r4, r0
 8009934:	4616      	mov	r6, r2
 8009936:	460d      	mov	r5, r1
 8009938:	b919      	cbnz	r1, 8009942 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800993a:	b112      	cbz	r2, 8009942 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800993c:	480d      	ldr	r0, [pc, #52]	; (8009974 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800993e:	f000 f858 	bl	80099f2 <_ZSt19__throw_logic_errorPKc>
 8009942:	1b73      	subs	r3, r6, r5
 8009944:	2b0f      	cmp	r3, #15
 8009946:	9301      	str	r3, [sp, #4]
 8009948:	d907      	bls.n	800995a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800994a:	2200      	movs	r2, #0
 800994c:	a901      	add	r1, sp, #4
 800994e:	4620      	mov	r0, r4
 8009950:	f7ff feb6 	bl	80096c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009954:	9b01      	ldr	r3, [sp, #4]
 8009956:	6020      	str	r0, [r4, #0]
 8009958:	60a3      	str	r3, [r4, #8]
 800995a:	4632      	mov	r2, r6
 800995c:	4629      	mov	r1, r5
 800995e:	6820      	ldr	r0, [r4, #0]
 8009960:	f7ff ff08 	bl	8009774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8009964:	9b01      	ldr	r3, [sp, #4]
 8009966:	6822      	ldr	r2, [r4, #0]
 8009968:	6063      	str	r3, [r4, #4]
 800996a:	2100      	movs	r1, #0
 800996c:	54d1      	strb	r1, [r2, r3]
 800996e:	b002      	add	sp, #8
 8009970:	bd70      	pop	{r4, r5, r6, pc}
 8009972:	bf00      	nop
 8009974:	0800a331 	.word	0x0800a331

08009978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	f100 0308 	add.w	r3, r0, #8
 800997e:	4604      	mov	r4, r0
 8009980:	6003      	str	r3, [r0, #0]
 8009982:	460d      	mov	r5, r1
 8009984:	b159      	cbz	r1, 800999e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8009986:	4608      	mov	r0, r1
 8009988:	f7f6 fc2a 	bl	80001e0 <strlen>
 800998c:	182a      	adds	r2, r5, r0
 800998e:	4620      	mov	r0, r4
 8009990:	f04f 0300 	mov.w	r3, #0
 8009994:	4629      	mov	r1, r5
 8009996:	f7ff ffcb 	bl	8009930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800999a:	4620      	mov	r0, r4
 800999c:	bd38      	pop	{r3, r4, r5, pc}
 800999e:	2201      	movs	r2, #1
 80099a0:	e7f5      	b.n	800998e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080099a2 <_ZdlPv>:
 80099a2:	f000 b871 	b.w	8009a88 <free>

080099a6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80099a6:	b508      	push	{r3, lr}
 80099a8:	4780      	blx	r0
 80099aa:	f000 f831 	bl	8009a10 <abort>
	...

080099b0 <_ZSt13get_terminatev>:
 80099b0:	4b02      	ldr	r3, [pc, #8]	; (80099bc <_ZSt13get_terminatev+0xc>)
 80099b2:	6818      	ldr	r0, [r3, #0]
 80099b4:	f3bf 8f5b 	dmb	ish
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	20000020 	.word	0x20000020

080099c0 <_ZSt9terminatev>:
 80099c0:	b508      	push	{r3, lr}
 80099c2:	f7ff fff5 	bl	80099b0 <_ZSt13get_terminatev>
 80099c6:	f7ff ffee 	bl	80099a6 <_ZN10__cxxabiv111__terminateEPFvvE>

080099ca <_Znwj>:
 80099ca:	2801      	cmp	r0, #1
 80099cc:	bf38      	it	cc
 80099ce:	2001      	movcc	r0, #1
 80099d0:	b510      	push	{r4, lr}
 80099d2:	4604      	mov	r4, r0
 80099d4:	4620      	mov	r0, r4
 80099d6:	f000 f84f 	bl	8009a78 <malloc>
 80099da:	b930      	cbnz	r0, 80099ea <_Znwj+0x20>
 80099dc:	f000 f810 	bl	8009a00 <_ZSt15get_new_handlerv>
 80099e0:	b908      	cbnz	r0, 80099e6 <_Znwj+0x1c>
 80099e2:	f000 f815 	bl	8009a10 <abort>
 80099e6:	4780      	blx	r0
 80099e8:	e7f4      	b.n	80099d4 <_Znwj+0xa>
 80099ea:	bd10      	pop	{r4, pc}

080099ec <_ZSt17__throw_bad_allocv>:
 80099ec:	b508      	push	{r3, lr}
 80099ee:	f000 f80f 	bl	8009a10 <abort>

080099f2 <_ZSt19__throw_logic_errorPKc>:
 80099f2:	b508      	push	{r3, lr}
 80099f4:	f000 f80c 	bl	8009a10 <abort>

080099f8 <_ZSt20__throw_length_errorPKc>:
 80099f8:	b508      	push	{r3, lr}
 80099fa:	f000 f809 	bl	8009a10 <abort>
	...

08009a00 <_ZSt15get_new_handlerv>:
 8009a00:	4b02      	ldr	r3, [pc, #8]	; (8009a0c <_ZSt15get_new_handlerv+0xc>)
 8009a02:	6818      	ldr	r0, [r3, #0]
 8009a04:	f3bf 8f5b 	dmb	ish
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	20005640 	.word	0x20005640

08009a10 <abort>:
 8009a10:	b508      	push	{r3, lr}
 8009a12:	2006      	movs	r0, #6
 8009a14:	f000 f9fa 	bl	8009e0c <raise>
 8009a18:	2001      	movs	r0, #1
 8009a1a:	f7f9 faeb 	bl	8002ff4 <_exit>
	...

08009a20 <__errno>:
 8009a20:	4b01      	ldr	r3, [pc, #4]	; (8009a28 <__errno+0x8>)
 8009a22:	6818      	ldr	r0, [r3, #0]
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	20000024 	.word	0x20000024

08009a2c <__libc_init_array>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	4d0d      	ldr	r5, [pc, #52]	; (8009a64 <__libc_init_array+0x38>)
 8009a30:	4c0d      	ldr	r4, [pc, #52]	; (8009a68 <__libc_init_array+0x3c>)
 8009a32:	1b64      	subs	r4, r4, r5
 8009a34:	10a4      	asrs	r4, r4, #2
 8009a36:	2600      	movs	r6, #0
 8009a38:	42a6      	cmp	r6, r4
 8009a3a:	d109      	bne.n	8009a50 <__libc_init_array+0x24>
 8009a3c:	4d0b      	ldr	r5, [pc, #44]	; (8009a6c <__libc_init_array+0x40>)
 8009a3e:	4c0c      	ldr	r4, [pc, #48]	; (8009a70 <__libc_init_array+0x44>)
 8009a40:	f000 fa44 	bl	8009ecc <_init>
 8009a44:	1b64      	subs	r4, r4, r5
 8009a46:	10a4      	asrs	r4, r4, #2
 8009a48:	2600      	movs	r6, #0
 8009a4a:	42a6      	cmp	r6, r4
 8009a4c:	d105      	bne.n	8009a5a <__libc_init_array+0x2e>
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a54:	4798      	blx	r3
 8009a56:	3601      	adds	r6, #1
 8009a58:	e7ee      	b.n	8009a38 <__libc_init_array+0xc>
 8009a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a5e:	4798      	blx	r3
 8009a60:	3601      	adds	r6, #1
 8009a62:	e7f2      	b.n	8009a4a <__libc_init_array+0x1e>
 8009a64:	0800a3c4 	.word	0x0800a3c4
 8009a68:	0800a3c4 	.word	0x0800a3c4
 8009a6c:	0800a3c4 	.word	0x0800a3c4
 8009a70:	0800a3cc 	.word	0x0800a3cc

08009a74 <__retarget_lock_acquire_recursive>:
 8009a74:	4770      	bx	lr

08009a76 <__retarget_lock_release_recursive>:
 8009a76:	4770      	bx	lr

08009a78 <malloc>:
 8009a78:	4b02      	ldr	r3, [pc, #8]	; (8009a84 <malloc+0xc>)
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	6818      	ldr	r0, [r3, #0]
 8009a7e:	f000 b8a7 	b.w	8009bd0 <_malloc_r>
 8009a82:	bf00      	nop
 8009a84:	20000024 	.word	0x20000024

08009a88 <free>:
 8009a88:	4b02      	ldr	r3, [pc, #8]	; (8009a94 <free+0xc>)
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	6818      	ldr	r0, [r3, #0]
 8009a8e:	f000 b833 	b.w	8009af8 <_free_r>
 8009a92:	bf00      	nop
 8009a94:	20000024 	.word	0x20000024

08009a98 <memcpy>:
 8009a98:	440a      	add	r2, r1
 8009a9a:	4291      	cmp	r1, r2
 8009a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009aa0:	d100      	bne.n	8009aa4 <memcpy+0xc>
 8009aa2:	4770      	bx	lr
 8009aa4:	b510      	push	{r4, lr}
 8009aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aae:	4291      	cmp	r1, r2
 8009ab0:	d1f9      	bne.n	8009aa6 <memcpy+0xe>
 8009ab2:	bd10      	pop	{r4, pc}

08009ab4 <memmove>:
 8009ab4:	4288      	cmp	r0, r1
 8009ab6:	b510      	push	{r4, lr}
 8009ab8:	eb01 0402 	add.w	r4, r1, r2
 8009abc:	d902      	bls.n	8009ac4 <memmove+0x10>
 8009abe:	4284      	cmp	r4, r0
 8009ac0:	4623      	mov	r3, r4
 8009ac2:	d807      	bhi.n	8009ad4 <memmove+0x20>
 8009ac4:	1e43      	subs	r3, r0, #1
 8009ac6:	42a1      	cmp	r1, r4
 8009ac8:	d008      	beq.n	8009adc <memmove+0x28>
 8009aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ace:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ad2:	e7f8      	b.n	8009ac6 <memmove+0x12>
 8009ad4:	4402      	add	r2, r0
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	428a      	cmp	r2, r1
 8009ada:	d100      	bne.n	8009ade <memmove+0x2a>
 8009adc:	bd10      	pop	{r4, pc}
 8009ade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ae6:	e7f7      	b.n	8009ad8 <memmove+0x24>

08009ae8 <memset>:
 8009ae8:	4402      	add	r2, r0
 8009aea:	4603      	mov	r3, r0
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d100      	bne.n	8009af2 <memset+0xa>
 8009af0:	4770      	bx	lr
 8009af2:	f803 1b01 	strb.w	r1, [r3], #1
 8009af6:	e7f9      	b.n	8009aec <memset+0x4>

08009af8 <_free_r>:
 8009af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009afa:	2900      	cmp	r1, #0
 8009afc:	d044      	beq.n	8009b88 <_free_r+0x90>
 8009afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b02:	9001      	str	r0, [sp, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f1a1 0404 	sub.w	r4, r1, #4
 8009b0a:	bfb8      	it	lt
 8009b0c:	18e4      	addlt	r4, r4, r3
 8009b0e:	f000 f999 	bl	8009e44 <__malloc_lock>
 8009b12:	4a1e      	ldr	r2, [pc, #120]	; (8009b8c <_free_r+0x94>)
 8009b14:	9801      	ldr	r0, [sp, #4]
 8009b16:	6813      	ldr	r3, [r2, #0]
 8009b18:	b933      	cbnz	r3, 8009b28 <_free_r+0x30>
 8009b1a:	6063      	str	r3, [r4, #4]
 8009b1c:	6014      	str	r4, [r2, #0]
 8009b1e:	b003      	add	sp, #12
 8009b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b24:	f000 b994 	b.w	8009e50 <__malloc_unlock>
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	d908      	bls.n	8009b3e <_free_r+0x46>
 8009b2c:	6825      	ldr	r5, [r4, #0]
 8009b2e:	1961      	adds	r1, r4, r5
 8009b30:	428b      	cmp	r3, r1
 8009b32:	bf01      	itttt	eq
 8009b34:	6819      	ldreq	r1, [r3, #0]
 8009b36:	685b      	ldreq	r3, [r3, #4]
 8009b38:	1949      	addeq	r1, r1, r5
 8009b3a:	6021      	streq	r1, [r4, #0]
 8009b3c:	e7ed      	b.n	8009b1a <_free_r+0x22>
 8009b3e:	461a      	mov	r2, r3
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	b10b      	cbz	r3, 8009b48 <_free_r+0x50>
 8009b44:	42a3      	cmp	r3, r4
 8009b46:	d9fa      	bls.n	8009b3e <_free_r+0x46>
 8009b48:	6811      	ldr	r1, [r2, #0]
 8009b4a:	1855      	adds	r5, r2, r1
 8009b4c:	42a5      	cmp	r5, r4
 8009b4e:	d10b      	bne.n	8009b68 <_free_r+0x70>
 8009b50:	6824      	ldr	r4, [r4, #0]
 8009b52:	4421      	add	r1, r4
 8009b54:	1854      	adds	r4, r2, r1
 8009b56:	42a3      	cmp	r3, r4
 8009b58:	6011      	str	r1, [r2, #0]
 8009b5a:	d1e0      	bne.n	8009b1e <_free_r+0x26>
 8009b5c:	681c      	ldr	r4, [r3, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	6053      	str	r3, [r2, #4]
 8009b62:	4421      	add	r1, r4
 8009b64:	6011      	str	r1, [r2, #0]
 8009b66:	e7da      	b.n	8009b1e <_free_r+0x26>
 8009b68:	d902      	bls.n	8009b70 <_free_r+0x78>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	6003      	str	r3, [r0, #0]
 8009b6e:	e7d6      	b.n	8009b1e <_free_r+0x26>
 8009b70:	6825      	ldr	r5, [r4, #0]
 8009b72:	1961      	adds	r1, r4, r5
 8009b74:	428b      	cmp	r3, r1
 8009b76:	bf04      	itt	eq
 8009b78:	6819      	ldreq	r1, [r3, #0]
 8009b7a:	685b      	ldreq	r3, [r3, #4]
 8009b7c:	6063      	str	r3, [r4, #4]
 8009b7e:	bf04      	itt	eq
 8009b80:	1949      	addeq	r1, r1, r5
 8009b82:	6021      	streq	r1, [r4, #0]
 8009b84:	6054      	str	r4, [r2, #4]
 8009b86:	e7ca      	b.n	8009b1e <_free_r+0x26>
 8009b88:	b003      	add	sp, #12
 8009b8a:	bd30      	pop	{r4, r5, pc}
 8009b8c:	20005648 	.word	0x20005648

08009b90 <sbrk_aligned>:
 8009b90:	b570      	push	{r4, r5, r6, lr}
 8009b92:	4e0e      	ldr	r6, [pc, #56]	; (8009bcc <sbrk_aligned+0x3c>)
 8009b94:	460c      	mov	r4, r1
 8009b96:	6831      	ldr	r1, [r6, #0]
 8009b98:	4605      	mov	r5, r0
 8009b9a:	b911      	cbnz	r1, 8009ba2 <sbrk_aligned+0x12>
 8009b9c:	f000 f8fe 	bl	8009d9c <_sbrk_r>
 8009ba0:	6030      	str	r0, [r6, #0]
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f000 f8f9 	bl	8009d9c <_sbrk_r>
 8009baa:	1c43      	adds	r3, r0, #1
 8009bac:	d00a      	beq.n	8009bc4 <sbrk_aligned+0x34>
 8009bae:	1cc4      	adds	r4, r0, #3
 8009bb0:	f024 0403 	bic.w	r4, r4, #3
 8009bb4:	42a0      	cmp	r0, r4
 8009bb6:	d007      	beq.n	8009bc8 <sbrk_aligned+0x38>
 8009bb8:	1a21      	subs	r1, r4, r0
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f000 f8ee 	bl	8009d9c <_sbrk_r>
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d101      	bne.n	8009bc8 <sbrk_aligned+0x38>
 8009bc4:	f04f 34ff 	mov.w	r4, #4294967295
 8009bc8:	4620      	mov	r0, r4
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	2000564c 	.word	0x2000564c

08009bd0 <_malloc_r>:
 8009bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd4:	1ccd      	adds	r5, r1, #3
 8009bd6:	f025 0503 	bic.w	r5, r5, #3
 8009bda:	3508      	adds	r5, #8
 8009bdc:	2d0c      	cmp	r5, #12
 8009bde:	bf38      	it	cc
 8009be0:	250c      	movcc	r5, #12
 8009be2:	2d00      	cmp	r5, #0
 8009be4:	4607      	mov	r7, r0
 8009be6:	db01      	blt.n	8009bec <_malloc_r+0x1c>
 8009be8:	42a9      	cmp	r1, r5
 8009bea:	d905      	bls.n	8009bf8 <_malloc_r+0x28>
 8009bec:	230c      	movs	r3, #12
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	2600      	movs	r6, #0
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf8:	4e2e      	ldr	r6, [pc, #184]	; (8009cb4 <_malloc_r+0xe4>)
 8009bfa:	f000 f923 	bl	8009e44 <__malloc_lock>
 8009bfe:	6833      	ldr	r3, [r6, #0]
 8009c00:	461c      	mov	r4, r3
 8009c02:	bb34      	cbnz	r4, 8009c52 <_malloc_r+0x82>
 8009c04:	4629      	mov	r1, r5
 8009c06:	4638      	mov	r0, r7
 8009c08:	f7ff ffc2 	bl	8009b90 <sbrk_aligned>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	4604      	mov	r4, r0
 8009c10:	d14d      	bne.n	8009cae <_malloc_r+0xde>
 8009c12:	6834      	ldr	r4, [r6, #0]
 8009c14:	4626      	mov	r6, r4
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	d140      	bne.n	8009c9c <_malloc_r+0xcc>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	4638      	mov	r0, r7
 8009c20:	eb04 0803 	add.w	r8, r4, r3
 8009c24:	f000 f8ba 	bl	8009d9c <_sbrk_r>
 8009c28:	4580      	cmp	r8, r0
 8009c2a:	d13a      	bne.n	8009ca2 <_malloc_r+0xd2>
 8009c2c:	6821      	ldr	r1, [r4, #0]
 8009c2e:	3503      	adds	r5, #3
 8009c30:	1a6d      	subs	r5, r5, r1
 8009c32:	f025 0503 	bic.w	r5, r5, #3
 8009c36:	3508      	adds	r5, #8
 8009c38:	2d0c      	cmp	r5, #12
 8009c3a:	bf38      	it	cc
 8009c3c:	250c      	movcc	r5, #12
 8009c3e:	4629      	mov	r1, r5
 8009c40:	4638      	mov	r0, r7
 8009c42:	f7ff ffa5 	bl	8009b90 <sbrk_aligned>
 8009c46:	3001      	adds	r0, #1
 8009c48:	d02b      	beq.n	8009ca2 <_malloc_r+0xd2>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	442b      	add	r3, r5
 8009c4e:	6023      	str	r3, [r4, #0]
 8009c50:	e00e      	b.n	8009c70 <_malloc_r+0xa0>
 8009c52:	6822      	ldr	r2, [r4, #0]
 8009c54:	1b52      	subs	r2, r2, r5
 8009c56:	d41e      	bmi.n	8009c96 <_malloc_r+0xc6>
 8009c58:	2a0b      	cmp	r2, #11
 8009c5a:	d916      	bls.n	8009c8a <_malloc_r+0xba>
 8009c5c:	1961      	adds	r1, r4, r5
 8009c5e:	42a3      	cmp	r3, r4
 8009c60:	6025      	str	r5, [r4, #0]
 8009c62:	bf18      	it	ne
 8009c64:	6059      	strne	r1, [r3, #4]
 8009c66:	6863      	ldr	r3, [r4, #4]
 8009c68:	bf08      	it	eq
 8009c6a:	6031      	streq	r1, [r6, #0]
 8009c6c:	5162      	str	r2, [r4, r5]
 8009c6e:	604b      	str	r3, [r1, #4]
 8009c70:	4638      	mov	r0, r7
 8009c72:	f104 060b 	add.w	r6, r4, #11
 8009c76:	f000 f8eb 	bl	8009e50 <__malloc_unlock>
 8009c7a:	f026 0607 	bic.w	r6, r6, #7
 8009c7e:	1d23      	adds	r3, r4, #4
 8009c80:	1af2      	subs	r2, r6, r3
 8009c82:	d0b6      	beq.n	8009bf2 <_malloc_r+0x22>
 8009c84:	1b9b      	subs	r3, r3, r6
 8009c86:	50a3      	str	r3, [r4, r2]
 8009c88:	e7b3      	b.n	8009bf2 <_malloc_r+0x22>
 8009c8a:	6862      	ldr	r2, [r4, #4]
 8009c8c:	42a3      	cmp	r3, r4
 8009c8e:	bf0c      	ite	eq
 8009c90:	6032      	streq	r2, [r6, #0]
 8009c92:	605a      	strne	r2, [r3, #4]
 8009c94:	e7ec      	b.n	8009c70 <_malloc_r+0xa0>
 8009c96:	4623      	mov	r3, r4
 8009c98:	6864      	ldr	r4, [r4, #4]
 8009c9a:	e7b2      	b.n	8009c02 <_malloc_r+0x32>
 8009c9c:	4634      	mov	r4, r6
 8009c9e:	6876      	ldr	r6, [r6, #4]
 8009ca0:	e7b9      	b.n	8009c16 <_malloc_r+0x46>
 8009ca2:	230c      	movs	r3, #12
 8009ca4:	603b      	str	r3, [r7, #0]
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	f000 f8d2 	bl	8009e50 <__malloc_unlock>
 8009cac:	e7a1      	b.n	8009bf2 <_malloc_r+0x22>
 8009cae:	6025      	str	r5, [r4, #0]
 8009cb0:	e7de      	b.n	8009c70 <_malloc_r+0xa0>
 8009cb2:	bf00      	nop
 8009cb4:	20005648 	.word	0x20005648

08009cb8 <realloc>:
 8009cb8:	4b02      	ldr	r3, [pc, #8]	; (8009cc4 <realloc+0xc>)
 8009cba:	460a      	mov	r2, r1
 8009cbc:	4601      	mov	r1, r0
 8009cbe:	6818      	ldr	r0, [r3, #0]
 8009cc0:	f000 b8cc 	b.w	8009e5c <_realloc_r>
 8009cc4:	20000024 	.word	0x20000024

08009cc8 <cleanup_glue>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	460c      	mov	r4, r1
 8009ccc:	6809      	ldr	r1, [r1, #0]
 8009cce:	4605      	mov	r5, r0
 8009cd0:	b109      	cbz	r1, 8009cd6 <cleanup_glue+0xe>
 8009cd2:	f7ff fff9 	bl	8009cc8 <cleanup_glue>
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	4628      	mov	r0, r5
 8009cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cde:	f7ff bf0b 	b.w	8009af8 <_free_r>
	...

08009ce4 <_reclaim_reent>:
 8009ce4:	4b2c      	ldr	r3, [pc, #176]	; (8009d98 <_reclaim_reent+0xb4>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4283      	cmp	r3, r0
 8009cea:	b570      	push	{r4, r5, r6, lr}
 8009cec:	4604      	mov	r4, r0
 8009cee:	d051      	beq.n	8009d94 <_reclaim_reent+0xb0>
 8009cf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009cf2:	b143      	cbz	r3, 8009d06 <_reclaim_reent+0x22>
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d14a      	bne.n	8009d90 <_reclaim_reent+0xac>
 8009cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cfc:	6819      	ldr	r1, [r3, #0]
 8009cfe:	b111      	cbz	r1, 8009d06 <_reclaim_reent+0x22>
 8009d00:	4620      	mov	r0, r4
 8009d02:	f7ff fef9 	bl	8009af8 <_free_r>
 8009d06:	6961      	ldr	r1, [r4, #20]
 8009d08:	b111      	cbz	r1, 8009d10 <_reclaim_reent+0x2c>
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f7ff fef4 	bl	8009af8 <_free_r>
 8009d10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009d12:	b111      	cbz	r1, 8009d1a <_reclaim_reent+0x36>
 8009d14:	4620      	mov	r0, r4
 8009d16:	f7ff feef 	bl	8009af8 <_free_r>
 8009d1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009d1c:	b111      	cbz	r1, 8009d24 <_reclaim_reent+0x40>
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7ff feea 	bl	8009af8 <_free_r>
 8009d24:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009d26:	b111      	cbz	r1, 8009d2e <_reclaim_reent+0x4a>
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f7ff fee5 	bl	8009af8 <_free_r>
 8009d2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009d30:	b111      	cbz	r1, 8009d38 <_reclaim_reent+0x54>
 8009d32:	4620      	mov	r0, r4
 8009d34:	f7ff fee0 	bl	8009af8 <_free_r>
 8009d38:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009d3a:	b111      	cbz	r1, 8009d42 <_reclaim_reent+0x5e>
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f7ff fedb 	bl	8009af8 <_free_r>
 8009d42:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009d44:	b111      	cbz	r1, 8009d4c <_reclaim_reent+0x68>
 8009d46:	4620      	mov	r0, r4
 8009d48:	f7ff fed6 	bl	8009af8 <_free_r>
 8009d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d4e:	b111      	cbz	r1, 8009d56 <_reclaim_reent+0x72>
 8009d50:	4620      	mov	r0, r4
 8009d52:	f7ff fed1 	bl	8009af8 <_free_r>
 8009d56:	69a3      	ldr	r3, [r4, #24]
 8009d58:	b1e3      	cbz	r3, 8009d94 <_reclaim_reent+0xb0>
 8009d5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	4798      	blx	r3
 8009d60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009d62:	b1b9      	cbz	r1, 8009d94 <_reclaim_reent+0xb0>
 8009d64:	4620      	mov	r0, r4
 8009d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d6a:	f7ff bfad 	b.w	8009cc8 <cleanup_glue>
 8009d6e:	5949      	ldr	r1, [r1, r5]
 8009d70:	b941      	cbnz	r1, 8009d84 <_reclaim_reent+0xa0>
 8009d72:	3504      	adds	r5, #4
 8009d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d76:	2d80      	cmp	r5, #128	; 0x80
 8009d78:	68d9      	ldr	r1, [r3, #12]
 8009d7a:	d1f8      	bne.n	8009d6e <_reclaim_reent+0x8a>
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f7ff febb 	bl	8009af8 <_free_r>
 8009d82:	e7ba      	b.n	8009cfa <_reclaim_reent+0x16>
 8009d84:	680e      	ldr	r6, [r1, #0]
 8009d86:	4620      	mov	r0, r4
 8009d88:	f7ff feb6 	bl	8009af8 <_free_r>
 8009d8c:	4631      	mov	r1, r6
 8009d8e:	e7ef      	b.n	8009d70 <_reclaim_reent+0x8c>
 8009d90:	2500      	movs	r5, #0
 8009d92:	e7ef      	b.n	8009d74 <_reclaim_reent+0x90>
 8009d94:	bd70      	pop	{r4, r5, r6, pc}
 8009d96:	bf00      	nop
 8009d98:	20000024 	.word	0x20000024

08009d9c <_sbrk_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4d06      	ldr	r5, [pc, #24]	; (8009db8 <_sbrk_r+0x1c>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	4604      	mov	r4, r0
 8009da4:	4608      	mov	r0, r1
 8009da6:	602b      	str	r3, [r5, #0]
 8009da8:	f7f9 f92e 	bl	8003008 <_sbrk>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	d102      	bne.n	8009db6 <_sbrk_r+0x1a>
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	b103      	cbz	r3, 8009db6 <_sbrk_r+0x1a>
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	20005650 	.word	0x20005650

08009dbc <_raise_r>:
 8009dbc:	291f      	cmp	r1, #31
 8009dbe:	b538      	push	{r3, r4, r5, lr}
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	460d      	mov	r5, r1
 8009dc4:	d904      	bls.n	8009dd0 <_raise_r+0x14>
 8009dc6:	2316      	movs	r3, #22
 8009dc8:	6003      	str	r3, [r0, #0]
 8009dca:	f04f 30ff 	mov.w	r0, #4294967295
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009dd2:	b112      	cbz	r2, 8009dda <_raise_r+0x1e>
 8009dd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dd8:	b94b      	cbnz	r3, 8009dee <_raise_r+0x32>
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f000 f830 	bl	8009e40 <_getpid_r>
 8009de0:	462a      	mov	r2, r5
 8009de2:	4601      	mov	r1, r0
 8009de4:	4620      	mov	r0, r4
 8009de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dea:	f000 b817 	b.w	8009e1c <_kill_r>
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d00a      	beq.n	8009e08 <_raise_r+0x4c>
 8009df2:	1c59      	adds	r1, r3, #1
 8009df4:	d103      	bne.n	8009dfe <_raise_r+0x42>
 8009df6:	2316      	movs	r3, #22
 8009df8:	6003      	str	r3, [r0, #0]
 8009dfa:	2001      	movs	r0, #1
 8009dfc:	e7e7      	b.n	8009dce <_raise_r+0x12>
 8009dfe:	2400      	movs	r4, #0
 8009e00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e04:	4628      	mov	r0, r5
 8009e06:	4798      	blx	r3
 8009e08:	2000      	movs	r0, #0
 8009e0a:	e7e0      	b.n	8009dce <_raise_r+0x12>

08009e0c <raise>:
 8009e0c:	4b02      	ldr	r3, [pc, #8]	; (8009e18 <raise+0xc>)
 8009e0e:	4601      	mov	r1, r0
 8009e10:	6818      	ldr	r0, [r3, #0]
 8009e12:	f7ff bfd3 	b.w	8009dbc <_raise_r>
 8009e16:	bf00      	nop
 8009e18:	20000024 	.word	0x20000024

08009e1c <_kill_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4d07      	ldr	r5, [pc, #28]	; (8009e3c <_kill_r+0x20>)
 8009e20:	2300      	movs	r3, #0
 8009e22:	4604      	mov	r4, r0
 8009e24:	4608      	mov	r0, r1
 8009e26:	4611      	mov	r1, r2
 8009e28:	602b      	str	r3, [r5, #0]
 8009e2a:	f7f9 f8d3 	bl	8002fd4 <_kill>
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	d102      	bne.n	8009e38 <_kill_r+0x1c>
 8009e32:	682b      	ldr	r3, [r5, #0]
 8009e34:	b103      	cbz	r3, 8009e38 <_kill_r+0x1c>
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	bd38      	pop	{r3, r4, r5, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20005650 	.word	0x20005650

08009e40 <_getpid_r>:
 8009e40:	f7f9 b8c0 	b.w	8002fc4 <_getpid>

08009e44 <__malloc_lock>:
 8009e44:	4801      	ldr	r0, [pc, #4]	; (8009e4c <__malloc_lock+0x8>)
 8009e46:	f7ff be15 	b.w	8009a74 <__retarget_lock_acquire_recursive>
 8009e4a:	bf00      	nop
 8009e4c:	20005644 	.word	0x20005644

08009e50 <__malloc_unlock>:
 8009e50:	4801      	ldr	r0, [pc, #4]	; (8009e58 <__malloc_unlock+0x8>)
 8009e52:	f7ff be10 	b.w	8009a76 <__retarget_lock_release_recursive>
 8009e56:	bf00      	nop
 8009e58:	20005644 	.word	0x20005644

08009e5c <_realloc_r>:
 8009e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e60:	4680      	mov	r8, r0
 8009e62:	4614      	mov	r4, r2
 8009e64:	460e      	mov	r6, r1
 8009e66:	b921      	cbnz	r1, 8009e72 <_realloc_r+0x16>
 8009e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	f7ff beaf 	b.w	8009bd0 <_malloc_r>
 8009e72:	b92a      	cbnz	r2, 8009e80 <_realloc_r+0x24>
 8009e74:	f7ff fe40 	bl	8009af8 <_free_r>
 8009e78:	4625      	mov	r5, r4
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e80:	f000 f81b 	bl	8009eba <_malloc_usable_size_r>
 8009e84:	4284      	cmp	r4, r0
 8009e86:	4607      	mov	r7, r0
 8009e88:	d802      	bhi.n	8009e90 <_realloc_r+0x34>
 8009e8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e8e:	d812      	bhi.n	8009eb6 <_realloc_r+0x5a>
 8009e90:	4621      	mov	r1, r4
 8009e92:	4640      	mov	r0, r8
 8009e94:	f7ff fe9c 	bl	8009bd0 <_malloc_r>
 8009e98:	4605      	mov	r5, r0
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d0ed      	beq.n	8009e7a <_realloc_r+0x1e>
 8009e9e:	42bc      	cmp	r4, r7
 8009ea0:	4622      	mov	r2, r4
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	bf28      	it	cs
 8009ea6:	463a      	movcs	r2, r7
 8009ea8:	f7ff fdf6 	bl	8009a98 <memcpy>
 8009eac:	4631      	mov	r1, r6
 8009eae:	4640      	mov	r0, r8
 8009eb0:	f7ff fe22 	bl	8009af8 <_free_r>
 8009eb4:	e7e1      	b.n	8009e7a <_realloc_r+0x1e>
 8009eb6:	4635      	mov	r5, r6
 8009eb8:	e7df      	b.n	8009e7a <_realloc_r+0x1e>

08009eba <_malloc_usable_size_r>:
 8009eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ebe:	1f18      	subs	r0, r3, #4
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	bfbc      	itt	lt
 8009ec4:	580b      	ldrlt	r3, [r1, r0]
 8009ec6:	18c0      	addlt	r0, r0, r3
 8009ec8:	4770      	bx	lr
	...

08009ecc <_init>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	bf00      	nop
 8009ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed2:	bc08      	pop	{r3}
 8009ed4:	469e      	mov	lr, r3
 8009ed6:	4770      	bx	lr

08009ed8 <_fini>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr
